---
title: "Format Data"
---

**Purpose:** Format data for modeling in JAGS

```{r include=FALSE}
library(ggplot2)
library(tidyverse)
#library(nlme)
# library(devtools)
# #install_github("conteStreamTemperature", username = "Conte-Ecology")
# library(conteStreamTemperature)

```

## Base data

Temperature and flow data
```{r}
dat <- read_csv("data/EcoDrought_FlowTempData_DailyWeekly_clean.csv")
dat
```

Fix basins and trim to focal variables.
```{r}
mysitebasins <- dat %>% 
  group_by(site_name) %>% 
  summarize(basin = unique(basin),
            lat = unique(lat), 
            long = unique(long), 
            elev_ft = unique(elev_ft),
            area_sqmi = unique(area_sqmi)) %>% 
  filter(!is.na(basin), !is.na(lat), !is.na(long), !is.na(elev_ft), !is.na(area_sqmi)) %>% 
  mutate(basin = recode(basin, "Shields River" = "Yellowstone"))

dat <- dat %>% 
  select(-c(basin, lat, long, elev_ft, area_sqmi)) %>% 
  left_join(mysitebasins) %>% 
  select(site_name, basin, lat, long, elev_ft, area_sqmi, date, yday, year, siteYear, 
         tempc_mean, tempc_min, tempc_max, flow_mean, Yield_mm, air_temp_mean, precip_mmday, swe_kgm2, daylength_sec, shortrad_wm2)

dat
```

Z-score air temp and flow and calculate lagged air temp variables. *Note: air temp and flow are standardized by site.*
```{r}
# ensure proper ordering
dat <- dat[order(dat$site_name, dat$year, dat$yday),]

# calculate lagged air temp
dat <- dat %>%
  mutate(Yield_mm_log = log(Yield_mm + 0.00001),
         flow_mean_log = log(flow_mean + 0.00001)) %>%
  group_by(site_name) %>%
  mutate(z_Yield_mm_log = c(scale(Yield_mm_log, center = TRUE, scale = TRUE)),
         z_air_temp_mean = c(scale(air_temp_mean, center = TRUE, scale = TRUE))) %>%
  mutate(air_temp_mean_lag1 = lag(air_temp_mean, 1),
         air_temp_mean_lag2 = lag(air_temp_mean, 2),
         z_air_temp_mean_lag1 = lag(z_air_temp_mean, n = 1),
         z_air_temp_mean_lag2 = lag(z_air_temp_mean, n = 2)) %>%
  ungroup()
```

Breakpoints
```{r}
springFallBPs <- read_csv("data/breakpoints.csv") %>% 
  mutate(basin = recode(basin, "Shields River" = "Yellowstone"))
springFallBPs
```

Join temp/flow data with breakpoints and filter to days within synchronized period. 
```{r}
dat_bp <- dat %>% 
  left_join(springFallBPs) %>%
  filter(yday >= finalSpringBP & yday <= finalFallBP)
dat_bp
```

Show the distribution of the number of temperature observations (non-NA) per site-year
```{r}
obspersy <- dat_bp %>% group_by(siteYear) %>% summarize(numobs = sum(!is.na(tempc_mean))) %>% ungroup()
obspersy %>% ggplot() + geom_histogram(aes(x = numobs)) + theme_bw()
```

Drop siteYears with less than 10 days of temperature observations
```{r}
drops <- obspersy %>% filter(numobs < 10)
dat_bp <- dat_bp %>% filter(!siteYear %in% drops$siteYear)
```


Plot temp data with LOESS to show seasonal hysteresis
```{r fig.width=7, fig.height=7}
dat_bp %>% 
  ggplot(aes(x = yday, y = tempc_mean)) + 
  geom_point(size = 0.1) +
  facet_wrap(~factor(basin, levels = c("West Brook", "Staunton River", "Paine Run", "Flathead", "Yellowstone", "Snake River", "Donner Blitzen"))) +
  geom_smooth(color = "red", se = FALSE) +
  theme_bw() #+ theme(panel.grid = element_blank())
```

Create dummy site and basin variables (numeric for JAGS), and define "rowNum" variable to allow for identifying first rows and evaluation rows
```{r}
# arrange
dat_bp <- dat_bp %>% arrange(basin, site_name, year, yday)

# create tibbles of site and basin numeric codes
sitecodes <- tibble(site_name = unique(dat_bp$site_name), site_code = 1:length(unique(dat_bp$site_name)))
basincodes <- tibble(basin = unique(dat_bp$basin), basin_code = 1:length(unique(dat_bp$basin)))

# join to data
dat_bp <- dat_bp %>%
  left_join(sitecodes) %>%
  left_join(basincodes) %>%
  mutate(rowNum = 1:nrow(.))
```


## Landscape covariates

*To do -- derive additional landscape covariates presumed to affect stream temperature, or rather, mediate the relationship between stream and air temperature/flow (groundwater influence/pasta?, basin slope, lake area, percent forest cover, etc.)*

## Check correlations


## Write to file

Write formatted data to file
```{r}
write_csv(dat_bp, "data/EcoDrought_FlowTempData_formatted.csv")
```


