[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stream Temperature by Flow",
    "section": "",
    "text": "1 Introduction\nThis book provides a visual story of efforts to quantify the influence of streamflow on water temperature in small, headwater streams. All data was collected as part of the USGS EcoDrought project, funded by the USGS Ecosystems Mission Area, USGS Water Mission Area, and the BLM. Our approach generally follows that of Letcher et al. (2016).\nAccess the GitHub repo here: https://github.com/j-baldock/TempFlowSensitivity.git\nThis information is preliminary or provisional and is subject to revision. It is being provided to meet the need for timely best science. The information has not received final approval by the U.S. Geological Survey (USGS) and is provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the information.\nProject team: Jeff Baldock, Jenn Fair, Ben Letcher, Robert Al-Chokhachy, Jason Dunham, Clint Muhlfeld\n\n\nSession Information\n\n\n\n\nCodesessionInfo()\n\nR version 4.5.1 (2025-06-13 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.5.1    fastmap_1.2.0     cli_3.6.5        \n [5] tools_4.5.1       htmltools_0.5.8.1 rstudioapi_0.17.1 rmarkdown_2.29   \n [9] knitr_1.50        jsonlite_2.0.0    xfun_0.53         digest_0.6.37    \n[13] rlang_1.1.6       evaluate_1.0.5",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "DataViz.html",
    "href": "DataViz.html",
    "title": "\n2  Visualize Data\n",
    "section": "",
    "text": "2.1 Site information\nCodesiteinfo &lt;- read_csv(\"data/EcoDrought_SiteInformation.csv\")\ndatatable(siteinfo)\n\n\n\n\nCodesiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualize Data</span>"
    ]
  },
  {
    "objectID": "DataViz.html#flow-and-temp-data",
    "href": "DataViz.html#flow-and-temp-data",
    "title": "\n2  Visualize Data\n",
    "section": "\n2.2 Flow and temp data",
    "text": "2.2 Flow and temp data\nLoad data\n\nCodedat &lt;- read_csv(\"data/EcoDrought_FlowTempData_DailyWeekly.csv\")\ndat\n\n# A tibble: 202,014 × 31\n   station_no site_name      site_id basin   subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 2 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 3 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 4 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 5 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 6 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 7 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 8 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 9 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n10 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n# ℹ 202,004 more rows\n# ℹ 22 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\n\n\nUnique basins\n\nCodeunique(dat$basin)\n\n[1] \"Flathead\"       \"West Brook\"     \"Donner Blitzen\" \"Paine Run\"     \n[5] \"Piney River\"    \"Staunton River\" \"Shields River\"  \"Snake River\"   \n\n\n\n2.2.1 View daily temp\n\n\nWest Brook\nPaine Run\nStaunton River\nFlathead River\nYellowstone River\nSnake River\nDonner und Blitzen River\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.2 View daily flow\n\n\nWest Brook\nPaine Run\nStaunton River\nFlathead River\nYellowstone River\nSnake River\nDonner und Blitzen River",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualize Data</span>"
    ]
  },
  {
    "objectID": "DataViz.html#daymet-data",
    "href": "DataViz.html#daymet-data",
    "title": "\n2  Visualize Data\n",
    "section": "\n2.3 Daymet data",
    "text": "2.3 Daymet data\nTrim siteinfo to sites with temp/flow data\n\nCodesiteinfo_sub &lt;- siteinfo %&gt;% filter(site_name %in% unique(dat$site_name))\n\n\nDownload Daymet daily air temperature data for each site (point locations)\n\nCodeclimlist &lt;- vector(\"list\", length = dim(siteinfo_sub)[1])\nfor (i in 1:dim(siteinfo_sub)[1]) {\n  clim &lt;- download_daymet(site = siteinfo_sub$site_name[i], lat = siteinfo_sub$lat[i], lon = siteinfo_sub$long[i], start = 2010, end = 2024, internal = T)\n  climlist[[i]] &lt;- tibble(clim$data) %&gt;% \n    mutate(air_temp_mean = (tmax..deg.c. + tmin..deg.c.)/2, \n           date = as.Date(paste(year, yday, sep = \"-\"), \"%Y-%j\"),\n           site_name = siteinfo_sub$site_name[i]) %&gt;%\n    select(12,2,11,10,4,6,3,5) %&gt;% rename(precip_mmday = 5, swe_kgm2 = 6, daylength_sec = 7, shortrad_wm2 = 8)\n  print(i)\n}\nclimdf &lt;- do.call(rbind, climlist)\nwrite_csv(climdf, \"data/Daymet_daily.csv\")\n\n\nRe-load Daymet climate data\n\nCodeclimdf &lt;- read_csv(\"data/Daymet_daily.csv\")\n\n\nPlot example Daymet time series data (2020-2025, Avery Brook, MA)\n\nCodeggarrange(climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = air_temp_mean)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = precip_mmday)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = swe_kgm2)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = daylength_sec)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = shortrad_wm2)) + geom_line(),\n          ncol = 1)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualize Data</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html",
    "href": "Breakpoints.html",
    "title": "\n3  Breakpoints\n",
    "section": "",
    "text": "3.1 Data\nSite information\nCodesiteinfo &lt;- read_csv(\"data/EcoDrought_SiteInformation.csv\")\ndatatable(siteinfo)\n\n\n\n\nCodesiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\nLoad flow and temp data\nCodedat &lt;- read_csv(\"data/EcoDrought_FlowTempData_DailyWeekly.csv\")\ndat\n\n# A tibble: 202,014 × 31\n   station_no site_name      site_id basin   subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 2 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 3 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 4 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 5 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 6 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 7 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 8 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 9 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n10 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n# ℹ 202,004 more rows\n# ℹ 22 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\nCut out all days with missing temp records\nCodedat &lt;- dat %&gt;% filter(!is.na(tempc_mean))\ndat\n\n# A tibble: 109,914 × 31\n   station_no site_name     site_id basin    subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 2 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 3 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 4 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 5 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 6 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 7 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 8 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n 9 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n10 &lt;NA&gt;       BigCreekLower BIG_001 Flathead Big Cre… Flat    48.6 -114.   3429.\n# ℹ 109,904 more rows\n# ℹ 22 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\nFill missing dates using fasstr\nCodedat &lt;- fill_missing_dates(dat, dates = date, groups = site_name, pad_ends = TRUE)\ndat\n\n# A tibble: 188,463 × 31\n   station_no site_name     site_id basin subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 2 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 3 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 4 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 5 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 6 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 7 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 8 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n 9 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n10 &lt;NA&gt;       BigCreekLower &lt;NA&gt;    &lt;NA&gt;  &lt;NA&gt;     &lt;NA&gt;      NA    NA      NA\n# ℹ 188,453 more rows\n# ℹ 22 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\nUnique basins\nCodeunique(dat$basin)\n\n[1] NA               \"Flathead\"       \"West Brook\"     \"Donner Blitzen\"\n[5] \"Paine Run\"      \"Piney River\"    \"Staunton River\" \"Shields River\" \n[9] \"Snake River\"\nBind climate data to flow-temp data\nCodeclimdf &lt;- read_csv(\"data/Daymet_daily.csv\")\ndat &lt;- dat %&gt;% left_join(climdf)\nPlot an example air (orange) and water (blue) temperature time series\nCodedat %&gt;% filter(site_name == \"BigCreekLower\") %&gt;% #select(date, tempc_mean, air_temp_mean) %&gt;% \n  ggplot() + \n  geom_line(aes(x = date, y = air_temp_mean), color = \"darkorange\") + \n  geom_line(aes(x = date, y = tempc_mean), color = \"blue\") +\n  theme_bw() + ylab(\"temperature (deg C)\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html#calculate-breakpoints",
    "href": "Breakpoints.html#calculate-breakpoints",
    "title": "\n3  Breakpoints\n",
    "section": "\n3.2 Calculate breakpoints",
    "text": "3.2 Calculate breakpoints\nPrep data\n\nCode# Calculate temperature index. Add small # to avoid infinity\ndat_index &lt;- dat %&gt;% \n  mutate(index = (tempc_mean - air_temp_mean) / (tempc_mean + 0.00000001),\n         year = year(date)) %&gt;%\n  filter(!is.na(yday))\n\n# Define list of sites\nsiteList &lt;- unique(dat_index$site_name)\n\n# Order by group and date\ndat_index &lt;- dat_index[order(dat_index$site_name, dat_index$year, dat_index$yday),]\n\n# For checking the order of e\ndat_index$count &lt;- 1:length(dat_index$year)\n\n# Define the site/year ID\ndat_index$siteYear &lt;- paste(dat_index$site_name, dat_index$year, sep = '_')\n\n# Maintain order\ndat_index &lt;- dat_index[order(dat_index$count),]\n\ndat_index\n\n# A tibble: 183,960 × 41\n   station_no site_name   site_id basin      subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 2 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 3 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 4 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 5 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 6 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 7 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 8 01171000   Avery Brook AB      West Brook West Br… Mass    42.4 -72.7    699.\n 9 01171000   Avery Brook AB      West Brook West Br… Mass    42.4 -72.7    699.\n10 01171000   Avery Brook AB      West Brook West Br… Mass    42.4 -72.7    699.\n# ℹ 183,950 more rows\n# ℹ 32 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\n\n\nGet the moving average of the temp index for each site and add to data frame\n\nCode# Set frame sizefor moving mean, which is centered by default\nwindow &lt;- 10\n\n# Number of sites\nnSites &lt;- length(siteList)\n\n# Unique site and year combos \nsiteYearCombos &lt;- unique(dat_index[,c('site_name','year')])\n\n# Add columns for moving mean and sd\ndat_index$movingMean &lt;- NA\n\n# Loop through site/year combinations calculating moving means\nfor (i in 1:nrow(siteYearCombos)){\n  # Status\n  # print(c(i,as.character(siteYearCombos$site_name[i]), siteYearCombos$year[i], i/nrow(siteYearCombos)))\n  # Index current site/year\n  currSite &lt;- which(dat_index$site_name == as.character(siteYearCombos$site_name[i]) & dat_index$year == siteYearCombos$year[i] )\n  # Only calculate for sites with enough data\n  if(length(currSite) &gt;= window){currMean &lt;-  rollapply(dat_index$index[currSite], width = window, fill = NA, mean)} else(currMean &lt;- NA)\n  # Add to main dataframe\n  dat_index$movingMean[currSite] &lt;- currMean\n}\n\n# Maintain order\ndat_index &lt;- dat_index[order(dat_index$count),]\n\nwrite_csv(dat_index, \"data/EcoDrought_FlowTempData_DailyWeekly_clean.csv\")\n\n\nCreate the breaks data frame\n\nCode# Define breakpoint time period and range for tempIndex\nbeginningDayForCI &lt;- 125\nendingDayForCI &lt;- 275\nloCI &lt;- 0.001\nhiCI &lt;- 0.999\n\nfor ( i in 1:nrow(siteYearCombos)){\n  # Print status\n  #print(i)\n  # Index sites, years, and HUCs\n  tempBreaks &lt;- data.frame( year  = as.numeric  (siteYearCombos$year[i]),\n                            site_name  = as.character(siteYearCombos$site_name[i]),\n                           # HUC12 = as.character(unique(e$HUC12[which(e$site == siteYearCombos$site[i])])),\n                            #HUC8  = as.character(unique(e$HUC8 [which(e$site == siteYearCombos$site[i])])),\n                            #HUC4  = as.character(unique(e$HUC4 [which(e$site == siteYearCombos$site[i])])),\n                            quantileLo = NA,\n                            quantileHi = NA)\n  \n  # Calculate the tempindex quantiles\n  tmp &lt;- dat_index[dat_index$site_name == siteYearCombos$site_name[i] & dat_index$year %in% siteYearCombos$year[i] & dat_index$yday %in% beginningDayForCI:endingDayForCI, 'index']\n  if (any(!is.na(tmp))){\n    TIQ &lt;- quantile(tmp, probs = c(loCI,0.5,hiCI), na.rm = TRUE)\n    \n    # High and low quantiles\n    tempBreaks$quantileLo &lt;- TIQ[1]\n    tempBreaks$quantileHi &lt;- TIQ[3]\n  }\n  \n  # Add current site to \"breaks\"\n  if ( i == 1 ) { breaks &lt;- tempBreaks } else( breaks &lt;- rbind(breaks, tempBreaks))\n  \n} \n\n# Add columns used later\nbreaks$springBPComplete &lt;- FALSE\nbreaks$fallBPComplete &lt;- FALSE\nbreaks$springOrFallBPComplete &lt;- FALSE\nbreaks$springBP &lt;- NA\nbreaks$fallBP   &lt;- NA\n\nhead(breaks)\n\n  year     site_name quantileLo quantileHi springBPComplete fallBPComplete\n1 2020   Avery Brook -0.4928280  0.4245787            FALSE          FALSE\n2 2021   Avery Brook -0.4853836  0.2876319            FALSE          FALSE\n3 2022   Avery Brook -0.4425745  0.1521084            FALSE          FALSE\n4 2023   Avery Brook -0.4431010  0.2761850            FALSE          FALSE\n5 2024   Avery Brook -0.4147228  0.0801055            FALSE          FALSE\n6 2017 BigCreekLower -0.4135217  0.7688442            FALSE          FALSE\n  springOrFallBPComplete springBP fallBP\n1                  FALSE       NA     NA\n2                  FALSE       NA     NA\n3                  FALSE       NA     NA\n4                  FALSE       NA     NA\n5                  FALSE       NA     NA\n6                  FALSE       NA     NA\n\n\nUse runs analysis of the movingMean to define spring and fall breakpoints:\n\nCode# Set range (dOY) and count for assigning spring BP\nminCompleteDOYBP1 &lt;- 15\nmaxCompleteDOYBP1 &lt;- 175\nnumForCompleteBP1 &lt;- round( ( maxCompleteDOYBP1-minCompleteDOYBP1 ) * 0.9 )\n\n# Set range (dOY) and count for assigning fall BP\nminCompleteDOYBP3 &lt;- 225\nmaxCompleteDOYBP3 &lt;- 350\nnumForCompleteBP3 &lt;- round( ( maxCompleteDOYBP3-minCompleteDOYBP3 ) * 0.9 )\n\n# Number of days in a row that need to be within the CIs to get assigned synchronised (referred to as numForward range)\nnumForwardSpring &lt;- 10\nnumForwardFall   &lt;- 16\n\n# Loop through all sites\nfor (j in 1:nSites){\n  \n  #library(plyr)\n  \n  # Index current site\n  # ------------------\n  e1 &lt;- dat_index[dat_index$site_name == siteList[j],]\n\n  # Index spring range\n  # ------------------\n    e3Spring &lt;- e1[ e1$yday &gt;= minCompleteDOYBP1 & e1$yday &lt;= maxCompleteDOYBP1, ]\n    \n  # Empty out from previous run\n    completeYearsSpring &lt;- NULL \n  \n  # If statement to avoid error if e3Spring is empty\n  if ( !plyr::empty( e3Spring ) ) {  \n    \n    # Determine which years have complete records in spring\n      completeSpring &lt;- as.data.frame( table( e3Spring$year,is.na( e3Spring$tempc_mean ) ) )\n      incompleteYearsSpring &lt;- as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq &lt;  numForCompleteBP1]))\n      completeYearsSpring &lt;-   as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq &gt;= numForCompleteBP1]))\n  }\n  \n  # Index fall range\n  # ----------------\n    e3Fall &lt;- e1[ e1$yday &gt;= minCompleteDOYBP3 & e1$yday &lt;= maxCompleteDOYBP3, ]\n  \n  # Empty out from previous run \n  completeYearsFall &lt;- NULL\n    \n  # If statement to avoid error if e3Fall is empty\n    if ( !plyr::empty( e3Fall ) ) {\n    \n    # Determine which years have complete records in fall\n      completeFall &lt;- as.data.frame( table( e3Fall$year,is.na( e3Fall$tempc_mean ) ) )\n      incompleteYearsFall &lt;- as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq &lt;  numForCompleteBP3]))\n      completeYearsFall &lt;-   as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq &gt;= numForCompleteBP3]))\n    } \n  \n  # Years with either a complete spring or complete fall record\n    completeYearsSpringOrFall &lt;- unique(c(completeYearsSpring,completeYearsFall))\n    \n  # Loop through the years with at least one complete season\n    for (year in completeYearsSpringOrFall){ \n\n    # Print status\n    #print(c('BP 1 and 3',j,as.character(siteList[j]),year))\n    \n    # New column for selecting years with at least one complete season\n      breaks$springOrFallBPComplete[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- TRUE\n     \n    # Index the high and low quantiles calculated from the tempIndex\n    lo &lt;- breaks$quantileLo[breaks$year == year & breaks$site_name == siteList[j]] \n    hi &lt;- breaks$quantileHi[breaks$year == year & breaks$site_name == siteList[j]] \n    \n    # Index current year\n    eYear &lt;- e1[e1$year == year, ] \n\n    # Spring Breakpoint Calculation\n    # -----------------------------\n\n    # Create dataframe for calculating number of synchronized days in a row. \n    runsSpring &lt;- data.frame(array(NA,c(1,numForwardSpring)))\n    \n    # Only calculate if it is a complete season\n        if(year %in% completeYearsSpring){\n            \n      # Loop through approximate time forward until breakpoint in ascending water temp\n      for (i in min(eYear$yday):(200)){\n                \n        # From the current day, loop forward through the numForward range to determined which days are in sync\n        for (ii in 2:numForwardSpring ){\n          \n          # A 1 gets assigned if the moving mean of that day is within the CI range or \n          #     if the iteration falls out of the approximated range examined. If the moving\n          #     mean is outside of the range, it gets assigned a zero.\n          if( (i+ii-2) %in% eYear$yday ) {\n                  runsSpring[ i,ii ] &lt;- 1*((eYear$movingMean[ eYear$yday == (i+ii-2) ] &gt;= lo) & (eYear$movingMean[ eYear$yday == (i+ii-2) ] &lt;= hi))\n          } else (runsSpring[ i,ii ] &lt;- 1  )\n            \n                }# end numForward loop\n        \n        # Determine if all of the days in the numForward range are in sync. If all days within numForward\n        #   are in sync (assigned a 1), the product will be a 1, otherwise it is NA.\n                runsSpring[ i,1 ] &lt;- prod( runsSpring[ i, 2:numForwardSpring ] )\n        \n            }# End approximated seasonal loop\n      \n      # The first day where all of the days ahead of it are in sync (in the numForward range) will be the minimum day with a 1.\n      #   This day gets assigned the spring breakpoint\n            breaks$springBP[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- min(which(runsSpring[,1] == 1))\n            \n      # Fill in the complete springBP column\n      breaks$springBPComplete[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- TRUE\n        } #completeYearsSpring if statement\n    \n    \n    # Fall Breakpoint Calculation\n    # ---------------------------\n    \n    # Create dataframe for calculating number of days in a row within range\n    runsFall   &lt;- data.frame(array(NA,c(1,numForwardFall)))\n    \n    # Only calculate if it is a complete season\n      if(year %in% completeYearsFall){\n\n      # Determine the point to stop to keep from going past lower limit if dOY\n      stopLoop &lt;- max( c( minCompleteDOYBP3,min(eYear$yday)+numForwardFall + 1 ) )  \n            \n      # Loop through the approximate time backward until descending water temp\n      for (i in  max(eYear$yday):stopLoop){\n          \n        # From the current day, loop backward through the numForward range to determined which days are in sync\n                for (ii in 2:numForwardFall ){\n          \n          # A 1 gets assigned if the moving mean of that day is within the CI range or \n          #     if the iteration falls out of the approximated range examined. If the moving\n          #     mean is outside of the range, it gets assigned a zero.\n                  if( (i-ii+2) %in% eYear$yday ) { \n                      runsFall[ i,ii ] &lt;- 1*((eYear$movingMean[ eYear$yday == (i-ii+2) ] &gt;= lo) & (eYear$movingMean[ eYear$yday == (i-ii+2) ] &lt;= hi))\n                  } else(runsFall[ i,ii ] &lt;- 1 )\n          \n                }# end numForward loop\n        \n        # Determine if all of the days in the numForward range are in sync. If all days within numForward\n        #   are in sync (assigned a 1), the product will be a 1, otherwise it is NA.\n        runsFall[ i,1 ] &lt;- prod( runsFall[ i, 2:numForwardFall ] )\n            \n      }# End approximated seasonal loop\n      \n      # The last day where all of the days ahead of it are in sync (in the numForward range) will be the minimum day with a 1.\n      #   This day gets assigned the fall breakpoint\n            breaks$fallBP[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- max(which(runsFall[,1] == 1))\n            \n      # Fill in the complete fallBP column\n      breaks$fallBPComplete[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- TRUE\n\n        }   #completeYearsFall if statement\n    \n    } #completeYearsSpringOrFall loop\n  \n} #site loop\n\nhead(breaks)\n\n  year     site_name quantileLo quantileHi springBPComplete fallBPComplete\n1 2020   Avery Brook -0.4928280  0.4245787             TRUE           TRUE\n2 2021   Avery Brook -0.4853836  0.2876319             TRUE           TRUE\n3 2022   Avery Brook -0.4425745  0.1521084             TRUE           TRUE\n4 2023   Avery Brook -0.4431010  0.2761850             TRUE          FALSE\n5 2024   Avery Brook -0.4147228  0.0801055             TRUE           TRUE\n6 2017 BigCreekLower -0.4135217  0.7688442            FALSE          FALSE\n  springOrFallBPComplete springBP fallBP\n1                   TRUE       66    300\n2                   TRUE       93    304\n3                   TRUE       94    313\n4                   TRUE       79     NA\n5                   TRUE       97    282\n6                  FALSE       NA     NA\n\n\nFor sites that did not have enough data to calculate a breakpoint, use the mean breakpoint at the smallest scale that a mean exists (site or basin).\n\nCode# Calculate mean BPs across different scales\nmeanBPSite  &lt;- plyr::ddply(breaks, \"site_name\", summarise, meanSpringBPSite = mean(springBP, na.rm = T), meanFallBPSite = mean(fallBP, na.rm = T) )\nmeanBPBasin &lt;- plyr::ddply(breaks %&gt;% left_join(siteinfo %&gt;% select(site_name, basin)), \"basin\", summarise, meanSpringBPBasin = mean(springBP,na.rm=T), meanFallBPBasin = mean(fallBP,na.rm=T) )\n#meanBPHUC8  &lt;- ddply( breaks, .(HUC8) , summarise, meanSpringBPHUC8  = mean(springBP,na.rm=T), meanFallBPHUC8  = mean(fallBP,na.rm=T) )\n#meanBPHUC4  &lt;- ddply( breaks, .(HUC4) , summarise, meanSpringBPHUC4  = mean(springBP,na.rm=T), meanFallBPHUC4  = mean(fallBP,na.rm=T) )\n\n# Merge in mean BPs to \"breaks\"\nbreaks &lt;- merge( x = breaks, y = meanBPSite , by = 'site_name' , all.x = T, all.y = F, sort = F)\nbreaks &lt;- merge( x = breaks %&gt;% left_join(siteinfo %&gt;% select(site_name, basin)), y = meanBPBasin, by = 'basin', all.x = T, all.y = F, sort = F)\n#breaks &lt;- merge( x = breaks, y = meanBPHUC8 , by = 'HUC8' , all.x = T, all.y = F, sort = F)\n#breaks &lt;- merge( x = breaks, y = meanBPHUC4 , by = 'HUC4' , all.x = T, all.y = F, sort = F)\n\n# Add columns for final breakpoints\nbreaks$finalSpringBP  &lt;- NA\nbreaks$sourceSpringBP &lt;- NA\nbreaks$finalFallBP    &lt;- NA\nbreaks$sourceFallBP   &lt;- NA\n\n\n# Calculated BPs\n# --------------\n# Spring\nnewSpringBP &lt;- which(is.na(breaks$finalSpringBP) & !is.na(breaks$springBP) )\nbreaks$finalSpringBP [ newSpringBP ] &lt;- breaks$springBP[ newSpringBP ]\nbreaks$sourceSpringBP[ newSpringBP ] &lt;- 'directly calculated'\n\n#Fall\nnewFallBP &lt;- which(is.na(breaks$finalFallBP) & !is.na(breaks$fallBP) )\nbreaks$finalFallBP [ newFallBP ] &lt;- breaks$fallBP[ newFallBP ]\nbreaks$sourceFallBP[ newFallBP ] &lt;- 'directly calculated'\n\n\n# Site averaged BPs\n# -----------------\n# Spring\nsiteBP &lt;- which(is.na(breaks$finalSpringBP) & !is.na(breaks$meanSpringBPSite) )\nbreaks$finalSpringBP [ siteBP ] &lt;- breaks$meanSpringBPSite[ siteBP ]\nbreaks$sourceSpringBP[ siteBP ] &lt;- 'site mean'\n\n# Fall\nsiteBP &lt;- which(is.na(breaks$finalFallBP) & !is.na(breaks$meanFallBPSite) )\nbreaks$finalFallBP [ siteBP ] &lt;- breaks$meanFallBPSite[ siteBP ]\nbreaks$sourceFallBP[ siteBP ] &lt;- 'site mean'\n\n\n# Basin averaged BPs\n# ------------------\n# Spring\nbasinBP &lt;- which(is.na(breaks$finalSpringBP) & !is.na(breaks$meanSpringBPBasin) )\nbreaks$finalSpringBP [ basinBP ] &lt;- breaks$meanSpringBPBasin[ basinBP ]\nbreaks$sourceSpringBP[ basinBP ] &lt;- 'basin mean'\n\n# Fall\nbasinBP &lt;- which(is.na(breaks$finalFallBP) & !is.na(breaks$meanFallBPBasin) )\nbreaks$finalFallBP [ basinBP ] &lt;- breaks$meanFallBPBasin[ basinBP ]\nbreaks$sourceFallBP[ basinBP ] &lt;- 'basin mean'\n\n\nView final breakpoint data\n\nCodedatatable(breaks)\n\n\n\n\n\nWrite to file\n\nCode# Index the columns to save\nspringFallBPs &lt;- breaks[,c('basin', 'site_name', 'year', 'finalSpringBP', 'sourceSpringBP', 'finalFallBP', 'sourceFallBP','quantileLo','quantileHi')]\n\n# fix erroneous Rock Creek, 2022 spring breakpoint\nspringFallBPs &lt;- springFallBPs %&gt;% mutate(finalSpringBP = ifelse(site_name == \"Rock Creek\", 111, finalSpringBP),\n                                          sourceSpringBP = ifelse(site_name == \"Rock Creek\", \"basin mean\", sourceSpringBP))\n\n# Save the output\nwrite_csv(springFallBPs, \"data/breakpoints.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html#plot-breakpoints",
    "href": "Breakpoints.html#plot-breakpoints",
    "title": "\n3  Breakpoints\n",
    "section": "\n3.3 Plot breakpoints",
    "text": "3.3 Plot breakpoints\nShow examples of the breakpoint calculations for one stream in each basin. Compare to Figure 3 in Letcher et al. (2016). Note, this doesn’t really work in the Donner-Blitzen, where temperature data during winter/the shoulder seasons is entirely unavailable…nothing to inform breakpoint estimatation outside of the middle 150 days of year.\nCreate plotting function\n\nCodeindexfun &lt;- function(site) {\n# thermographs\np1 &lt;- ggplot() +\n  geom_line(data = dat_index %&gt;% filter(site_name == site), aes(x = yday, y = tempc_mean)) +\n  geom_line(data = dat_index %&gt;% filter(site_name == site), aes(x = yday, y = air_temp_mean), color = \"red\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalFallBP), color = \"blue\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalSpringBP), color = \"blue\") +\n  facet_wrap(~year, nrow = 1) +\n  theme_bw() + theme(panel.grid = element_blank()) + \n  ylab(\"Temperature (deg. C)\") \n# temperature indices\np2 &lt;- ggplot() +\n  geom_point(data = dat_index %&gt;% filter(site_name == site), aes(x = yday, y = index)) +\n  geom_vline(xintercept = c(125,275), linetype = \"dashed\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalFallBP), color = \"blue\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalSpringBP), color = \"blue\") +\n  geom_hline(data = breaks %&gt;% filter(site_name == site), aes(yintercept = quantileLo), color = \"red\") +\n  geom_hline(data = breaks %&gt;% filter(site_name == site), aes(yintercept = quantileHi), color = \"red\") +\n  facet_wrap(~year, nrow = 1) +\n  theme_bw() + theme(panel.grid = element_blank()) + \n  ylim(-20,20) +\n  ylab(\"Temperature index\") \n# arrange figures\nreturn(ggarrange(p1, p2, ncol = 1))\n}\n\n\n\n\nAvery Brook, West Brook\nPaine Run 01\nStaunton River 02\nMcGee Creek Trib, Flathead\nDugout Creek, Yellowstone\nLeidy Creek, Snake\nLittle Blitzen River, Donner-Blitzen\n\n\n\n\nCodeindexfun(\"Avery Brook\")\n\n\n\n\n\n\n\n\n\n\nCodeindexfun(\"Paine Run 01\")\n\n\n\n\n\n\n\n\n\n\nCodeindexfun(\"Staunton River 02\")\n\n\n\n\n\n\n\n\n\n\nCodeindexfun(\"McGeeCreekTrib\")\n\n\n\n\n\n\n\n\n\n\nCodeindexfun(\"Dugout Creek NWIS\")\n\n\n\n\n\n\n\n\n\n\nCodeindexfun(\"Leidy Creek Mouth NWIS\")\n\n\n\n\n\n\n\n\n\n\nCodeindexfun(\"Little Blizten River NWIS\")\n\n\n\n\n\n\n\n\n\n\nPlot trends in spring and fall breakpoints (only those we directly calculated). We have a ~limited number of years and so this isn’t all that informative\n\nCodep1 &lt;- springFallBPs %&gt;%\n  filter(sourceSpringBP == \"directly calculated\") %&gt;%\n  ggplot(aes(x = year, y = finalSpringBP, color = basin)) +\n  geom_point(aes(color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylab(\"Spring breakpoint (day of year)\") +\n  theme_bw() + theme(panel.grid = element_blank())\n  \np2 &lt;- springFallBPs %&gt;%\n  filter(sourceSpringBP == \"directly calculated\") %&gt;%\n  ggplot(aes(x = year, y = finalFallBP, color = basin)) +\n  geom_point(aes(color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylab(\"Fall breakpoint (day of year)\") +\n  theme_bw() + theme(panel.grid = element_blank())\n\nggpubr::ggarrange(p1, p2, nrow = 1, common.legend = TRUE)\n\n\n\n\n\n\n\nTrends in length of synchronized period\n\nCodespringFallBPs %&gt;%\n  filter(sourceSpringBP == \"directly calculated\") %&gt;%\n  mutate(SynchLen = finalFallBP - finalSpringBP) %&gt;%\n  ggplot(aes(x = year, y = SynchLen, color = basin)) +\n  geom_point(aes(color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylab(\"Length of synchronized period (days)\") +\n  theme_bw() + theme(panel.grid = element_blank())",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "FormatData.html",
    "href": "FormatData.html",
    "title": "\n4  Format Data\n",
    "section": "",
    "text": "4.1 Base data\nTemperature and flow data\nCodedat &lt;- read_csv(\"data/EcoDrought_FlowTempData_DailyWeekly_clean.csv\")\ndat\n\n# A tibble: 183,960 × 42\n   station_no site_name   site_id basin      subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 2 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 3 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 4 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 5 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 6 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 7 &lt;NA&gt;       Avery Brook &lt;NA&gt;    &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;    NA    NA       NA \n 8 01171000   Avery Brook AB      West Brook West Br… Mass    42.4 -72.7    699.\n 9 01171000   Avery Brook AB      West Brook West Br… Mass    42.4 -72.7    699.\n10 01171000   Avery Brook AB      West Brook West Br… Mass    42.4 -72.7    699.\n# ℹ 183,950 more rows\n# ℹ 33 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\nFix basins and trim to focal variables. Drop Piney River (no flow data)\nCodemysitebasins &lt;- dat %&gt;% \n  group_by(site_name) %&gt;% \n  summarize(basin = unique(basin),\n            lat = unique(lat), \n            long = unique(long), \n            elev_ft = unique(elev_ft),\n            area_sqkm = unique(area_sqkm)) %&gt;% \n  filter(!is.na(basin), !is.na(lat), !is.na(long), !is.na(elev_ft), !is.na(area_sqkm)) %&gt;% \n  mutate(basin = recode(basin, \"Shields River\" = \"Yellowstone\"))\n\ndat &lt;- dat %&gt;% \n  select(-c(basin, lat, long, elev_ft, area_sqkm)) %&gt;% \n  left_join(mysitebasins) %&gt;% \n  select(site_name, basin, lat, long, elev_ft, area_sqkm, date, yday, year, siteYear, \n         tempc_mean, tempc_min, tempc_max, flow_mean, Yield_mm, air_temp_mean, precip_mmday, swe_kgm2, daylength_sec, shortrad_wm2) %&gt;%\n  filter(basin != \"Piney River\")\n\ndat\n\n# A tibble: 179,945 × 20\n   site_name basin   lat  long elev_ft area_sqkm date        yday  year siteYear\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   \n 1 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-01     1  2020 Avery B…\n 2 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-02     2  2020 Avery B…\n 3 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-03     3  2020 Avery B…\n 4 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-04     4  2020 Avery B…\n 5 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-05     5  2020 Avery B…\n 6 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-06     6  2020 Avery B…\n 7 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-07     7  2020 Avery B…\n 8 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-08     8  2020 Avery B…\n 9 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-09     9  2020 Avery B…\n10 Avery Br… West…  42.4 -72.7    699.      7.34 2020-01-10    10  2020 Avery B…\n# ℹ 179,935 more rows\n# ℹ 10 more variables: tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;, tempc_max &lt;dbl&gt;,\n#   flow_mean &lt;dbl&gt;, Yield_mm &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;,\n#   swe_kgm2 &lt;dbl&gt;, daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;\nCalculate lagged air temperature variables\nCode# ensure proper ordering\ndat &lt;- dat[order(dat$site_name, dat$year, dat$yday),]\n\n# calculate lagged air temp\ndat &lt;- dat %&gt;%\n  group_by(site_name) %&gt;%\n  mutate(air_temp_mean_lag1 = lag(air_temp_mean, 1),\n         air_temp_mean_lag2 = lag(air_temp_mean, 2)) %&gt;%\n  ungroup()\nBreakpoints\nCodespringFallBPs &lt;- read_csv(\"data/breakpoints.csv\")\nspringFallBPs\n\n# A tibble: 504 × 9\n   basin   site_name  year finalSpringBP sourceSpringBP finalFallBP sourceFallBP\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;       \n 1 West B… Avery Br…  2020            66 directly calc…        300  directly ca…\n 2 West B… Avery Br…  2021            93 directly calc…        304  directly ca…\n 3 West B… Avery Br…  2022            94 directly calc…        313  directly ca…\n 4 West B… Avery Br…  2023            79 directly calc…        300. site mean   \n 5 West B… Avery Br…  2024            97 directly calc…        282  directly ca…\n 6 West B… Sanderso…  2021            80 directly calc…        303  directly ca…\n 7 West B… Sanderso…  2022            94 directly calc…        313  directly ca…\n 8 West B… Sanderso…  2023            78 directly calc…        302  directly ca…\n 9 West B… Sanderso…  2024            98 directly calc…        281  directly ca…\n10 West B… West Bro…  2020            65 directly calc…        302  directly ca…\n# ℹ 494 more rows\n# ℹ 2 more variables: quantileLo &lt;dbl&gt;, quantileHi &lt;dbl&gt;\nJoin temp/flow data with breakpoints and filter to days within synchronized period.\nCodedat_bp &lt;- dat %&gt;% \n  left_join(springFallBPs) %&gt;%\n  filter(yday &gt;= finalSpringBP & yday &lt;= finalFallBP)\ndat_bp\n\n# A tibble: 81,424 × 28\n   site_name basin   lat  long elev_ft area_sqkm date        yday  year siteYear\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   \n 1 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-06    66  2020 Avery B…\n 2 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-07    67  2020 Avery B…\n 3 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-08    68  2020 Avery B…\n 4 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-09    69  2020 Avery B…\n 5 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-10    70  2020 Avery B…\n 6 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-11    71  2020 Avery B…\n 7 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-12    72  2020 Avery B…\n 8 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-13    73  2020 Avery B…\n 9 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-14    74  2020 Avery B…\n10 Avery Br… West…  42.4 -72.7    699.      7.34 2020-03-15    75  2020 Avery B…\n# ℹ 81,414 more rows\n# ℹ 18 more variables: tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;, tempc_max &lt;dbl&gt;,\n#   flow_mean &lt;dbl&gt;, Yield_mm &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;,\n#   swe_kgm2 &lt;dbl&gt;, daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;,\n#   air_temp_mean_lag1 &lt;dbl&gt;, air_temp_mean_lag2 &lt;dbl&gt;, finalSpringBP &lt;dbl&gt;,\n#   sourceSpringBP &lt;chr&gt;, finalFallBP &lt;dbl&gt;, sourceFallBP &lt;chr&gt;,\n#   quantileLo &lt;dbl&gt;, quantileHi &lt;dbl&gt;\nPlot temp data with LOESS to show seasonal hysteresis\nCodedat_bp %&gt;% \n  ggplot(aes(x = yday, y = tempc_mean)) + \n  geom_point(size = 0.1) +\n  facet_wrap(~basin) +\n  geom_smooth(color = \"red\", se = FALSE) +\n  theme_bw() #+ theme(panel.grid = element_blank())\nCreate dummy site and basin varibles (numeric for JAGS), and define “rowNum” variable to allow for identifying first rows and evaluation rows\nCode# arrange\ndat_bp &lt;- dat_bp %&gt;% arrange(basin, site_name, year, yday)\n\n# create tibbles of site and basin numeric codes\nsitecodes &lt;- tibble(site_name = unique(dat_bp$site_name), site_code = 1:length(unique(dat_bp$site_name)))\nbasincodes &lt;- tibble(basin = unique(dat_bp$basin), basin_code = 1:length(unique(dat_bp$basin)))\n\n# join to data\ndat_bp &lt;- dat_bp %&gt;%\n  left_join(sitecodes) %&gt;%\n  left_join(basincodes) %&gt;%\n  mutate(rowNum = 1:nrow(.))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "FormatData.html#landscape-covariates",
    "href": "FormatData.html#landscape-covariates",
    "title": "\n4  Format Data\n",
    "section": "\n4.2 Landscape covariates",
    "text": "4.2 Landscape covariates\nTo do – derive additional landscape covariates presumed to affect stream temperature, or rather, mediate the relationship between stream and air temperature/flow (groundwater influence/pasta?, basin slope, lake area, percept forest cover, etc.)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "FormatData.html#check-correlations",
    "href": "FormatData.html#check-correlations",
    "title": "\n4  Format Data\n",
    "section": "\n4.3 Check correlations",
    "text": "4.3 Check correlations",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "FormatData.html#write-to-file",
    "href": "FormatData.html#write-to-file",
    "title": "\n4  Format Data\n",
    "section": "\n4.4 Write to file",
    "text": "4.4 Write to file\nWrite formatted data to file\n\nCodewrite_csv(dat_bp, \"data/EcoDrought_FlowTempData_formatted.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  }
]