[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stream Temperature by Flow",
    "section": "",
    "text": "1 Introduction\nThis book provides a visual story of efforts to quantify the influence of streamflow on water temperature in small, headwater streams. All data was collected as part of the USGS EcoDrought project, funded by the USGS Ecosystems Mission Area, USGS Water Mission Area, and the BLM. Our approach generally follows that of Letcher et al. (2016).\nAccess the GitHub repo here: https://github.com/j-baldock/TempFlowSensitivity.git\nThis information is preliminary or provisional and is subject to revision. It is being provided to meet the need for timely best science. The information has not received final approval by the U.S. Geological Survey (USGS) and is provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the information.\nProject team: Jeff Baldock, Jenn Fair, Ben Letcher, Robert Al-Chokhachy, Jason Dunham, Clint Muhlfeld\n\n\nSession Information\n\n\n\n\n\nCode\nsessionInfo()\n\n\nR version 4.5.1 (2025-06-13 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.5.1    fastmap_1.2.0     cli_3.6.5        \n [5] tools_4.5.1       htmltools_0.5.8.1 rstudioapi_0.17.1 rmarkdown_2.29   \n [9] knitr_1.50        jsonlite_2.0.0    xfun_0.53         digest_0.6.37    \n[13] rlang_1.1.6       evaluate_1.0.5",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "DataViz.html",
    "href": "DataViz.html",
    "title": "2  Visualize Data",
    "section": "",
    "text": "2.1 Site information\nPurpose: view EcoDrought stream temperature and flow data and download Daymet climate data (modeled air temperature).\nCode\nsiteinfo &lt;- read_csv(\"data/EcoDrought_SiteInformation.csv\")\ndatatable(siteinfo)\n\n\n\n\n\n\nCode\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualize Data</span>"
    ]
  },
  {
    "objectID": "DataViz.html#flow-and-temp-data",
    "href": "DataViz.html#flow-and-temp-data",
    "title": "2  Visualize Data",
    "section": "2.2 Flow and temp data",
    "text": "2.2 Flow and temp data\nLoad data\n\n\nCode\ndat &lt;- read_csv(\"data/EcoDrought_FlowTempData_DailyWeekly.csv\")\ndat\n\n\n# A tibble: 202,014 × 31\n   station_no site_name      site_id basin   subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 2 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 3 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 4 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 5 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 6 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 7 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 8 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 9 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n10 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n# ℹ 202,004 more rows\n# ℹ 22 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\n\n\nUnique basins\n\n\nCode\nunique(dat$basin)\n\n\n[1] \"Flathead\"       \"West Brook\"     \"Donner Blitzen\" \"Paine Run\"     \n[5] \"Piney River\"    \"Staunton River\" \"Shields River\"  \"Snake River\"   \n\n\n\n2.2.1 View daily temp\n\nWest BrookPaine RunStaunton RiverFlathead RiverYellowstone RiverSnake RiverDonner und Blitzen River\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.2 View daily flow\n\nWest BrookPaine RunStaunton RiverFlathead RiverYellowstone RiverSnake RiverDonner und Blitzen River",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualize Data</span>"
    ]
  },
  {
    "objectID": "DataViz.html#daymet-data",
    "href": "DataViz.html#daymet-data",
    "title": "2  Visualize Data",
    "section": "2.3 Daymet data",
    "text": "2.3 Daymet data\nTrim siteinfo to sites with temp/flow data\n\n\nCode\nsiteinfo_sub &lt;- siteinfo %&gt;% filter(site_name %in% unique(dat$site_name))\n\n\nDownload Daymet daily air temperature data for each site (point locations)\n\n\nCode\nclimlist &lt;- vector(\"list\", length = dim(siteinfo_sub)[1])\nfor (i in 1:dim(siteinfo_sub)[1]) {\n  clim &lt;- download_daymet(site = siteinfo_sub$site_name[i], lat = siteinfo_sub$lat[i], lon = siteinfo_sub$long[i], start = 2010, end = 2024, internal = T)\n  climlist[[i]] &lt;- tibble(clim$data) %&gt;% \n    mutate(air_temp_mean = (tmax..deg.c. + tmin..deg.c.)/2, \n           date = as.Date(paste(year, yday, sep = \"-\"), \"%Y-%j\"),\n           site_name = siteinfo_sub$site_name[i]) %&gt;%\n    select(12,2,11,10,4,6,3,5) %&gt;% rename(precip_mmday = 5, swe_kgm2 = 6, daylength_sec = 7, shortrad_wm2 = 8)\n  print(i)\n}\nclimdf &lt;- do.call(rbind, climlist)\nwrite_csv(climdf, \"data/Daymet_daily.csv\")\n\n\nRe-load Daymet climate data\n\n\nCode\nclimdf &lt;- read_csv(\"data/Daymet_daily.csv\")\n\n\nPlot example Daymet time series data (2020-2025, Avery Brook, MA)\n\n\nCode\nggarrange(climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = air_temp_mean)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = precip_mmday)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = swe_kgm2)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = daylength_sec)) + geom_line(),\n          climdf %&gt;% filter(site_name == \"Avery Brook\", year(date) &gt;= 2020) %&gt;% ggplot(aes(x = date, y = shortrad_wm2)) + geom_line(),\n          ncol = 1)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualize Data</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html",
    "href": "Breakpoints.html",
    "title": "3  Breakpoints",
    "section": "",
    "text": "3.1 Data\nPurpose: Define periods of air-water temperature synchronization, i.e., calculate spring/fall breakpoints. Code adapted from Letcher et al. (2016)\nSite information\nCode\nsiteinfo &lt;- read_csv(\"data/EcoDrought_SiteInformation.csv\")\ndatatable(siteinfo)\n\n\n\n\n\n\nCode\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nmapview(siteinfo_sp, zcol = \"designation\")\nLoad flow and temp data\nCode\ndat &lt;- read_csv(\"data/EcoDrought_FlowTempData_DailyWeekly.csv\")\ndat\n\n\n# A tibble: 202,014 × 31\n   station_no site_name      site_id basin   subbasin region   lat  long elev_ft\n   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 2 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 3 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 4 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 5 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 6 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 7 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 8 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n 9 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n10 12355347   Big Creek NWIS BIG     Flathe… Big Cre… Flat    48.6 -114.   3528.\n# ℹ 202,004 more rows\n# ℹ 22 more variables: area_sqmi &lt;dbl&gt;, designation &lt;chr&gt;, date &lt;date&gt;,\n#   DischargeReliability &lt;dbl&gt;, TempReliability &lt;dbl&gt;, flow_mean &lt;dbl&gt;,\n#   flow_min &lt;dbl&gt;, flow_max &lt;dbl&gt;, tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;,\n#   tempc_max &lt;dbl&gt;, flow_mean_filled &lt;dbl&gt;, flow_mean_cms &lt;dbl&gt;,\n#   flow_mean_filled_cms &lt;dbl&gt;, area_sqkm &lt;dbl&gt;, Yield_mm &lt;dbl&gt;,\n#   Yield_filled_mm &lt;dbl&gt;, flow_mean_7 &lt;dbl&gt;, flow_mean_filled_7 &lt;dbl&gt;, …\nAdjust/filter sites\nCode\ndat &lt;- dat %&gt;% \n  # combine sites co-located in space, but not in time (same location but different names depending on year)\n  mutate(site_name = dplyr::recode(site_name, \n                                   \"Leidy Creek Mouth NWIS\" = \"Leidy Creek Mouth\", \n                                   \"SF Spread Creek Lower NWIS\" = \"SF Spread Creek Lower\", \n                                   \"Dugout Creek NWIS\" = \"Dugout Creek\", \n                                   \"Shields River ab Smith NWIS\" = \"Shields River Valley Ranch\")) %&gt;%\n  # drop sites co-located in space and in time (entirely redundant)\n  filter(!site_name %in% c(\"Avery Brook NWIS\", \"West Brook 0\", \"BigCreekMiddle\")) %&gt;%\n  # drop Piney River (no within basin replication)\n  filter(basin != \"Piney River\") %&gt;%\n  # drop Wounded Buck (no temperature data)\n  filter(basin != \"Piney River\") %&gt;%\n  # drop some big Gs\n  filter(!site_name %in% c(\"South River Conway NWIS\", \n                           \"North Fork Flathead River NWIS\",        \n                           \"Shields River nr Livingston NWIS\"   \n                           #\"Donner Blitzen River nr Frenchglen NWIS\",    \n                           #\"Pacific Creek at Moran NWIS\", \n                           )) %&gt;%                                             \n  group_by(site_name, basin, date) %&gt;%\n  summarize(flow_mean = mean(flow_mean),\n            tempc_mean = mean(tempc_mean),\n            tempc_min = mean(tempc_min),\n            tempc_max = mean(tempc_max),\n            Yield_mm = mean(Yield_mm)) %&gt;%\n  ungroup() %&gt;%\n  left_join(siteinfo %&gt;% select(site_name, lat, long, area_sqmi, elev_ft))\nCut out all days with missing temp records\nCode\ndat &lt;- dat %&gt;% filter(!is.na(tempc_mean))\ndat\n\n\n# A tibble: 100,229 × 12\n   site_name  basin date       flow_mean tempc_mean tempc_min tempc_max Yield_mm\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Avery Bro… West… 2020-01-08      5.96     0.594      0.111     1.11      1.99\n 2 Avery Bro… West… 2020-01-09      4.81     0.0336     0         0.111     1.61\n 3 Avery Bro… West… 2020-01-10      4.88     0.363      0         0.778     1.63\n 4 Avery Bro… West… 2020-01-11      6.43     1.77       0.778     2.39      2.15\n 5 Avery Bro… West… 2020-01-12     21.2      2.81       2.11      3.78      7.08\n 6 Avery Bro… West… 2020-01-13     14.3      1.92       1.56      2.22      4.78\n 7 Avery Bro… West… 2020-01-14      9.88     2.34       1.89      2.83      3.30\n 8 Avery Bro… West… 2020-01-15      9.68     2.66       2.11      3.06      3.23\n 9 Avery Bro… West… 2020-01-16      9.60     1.82       1.11      2.39      3.20\n10 Avery Bro… West… 2020-01-17      7.92     0.0463    -0.111     1.11      2.64\n# ℹ 100,219 more rows\n# ℹ 4 more variables: lat &lt;dbl&gt;, long &lt;dbl&gt;, area_sqmi &lt;dbl&gt;, elev_ft &lt;dbl&gt;\nFill missing dates using fasstr\nCode\ndat &lt;- fill_missing_dates(dat, dates = date, groups = site_name, pad_ends = TRUE)\ndat\n\n\n# A tibble: 171,661 × 12\n   site_name  basin date       flow_mean tempc_mean tempc_min tempc_max Yield_mm\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Avery Bro… &lt;NA&gt;  2020-01-01     NA       NA         NA        NA        NA   \n 2 Avery Bro… &lt;NA&gt;  2020-01-02     NA       NA         NA        NA        NA   \n 3 Avery Bro… &lt;NA&gt;  2020-01-03     NA       NA         NA        NA        NA   \n 4 Avery Bro… &lt;NA&gt;  2020-01-04     NA       NA         NA        NA        NA   \n 5 Avery Bro… &lt;NA&gt;  2020-01-05     NA       NA         NA        NA        NA   \n 6 Avery Bro… &lt;NA&gt;  2020-01-06     NA       NA         NA        NA        NA   \n 7 Avery Bro… &lt;NA&gt;  2020-01-07     NA       NA         NA        NA        NA   \n 8 Avery Bro… West… 2020-01-08      5.96     0.594      0.111     1.11      1.99\n 9 Avery Bro… West… 2020-01-09      4.81     0.0336     0         0.111     1.61\n10 Avery Bro… West… 2020-01-10      4.88     0.363      0         0.778     1.63\n# ℹ 171,651 more rows\n# ℹ 4 more variables: lat &lt;dbl&gt;, long &lt;dbl&gt;, area_sqmi &lt;dbl&gt;, elev_ft &lt;dbl&gt;\nUnique basins\nCode\nunique(dat$basin)\n\n\n[1] NA               \"West Brook\"     \"Flathead\"       \"Shields River\" \n[5] \"Donner Blitzen\" \"Snake River\"    \"Paine Run\"      \"Staunton River\"\nBind climate data to flow-temp data\nCode\nclimdf &lt;- read_csv(\"data/Daymet_daily.csv\")\ndat &lt;- dat %&gt;% left_join(climdf)\nPlot an example air (orange) and water (blue) temperature time series\nCode\ndat %&gt;% filter(site_name == \"BigCreekLower\") %&gt;% #select(date, tempc_mean, air_temp_mean) %&gt;% \n  ggplot() + \n  geom_line(aes(x = date, y = air_temp_mean), color = \"darkorange\") + \n  geom_line(aes(x = date, y = tempc_mean), color = \"blue\") +\n  theme_bw() + ylab(\"temperature (deg C)\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html#data",
    "href": "Breakpoints.html#data",
    "title": "3  Breakpoints",
    "section": "",
    "text": "Combine co-located sites that do not overlap in time.\nDrop co-located sites that do overlap in time.\nDrop certain big Gs. NOTE: only drop big Gs on very big rivers that are clearly outside of our domain for temp/flow modeling (NF Flathead, Yellowstone, Shields, South River Conway, etc), but retain those on smaller rivers (Pacific Creek, Donner Blitzen)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html#calculate-breakpoints",
    "href": "Breakpoints.html#calculate-breakpoints",
    "title": "3  Breakpoints",
    "section": "3.2 Calculate breakpoints",
    "text": "3.2 Calculate breakpoints\nPrep data\n\n\nCode\n# Calculate temperature index. Add small # to avoid infinity\ndat_index &lt;- dat %&gt;% \n  mutate(index = (tempc_mean - air_temp_mean) / (tempc_mean + 0.00000001),\n         year = year(date)) %&gt;%\n  filter(!is.na(yday))\n\n# Define list of sites\nsiteList &lt;- unique(dat_index$site_name)\n\n# Order by group and date\ndat_index &lt;- dat_index[order(dat_index$site_name, dat_index$year, dat_index$yday),]\n\n# For checking the order of e\ndat_index$count &lt;- 1:length(dat_index$year)\n\n# Define the site/year ID\ndat_index$siteYear &lt;- paste(dat_index$site_name, dat_index$year, sep = '_')\n\n# Maintain order\ndat_index &lt;- dat_index[order(dat_index$count),]\n\ndat_index\n\n\n# A tibble: 167,535 × 22\n   site_name  basin date       flow_mean tempc_mean tempc_min tempc_max Yield_mm\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Avery Bro… &lt;NA&gt;  2020-01-01     NA       NA         NA        NA        NA   \n 2 Avery Bro… &lt;NA&gt;  2020-01-02     NA       NA         NA        NA        NA   \n 3 Avery Bro… &lt;NA&gt;  2020-01-03     NA       NA         NA        NA        NA   \n 4 Avery Bro… &lt;NA&gt;  2020-01-04     NA       NA         NA        NA        NA   \n 5 Avery Bro… &lt;NA&gt;  2020-01-05     NA       NA         NA        NA        NA   \n 6 Avery Bro… &lt;NA&gt;  2020-01-06     NA       NA         NA        NA        NA   \n 7 Avery Bro… &lt;NA&gt;  2020-01-07     NA       NA         NA        NA        NA   \n 8 Avery Bro… West… 2020-01-08      5.96     0.594      0.111     1.11      1.99\n 9 Avery Bro… West… 2020-01-09      4.81     0.0336     0         0.111     1.61\n10 Avery Bro… West… 2020-01-10      4.88     0.363      0         0.778     1.63\n# ℹ 167,525 more rows\n# ℹ 14 more variables: lat &lt;dbl&gt;, long &lt;dbl&gt;, area_sqmi &lt;dbl&gt;, elev_ft &lt;dbl&gt;,\n#   yday &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;, swe_kgm2 &lt;dbl&gt;,\n#   daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;, index &lt;dbl&gt;, year &lt;dbl&gt;,\n#   count &lt;int&gt;, siteYear &lt;chr&gt;\n\n\nGet the moving average of the temp index for each site and add to data frame\n\n\nCode\n# Set frame sizefor moving mean, which is centered by default\nwindow &lt;- 10\n\n# Number of sites\nnSites &lt;- length(siteList)\n\n# Unique site and year combos \nsiteYearCombos &lt;- unique(dat_index[,c('site_name','year')])\n\n# Add columns for moving mean and sd\ndat_index$movingMean &lt;- NA\n\n# Loop through site/year combinations calculating moving means\nfor (i in 1:nrow(siteYearCombos)){\n  # Status\n  # print(c(i,as.character(siteYearCombos$site_name[i]), siteYearCombos$year[i], i/nrow(siteYearCombos)))\n  # Index current site/year\n  currSite &lt;- which(dat_index$site_name == as.character(siteYearCombos$site_name[i]) & dat_index$year == siteYearCombos$year[i] )\n  # Only calculate for sites with enough data\n  if(length(currSite) &gt;= window){currMean &lt;-  rollapply(dat_index$index[currSite], width = window, fill = NA, mean)} else(currMean &lt;- NA)\n  # Add to main dataframe\n  dat_index$movingMean[currSite] &lt;- currMean\n}\n\n# Maintain order\ndat_index &lt;- dat_index[order(dat_index$count),]\n\nwrite_csv(dat_index, \"data/EcoDrought_FlowTempData_DailyWeekly_clean.csv\")\n\n\nCreate the breaks data frame\n\n\nCode\n# Define breakpoint time period and range for tempIndex\nbeginningDayForCI &lt;- 125\nendingDayForCI &lt;- 275\nloCI &lt;- 0.001\nhiCI &lt;- 0.999\n\nfor ( i in 1:nrow(siteYearCombos)){\n  # Print status\n  #print(i)\n  # Index sites, years, and HUCs\n  tempBreaks &lt;- data.frame( year  = as.numeric  (siteYearCombos$year[i]),\n                            site_name  = as.character(siteYearCombos$site_name[i]),\n                           # HUC12 = as.character(unique(e$HUC12[which(e$site == siteYearCombos$site[i])])),\n                            #HUC8  = as.character(unique(e$HUC8 [which(e$site == siteYearCombos$site[i])])),\n                            #HUC4  = as.character(unique(e$HUC4 [which(e$site == siteYearCombos$site[i])])),\n                            quantileLo = NA,\n                            quantileHi = NA)\n  \n  # Calculate the tempindex quantiles\n  tmp &lt;- dat_index[dat_index$site_name == siteYearCombos$site_name[i] & dat_index$year %in% siteYearCombos$year[i] & dat_index$yday %in% beginningDayForCI:endingDayForCI, 'index']\n  if (any(!is.na(tmp))){\n    TIQ &lt;- quantile(tmp, probs = c(loCI,0.5,hiCI), na.rm = TRUE)\n    \n    # High and low quantiles\n    tempBreaks$quantileLo &lt;- TIQ[1]\n    tempBreaks$quantileHi &lt;- TIQ[3]\n  }\n  \n  # Add current site to \"breaks\"\n  if ( i == 1 ) { breaks &lt;- tempBreaks } else( breaks &lt;- rbind(breaks, tempBreaks))\n  \n} \n\n# Add columns used later\nbreaks$springBPComplete &lt;- FALSE\nbreaks$fallBPComplete &lt;- FALSE\nbreaks$springOrFallBPComplete &lt;- FALSE\nbreaks$springBP &lt;- NA\nbreaks$fallBP   &lt;- NA\n\nhead(breaks)\n\n\n  year     site_name quantileLo quantileHi springBPComplete fallBPComplete\n1 2020   Avery Brook -0.4928280  0.4245787            FALSE          FALSE\n2 2021   Avery Brook -0.4853836  0.2876319            FALSE          FALSE\n3 2022   Avery Brook -0.4425745  0.1521084            FALSE          FALSE\n4 2023   Avery Brook -0.4431010  0.2761850            FALSE          FALSE\n5 2024   Avery Brook -0.4147228  0.0801055            FALSE          FALSE\n6 2017 BigCreekLower -0.4135217  0.7688442            FALSE          FALSE\n  springOrFallBPComplete springBP fallBP\n1                  FALSE       NA     NA\n2                  FALSE       NA     NA\n3                  FALSE       NA     NA\n4                  FALSE       NA     NA\n5                  FALSE       NA     NA\n6                  FALSE       NA     NA\n\n\nUse runs analysis of the movingMean to define spring and fall breakpoints:\n\n\nCode\n# Set range (dOY) and count for assigning spring BP\nminCompleteDOYBP1 &lt;- 15\nmaxCompleteDOYBP1 &lt;- 175\nnumForCompleteBP1 &lt;- round( ( maxCompleteDOYBP1-minCompleteDOYBP1 ) * 0.9 )\n\n# Set range (dOY) and count for assigning fall BP\nminCompleteDOYBP3 &lt;- 225\nmaxCompleteDOYBP3 &lt;- 350\nnumForCompleteBP3 &lt;- round( ( maxCompleteDOYBP3-minCompleteDOYBP3 ) * 0.9 )\n\n# Number of days in a row that need to be within the CIs to get assigned synchronised (referred to as numForward range)\nnumForwardSpring &lt;- 10\nnumForwardFall   &lt;- 16\n\n# Loop through all sites\nfor (j in 1:nSites){\n  \n  #library(plyr)\n  \n  # Index current site\n  # ------------------\n  e1 &lt;- dat_index[dat_index$site_name == siteList[j],]\n\n  # Index spring range\n  # ------------------\n    e3Spring &lt;- e1[ e1$yday &gt;= minCompleteDOYBP1 & e1$yday &lt;= maxCompleteDOYBP1, ]\n    \n  # Empty out from previous run\n    completeYearsSpring &lt;- NULL \n  \n  # If statement to avoid error if e3Spring is empty\n  if ( !plyr::empty( e3Spring ) ) {  \n    \n    # Determine which years have complete records in spring\n      completeSpring &lt;- as.data.frame( table( e3Spring$year,is.na( e3Spring$tempc_mean ) ) )\n      incompleteYearsSpring &lt;- as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq &lt;  numForCompleteBP1]))\n      completeYearsSpring &lt;-   as.numeric(as.character(completeSpring$Var1[completeSpring$Var2 == 'FALSE' & completeSpring$Freq &gt;= numForCompleteBP1]))\n  }\n  \n  # Index fall range\n  # ----------------\n    e3Fall &lt;- e1[ e1$yday &gt;= minCompleteDOYBP3 & e1$yday &lt;= maxCompleteDOYBP3, ]\n  \n  # Empty out from previous run \n  completeYearsFall &lt;- NULL\n    \n  # If statement to avoid error if e3Fall is empty\n    if ( !plyr::empty( e3Fall ) ) {\n    \n    # Determine which years have complete records in fall\n      completeFall &lt;- as.data.frame( table( e3Fall$year,is.na( e3Fall$tempc_mean ) ) )\n      incompleteYearsFall &lt;- as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq &lt;  numForCompleteBP3]))\n      completeYearsFall &lt;-   as.numeric(as.character(completeFall$Var1[completeFall$Var2 == 'FALSE' & completeFall$Freq &gt;= numForCompleteBP3]))\n    } \n  \n  # Years with either a complete spring or complete fall record\n    completeYearsSpringOrFall &lt;- unique(c(completeYearsSpring,completeYearsFall))\n    \n  # Loop through the years with at least one complete season\n    for (year in completeYearsSpringOrFall){ \n\n    # Print status\n    #print(c('BP 1 and 3',j,as.character(siteList[j]),year))\n    \n    # New column for selecting years with at least one complete season\n      breaks$springOrFallBPComplete[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- TRUE\n     \n    # Index the high and low quantiles calculated from the tempIndex\n    lo &lt;- breaks$quantileLo[breaks$year == year & breaks$site_name == siteList[j]] \n    hi &lt;- breaks$quantileHi[breaks$year == year & breaks$site_name == siteList[j]] \n    \n    # Index current year\n    eYear &lt;- e1[e1$year == year, ] \n\n    # Spring Breakpoint Calculation\n    # -----------------------------\n\n    # Create dataframe for calculating number of synchronized days in a row. \n    runsSpring &lt;- data.frame(array(NA,c(1,numForwardSpring)))\n    \n    # Only calculate if it is a complete season\n        if(year %in% completeYearsSpring){\n            \n      # Loop through approximate time forward until breakpoint in ascending water temp\n      for (i in min(eYear$yday):(200)){\n                \n        # From the current day, loop forward through the numForward range to determined which days are in sync\n        for (ii in 2:numForwardSpring ){\n          \n          # A 1 gets assigned if the moving mean of that day is within the CI range or \n          #     if the iteration falls out of the approximated range examined. If the moving\n          #     mean is outside of the range, it gets assigned a zero.\n          if( (i+ii-2) %in% eYear$yday ) {\n                  runsSpring[ i,ii ] &lt;- 1*((eYear$movingMean[ eYear$yday == (i+ii-2) ] &gt;= lo) & (eYear$movingMean[ eYear$yday == (i+ii-2) ] &lt;= hi))\n          } else (runsSpring[ i,ii ] &lt;- 1  )\n            \n                }# end numForward loop\n        \n        # Determine if all of the days in the numForward range are in sync. If all days within numForward\n        #   are in sync (assigned a 1), the product will be a 1, otherwise it is NA.\n                runsSpring[ i,1 ] &lt;- prod( runsSpring[ i, 2:numForwardSpring ] )\n        \n            }# End approximated seasonal loop\n      \n      # The first day where all of the days ahead of it are in sync (in the numForward range) will be the minimum day with a 1.\n      #   This day gets assigned the spring breakpoint\n            breaks$springBP[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- min(which(runsSpring[,1] == 1))\n            \n      # Fill in the complete springBP column\n      breaks$springBPComplete[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- TRUE\n        } #completeYearsSpring if statement\n    \n    \n    # Fall Breakpoint Calculation\n    # ---------------------------\n    \n    # Create dataframe for calculating number of days in a row within range\n    runsFall   &lt;- data.frame(array(NA,c(1,numForwardFall)))\n    \n    # Only calculate if it is a complete season\n      if(year %in% completeYearsFall){\n\n      # Determine the point to stop to keep from going past lower limit if dOY\n      stopLoop &lt;- max( c( minCompleteDOYBP3,min(eYear$yday)+numForwardFall + 1 ) )  \n            \n      # Loop through the approximate time backward until descending water temp\n      for (i in  max(eYear$yday):stopLoop){\n          \n        # From the current day, loop backward through the numForward range to determined which days are in sync\n                for (ii in 2:numForwardFall ){\n          \n          # A 1 gets assigned if the moving mean of that day is within the CI range or \n          #     if the iteration falls out of the approximated range examined. If the moving\n          #     mean is outside of the range, it gets assigned a zero.\n                  if( (i-ii+2) %in% eYear$yday ) { \n                      runsFall[ i,ii ] &lt;- 1*((eYear$movingMean[ eYear$yday == (i-ii+2) ] &gt;= lo) & (eYear$movingMean[ eYear$yday == (i-ii+2) ] &lt;= hi))\n                  } else(runsFall[ i,ii ] &lt;- 1 )\n          \n                }# end numForward loop\n        \n        # Determine if all of the days in the numForward range are in sync. If all days within numForward\n        #   are in sync (assigned a 1), the product will be a 1, otherwise it is NA.\n        runsFall[ i,1 ] &lt;- prod( runsFall[ i, 2:numForwardFall ] )\n            \n      }# End approximated seasonal loop\n      \n      # The last day where all of the days ahead of it are in sync (in the numForward range) will be the minimum day with a 1.\n      #   This day gets assigned the fall breakpoint\n            breaks$fallBP[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- max(which(runsFall[,1] == 1))\n            \n      # Fill in the complete fallBP column\n      breaks$fallBPComplete[ breaks$year == year & breaks$site_name == siteList[j] ] &lt;- TRUE\n\n        }   #completeYearsFall if statement\n    \n    } #completeYearsSpringOrFall loop\n  \n} #site loop\n\nhead(breaks)\n\n\n  year     site_name quantileLo quantileHi springBPComplete fallBPComplete\n1 2020   Avery Brook -0.4928280  0.4245787             TRUE           TRUE\n2 2021   Avery Brook -0.4853836  0.2876319             TRUE           TRUE\n3 2022   Avery Brook -0.4425745  0.1521084             TRUE           TRUE\n4 2023   Avery Brook -0.4431010  0.2761850             TRUE          FALSE\n5 2024   Avery Brook -0.4147228  0.0801055             TRUE           TRUE\n6 2017 BigCreekLower -0.4135217  0.7688442            FALSE          FALSE\n  springOrFallBPComplete springBP fallBP\n1                   TRUE       66    300\n2                   TRUE       93    304\n3                   TRUE       94    313\n4                   TRUE       79     NA\n5                   TRUE       97    282\n6                  FALSE       NA     NA\n\n\nFor sites that did not have enough data to calculate a breakpoint, use the mean breakpoint at the smallest scale that a mean exists (site or basin).\n\n\nCode\n# Calculate mean BPs across different scales\nmeanBPSite  &lt;- plyr::ddply(breaks, \"site_name\", summarise, meanSpringBPSite = mean(springBP, na.rm = T), meanFallBPSite = mean(fallBP, na.rm = T) )\nmeanBPBasin &lt;- plyr::ddply(breaks %&gt;% left_join(siteinfo %&gt;% select(site_name, basin)), \"basin\", summarise, meanSpringBPBasin = mean(springBP,na.rm=T), meanFallBPBasin = mean(fallBP,na.rm=T) )\n#meanBPHUC8  &lt;- ddply( breaks, .(HUC8) , summarise, meanSpringBPHUC8  = mean(springBP,na.rm=T), meanFallBPHUC8  = mean(fallBP,na.rm=T) )\n#meanBPHUC4  &lt;- ddply( breaks, .(HUC4) , summarise, meanSpringBPHUC4  = mean(springBP,na.rm=T), meanFallBPHUC4  = mean(fallBP,na.rm=T) )\n\n# Merge in mean BPs to \"breaks\"\nbreaks &lt;- merge( x = breaks, y = meanBPSite , by = 'site_name' , all.x = T, all.y = F, sort = F)\nbreaks &lt;- merge( x = breaks %&gt;% left_join(siteinfo %&gt;% select(site_name, basin)), y = meanBPBasin, by = 'basin', all.x = T, all.y = F, sort = F)\n#breaks &lt;- merge( x = breaks, y = meanBPHUC8 , by = 'HUC8' , all.x = T, all.y = F, sort = F)\n#breaks &lt;- merge( x = breaks, y = meanBPHUC4 , by = 'HUC4' , all.x = T, all.y = F, sort = F)\n\n# Add columns for final breakpoints\nbreaks$finalSpringBP  &lt;- NA\nbreaks$sourceSpringBP &lt;- NA\nbreaks$finalFallBP    &lt;- NA\nbreaks$sourceFallBP   &lt;- NA\n\n\n# Calculated BPs\n# --------------\n# Spring\nnewSpringBP &lt;- which(is.na(breaks$finalSpringBP) & !is.na(breaks$springBP) )\nbreaks$finalSpringBP [ newSpringBP ] &lt;- breaks$springBP[ newSpringBP ]\nbreaks$sourceSpringBP[ newSpringBP ] &lt;- 'directly calculated'\n\n#Fall\nnewFallBP &lt;- which(is.na(breaks$finalFallBP) & !is.na(breaks$fallBP) )\nbreaks$finalFallBP [ newFallBP ] &lt;- breaks$fallBP[ newFallBP ]\nbreaks$sourceFallBP[ newFallBP ] &lt;- 'directly calculated'\n\n\n# Site averaged BPs\n# -----------------\n# Spring\nsiteBP &lt;- which(is.na(breaks$finalSpringBP) & !is.na(breaks$meanSpringBPSite) )\nbreaks$finalSpringBP [ siteBP ] &lt;- breaks$meanSpringBPSite[ siteBP ]\nbreaks$sourceSpringBP[ siteBP ] &lt;- 'site mean'\n\n# Fall\nsiteBP &lt;- which(is.na(breaks$finalFallBP) & !is.na(breaks$meanFallBPSite) )\nbreaks$finalFallBP [ siteBP ] &lt;- breaks$meanFallBPSite[ siteBP ]\nbreaks$sourceFallBP[ siteBP ] &lt;- 'site mean'\n\n\n# Basin averaged BPs\n# ------------------\n# Spring\nbasinBP &lt;- which(is.na(breaks$finalSpringBP) & !is.na(breaks$meanSpringBPBasin) )\nbreaks$finalSpringBP [ basinBP ] &lt;- breaks$meanSpringBPBasin[ basinBP ]\nbreaks$sourceSpringBP[ basinBP ] &lt;- 'basin mean'\n\n# Fall\nbasinBP &lt;- which(is.na(breaks$finalFallBP) & !is.na(breaks$meanFallBPBasin) )\nbreaks$finalFallBP [ basinBP ] &lt;- breaks$meanFallBPBasin[ basinBP ]\nbreaks$sourceFallBP[ basinBP ] &lt;- 'basin mean'\n\n\nView final breakpoint data\n\n\nCode\ndatatable(breaks)\n\n\n\n\n\n\nWrite to file\n\n\nCode\n# Index the columns to save\nspringFallBPs &lt;- breaks[,c('basin', 'site_name', 'year', 'finalSpringBP', 'sourceSpringBP', 'finalFallBP', 'sourceFallBP','quantileLo','quantileHi')]\n\n# fix erroneous Rock Creek, Lodgepole Creek spring breakpoint\n# springFallBPs &lt;- read_csv(\"data/breakpoints.csv\")\nspringFallBPs &lt;- springFallBPs %&gt;% \n  mutate(finalSpringBP = ifelse(site_name == \"Rock Creek\", 111, finalSpringBP),\n         sourceSpringBP = ifelse(site_name == \"Rock Creek\", \"basin mean\", sourceSpringBP)) %&gt;% \n  mutate(finalSpringBP = ifelse(site_name == \"Lodgepole Creek\", 99, finalSpringBP),\n         sourceSpringBP = ifelse(site_name == \"Lodgepole Creek\", \"basin mean\", sourceSpringBP))\n\n# Save the output\nwrite_csv(springFallBPs, \"data/breakpoints.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "Breakpoints.html#plot-breakpoints",
    "href": "Breakpoints.html#plot-breakpoints",
    "title": "3  Breakpoints",
    "section": "3.3 Plot breakpoints",
    "text": "3.3 Plot breakpoints\nShow examples of the breakpoint calculations for one stream in each basin. Compare to Figure 3 in Letcher et al. (2016). Note, this doesn’t really work in the Donner-Blitzen, where temperature data during winter/the shoulder seasons is entirely unavailable…nothing to inform breakpoint estimatation outside of the middle 150 days of year.\nCreate plotting function\n\n\nCode\nindexfun &lt;- function(site) {\n# thermographs\np1 &lt;- ggplot() +\n  geom_line(data = dat_index %&gt;% filter(site_name == site), aes(x = yday, y = tempc_mean)) +\n  geom_line(data = dat_index %&gt;% filter(site_name == site), aes(x = yday, y = air_temp_mean), color = \"red\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalFallBP), color = \"blue\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalSpringBP), color = \"blue\") +\n  facet_wrap(~year, nrow = 1) +\n  theme_bw() + theme(panel.grid = element_blank()) + \n  ylab(\"Temperature (deg. C)\") \n# temperature indices\np2 &lt;- ggplot() +\n  geom_point(data = dat_index %&gt;% filter(site_name == site), aes(x = yday, y = index)) +\n  geom_vline(xintercept = c(125,275), linetype = \"dashed\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalFallBP), color = \"blue\") +\n  geom_vline(data = breaks %&gt;% filter(site_name == site), aes(xintercept = finalSpringBP), color = \"blue\") +\n  geom_hline(data = breaks %&gt;% filter(site_name == site), aes(yintercept = quantileLo), color = \"red\") +\n  geom_hline(data = breaks %&gt;% filter(site_name == site), aes(yintercept = quantileHi), color = \"red\") +\n  facet_wrap(~year, nrow = 1) +\n  theme_bw() + theme(panel.grid = element_blank()) + \n  ylim(-20,20) +\n  ylab(\"Temperature index\") \n# arrange figures\nreturn(ggarrange(p1, p2, ncol = 1))\n}\n\n\n\nAvery Brook, West BrookPaine Run 01Staunton River 02McGee Creek Trib, FlatheadDugout Creek, YellowstoneLeidy Creek, SnakeLittle Blitzen River, Donner-Blitzen\n\n\n\n\nCode\nindexfun(\"Avery Brook\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nindexfun(\"Paine Run 01\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nindexfun(\"Staunton River 02\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nindexfun(\"McGeeCreekTrib\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nindexfun(\"Dugout Creek\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nindexfun(\"Leidy Creek Mouth\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nindexfun(\"Little Blizten River NWIS\")\n\n\n\n\n\n\n\n\n\n\n\n\nPlot trends in spring and fall breakpoints (only those we directly calculated). We have a ~limited number of years and so this isn’t all that informative\n\n\nCode\np1 &lt;- springFallBPs %&gt;%\n  filter(sourceSpringBP == \"directly calculated\") %&gt;%\n  ggplot(aes(x = year, y = finalSpringBP, color = basin)) +\n  geom_point(aes(color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylab(\"Spring breakpoint (day of year)\") +\n  theme_bw() + theme(panel.grid = element_blank())\n  \np2 &lt;- springFallBPs %&gt;%\n  filter(sourceSpringBP == \"directly calculated\") %&gt;%\n  ggplot(aes(x = year, y = finalFallBP, color = basin)) +\n  geom_point(aes(color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylab(\"Fall breakpoint (day of year)\") +\n  theme_bw() + theme(panel.grid = element_blank())\n\nggpubr::ggarrange(p1, p2, nrow = 1, common.legend = TRUE)\n\n\n\n\n\n\n\n\n\nTrends in length of synchronized period\n\n\nCode\nspringFallBPs %&gt;%\n  filter(sourceSpringBP == \"directly calculated\") %&gt;%\n  mutate(SynchLen = finalFallBP - finalSpringBP) %&gt;%\n  ggplot(aes(x = year, y = SynchLen, color = basin)) +\n  geom_point(aes(color = basin)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylab(\"Length of synchronized period (days)\") +\n  theme_bw() + theme(panel.grid = element_blank())",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Breakpoints</span>"
    ]
  },
  {
    "objectID": "FormatData.html",
    "href": "FormatData.html",
    "title": "4  Format Data",
    "section": "",
    "text": "4.1 Base data\nPurpose: Format data for modeling in JAGS\nTemperature and flow data\nCode\ndat &lt;- read_csv(\"data/EcoDrought_FlowTempData_DailyWeekly_clean.csv\")\ndat\n\n\n# A tibble: 167,535 × 23\n   site_name  basin date       flow_mean tempc_mean tempc_min tempc_max Yield_mm\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;         &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Avery Bro… &lt;NA&gt;  2020-01-01     NA       NA         NA        NA        NA   \n 2 Avery Bro… &lt;NA&gt;  2020-01-02     NA       NA         NA        NA        NA   \n 3 Avery Bro… &lt;NA&gt;  2020-01-03     NA       NA         NA        NA        NA   \n 4 Avery Bro… &lt;NA&gt;  2020-01-04     NA       NA         NA        NA        NA   \n 5 Avery Bro… &lt;NA&gt;  2020-01-05     NA       NA         NA        NA        NA   \n 6 Avery Bro… &lt;NA&gt;  2020-01-06     NA       NA         NA        NA        NA   \n 7 Avery Bro… &lt;NA&gt;  2020-01-07     NA       NA         NA        NA        NA   \n 8 Avery Bro… West… 2020-01-08      5.96     0.594      0.111     1.11      1.99\n 9 Avery Bro… West… 2020-01-09      4.81     0.0336     0         0.111     1.61\n10 Avery Bro… West… 2020-01-10      4.88     0.363      0         0.778     1.63\n# ℹ 167,525 more rows\n# ℹ 15 more variables: lat &lt;dbl&gt;, long &lt;dbl&gt;, area_sqmi &lt;dbl&gt;, elev_ft &lt;dbl&gt;,\n#   yday &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;, swe_kgm2 &lt;dbl&gt;,\n#   daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;, index &lt;dbl&gt;, year &lt;dbl&gt;,\n#   count &lt;dbl&gt;, siteYear &lt;chr&gt;, movingMean &lt;dbl&gt;\nFix basins and trim to focal variables.\nCode\nmysitebasins &lt;- dat %&gt;% \n  group_by(site_name) %&gt;% \n  summarize(basin = unique(basin),\n            lat = unique(lat), \n            long = unique(long), \n            elev_ft = unique(elev_ft),\n            area_sqmi = unique(area_sqmi)) %&gt;% \n  filter(!is.na(basin), !is.na(lat), !is.na(long), !is.na(elev_ft), !is.na(area_sqmi)) %&gt;% \n  mutate(basin = recode(basin, \"Shields River\" = \"Yellowstone\"))\n\ndat &lt;- dat %&gt;% \n  select(-c(basin, lat, long, elev_ft, area_sqmi)) %&gt;% \n  left_join(mysitebasins) %&gt;% \n  select(site_name, basin, lat, long, elev_ft, area_sqmi, date, yday, year, siteYear, \n         tempc_mean, tempc_min, tempc_max, flow_mean, Yield_mm, air_temp_mean, precip_mmday, swe_kgm2, daylength_sec, shortrad_wm2)\n\ndat\n\n\n# A tibble: 167,535 × 20\n   site_name basin   lat  long elev_ft area_sqmi date        yday  year siteYear\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   \n 1 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-01     1  2020 Avery B…\n 2 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-02     2  2020 Avery B…\n 3 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-03     3  2020 Avery B…\n 4 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-04     4  2020 Avery B…\n 5 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-05     5  2020 Avery B…\n 6 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-06     6  2020 Avery B…\n 7 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-07     7  2020 Avery B…\n 8 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-08     8  2020 Avery B…\n 9 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-09     9  2020 Avery B…\n10 Avery Br… West…  42.4 -72.7    699.      2.83 2020-01-10    10  2020 Avery B…\n# ℹ 167,525 more rows\n# ℹ 10 more variables: tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;, tempc_max &lt;dbl&gt;,\n#   flow_mean &lt;dbl&gt;, Yield_mm &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;,\n#   swe_kgm2 &lt;dbl&gt;, daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;\nZ-score air temp and flow and calculate lagged air temp variables. Note: air temp and flow are standardized by site.\nCode\n# ensure proper ordering\ndat &lt;- dat[order(dat$site_name, dat$year, dat$yday),]\n\n# calculate lagged air temp\ndat &lt;- dat %&gt;%\n  mutate(Yield_mm_log = log(Yield_mm + 0.00001),\n         flow_mean_log = log(flow_mean + 0.00001)) %&gt;%\n  group_by(site_name) %&gt;%\n  mutate(z_Yield_mm_log = c(scale(Yield_mm_log, center = TRUE, scale = TRUE)),\n         z_air_temp_mean = c(scale(air_temp_mean, center = TRUE, scale = TRUE))) %&gt;%\n  mutate(air_temp_mean_lag1 = lag(air_temp_mean, 1),\n         air_temp_mean_lag2 = lag(air_temp_mean, 2),\n         z_air_temp_mean_lag1 = lag(z_air_temp_mean, n = 1),\n         z_air_temp_mean_lag2 = lag(z_air_temp_mean, n = 2)) %&gt;%\n  ungroup()\nBreakpoints\nCode\nspringFallBPs &lt;- read_csv(\"data/breakpoints.csv\") %&gt;% \n  mutate(basin = recode(basin, \"Shields River\" = \"Yellowstone\"))\nspringFallBPs\n\n\n# A tibble: 459 × 9\n   basin   site_name  year finalSpringBP sourceSpringBP finalFallBP sourceFallBP\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;       \n 1 West B… Avery Br…  2020          66   directly calc…        300  directly ca…\n 2 West B… Avery Br…  2021          93   directly calc…        304  directly ca…\n 3 West B… Avery Br…  2022          94   directly calc…        313  directly ca…\n 4 West B… Avery Br…  2023          79   directly calc…        300. site mean   \n 5 West B… Avery Br…  2024          97   directly calc…        282  directly ca…\n 6 West B… Sanderso…  2019          83.2 site mean             300  site mean   \n 7 West B… Sanderso…  2020          66   directly calc…        301  directly ca…\n 8 West B… Sanderso…  2021          80   directly calc…        303  directly ca…\n 9 West B… Sanderso…  2022          94   directly calc…        313  directly ca…\n10 West B… Sanderso…  2023          78   directly calc…        302  directly ca…\n# ℹ 449 more rows\n# ℹ 2 more variables: quantileLo &lt;dbl&gt;, quantileHi &lt;dbl&gt;\nJoin temp/flow data with breakpoints and filter to days within synchronized period.\nCode\ndat_bp &lt;- dat %&gt;% \n  left_join(springFallBPs) %&gt;%\n  filter(yday &gt;= finalSpringBP & yday &lt;= finalFallBP)\ndat_bp\n\n\n# A tibble: 94,956 × 34\n   site_name basin   lat  long elev_ft area_sqmi date        yday  year siteYear\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   \n 1 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-06    66  2020 Avery B…\n 2 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-07    67  2020 Avery B…\n 3 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-08    68  2020 Avery B…\n 4 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-09    69  2020 Avery B…\n 5 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-10    70  2020 Avery B…\n 6 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-11    71  2020 Avery B…\n 7 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-12    72  2020 Avery B…\n 8 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-13    73  2020 Avery B…\n 9 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-14    74  2020 Avery B…\n10 Avery Br… West…  42.4 -72.7    699.      2.83 2020-03-15    75  2020 Avery B…\n# ℹ 94,946 more rows\n# ℹ 24 more variables: tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;, tempc_max &lt;dbl&gt;,\n#   flow_mean &lt;dbl&gt;, Yield_mm &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;,\n#   swe_kgm2 &lt;dbl&gt;, daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;,\n#   Yield_mm_log &lt;dbl&gt;, flow_mean_log &lt;dbl&gt;, z_Yield_mm_log &lt;dbl&gt;,\n#   z_air_temp_mean &lt;dbl&gt;, air_temp_mean_lag1 &lt;dbl&gt;, air_temp_mean_lag2 &lt;dbl&gt;,\n#   z_air_temp_mean_lag1 &lt;dbl&gt;, z_air_temp_mean_lag2 &lt;dbl&gt;, …\nShow the distribution of the number of temperature observations (non-NA) per site-year\nCode\nobspersy &lt;- dat_bp %&gt;% group_by(siteYear) %&gt;% summarize(numobs = sum(!is.na(tempc_mean))) %&gt;% ungroup()\nobspersy %&gt;% ggplot() + geom_histogram(aes(x = numobs)) + theme_bw()\nDrop siteYears with less than 10 days of temperature observations\nCode\ndrops &lt;- obspersy %&gt;% filter(numobs &lt; 10)\ndat_bp &lt;- dat_bp %&gt;% filter(!siteYear %in% drops$siteYear)\nPlot temp data with LOESS to show seasonal hysteresis\nCode\ndat_bp %&gt;% \n  ggplot(aes(x = yday, y = tempc_mean)) + \n  geom_point(size = 0.1) +\n  facet_wrap(~factor(basin, levels = c(\"West Brook\", \"Staunton River\", \"Paine Run\", \"Flathead\", \"Yellowstone\", \"Snake River\", \"Donner Blitzen\"))) +\n  geom_smooth(color = \"red\", se = FALSE) +\n  theme_bw() #+ theme(panel.grid = element_blank())\nCreate dummy site and basin variables (numeric for JAGS), and define “rowNum” variable to allow for identifying first rows and evaluation rows\nCode\n# arrange\ndat_bp &lt;- dat_bp %&gt;% arrange(basin, site_name, year, yday)\n\n# create tibbles of site and basin numeric codes\nsitecodes &lt;- tibble(site_name = unique(dat_bp$site_name), site_code = 1:length(unique(dat_bp$site_name)))\nbasincodes &lt;- tibble(basin = unique(dat_bp$basin), basin_code = 1:length(unique(dat_bp$basin)))\n\n# join to data\ndat_bp &lt;- dat_bp %&gt;%\n  left_join(sitecodes) %&gt;%\n  left_join(basincodes) %&gt;%\n  mutate(rowNum = 1:nrow(.))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "FormatData.html#landscape-covariates",
    "href": "FormatData.html#landscape-covariates",
    "title": "4  Format Data",
    "section": "4.2 Landscape covariates",
    "text": "4.2 Landscape covariates\nTo do – derive additional landscape covariates presumed to affect stream temperature, or rather, mediate the relationship between stream and air temperature/flow (groundwater influence/pasta?, basin slope, lake area, percent forest cover, etc.)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "FormatData.html#check-correlations",
    "href": "FormatData.html#check-correlations",
    "title": "4  Format Data",
    "section": "4.3 Check correlations",
    "text": "4.3 Check correlations",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "FormatData.html#write-to-file",
    "href": "FormatData.html#write-to-file",
    "title": "4  Format Data",
    "section": "4.4 Write to file",
    "text": "4.4 Write to file\nWrite formatted data to file\n\n\nCode\nwrite_csv(dat_bp, \"data/EcoDrought_FlowTempData_formatted.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Format Data</span>"
    ]
  },
  {
    "objectID": "ModelTemp-Letcher.html",
    "href": "ModelTemp-Letcher.html",
    "title": "5  ModelTemp - Letcher et al. (2016)",
    "section": "",
    "text": "5.1 Repeat Letcher et al.\nPurpose: fit stream temp model as in Letcher et al. (2016); modify JAGS model to estimate parameters hierarchically and check to make sure output matches.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ModelTemp - Letcher et al. (2016)</span>"
    ]
  },
  {
    "objectID": "ModelTemp-Letcher.html#repeat-letcher-et-al.",
    "href": "ModelTemp-Letcher.html#repeat-letcher-et-al.",
    "title": "5  ModelTemp - Letcher et al. (2016)",
    "section": "",
    "text": "5.1.1 Load data\nLoad fully formatted data used in Letcher et al. (2016) PeerJ\n\n\nCode\nload(\"data/tempDataSyncSUsed.RData\")\nhead(tempDataSyncS)\n\n\n  agency       date AgencyID year fyear            site           fsite\n1 MAUSGS 2003-04-15 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n2 MAUSGS 2003-04-17 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n3 MAUSGS 2003-04-18 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n4 MAUSGS 2003-04-19 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n5 MAUSGS 2003-04-20 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n6 MAUSGS 2003-04-21 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n      date.1 finalSpringBP finalFallBP     temp Latitude  Longitude    airTemp\n1 2003-04-15           102         290 7.807917 1.048017 -0.7477016 -0.9020338\n2 2003-04-17           102         290 5.607500 1.048017 -0.7477016 -0.4415435\n3 2003-04-18           102         290 4.758333 1.048017 -0.7477016 -1.9231208\n4 2003-04-19           102         290 6.387500 1.048017 -0.7477016 -1.6428224\n5 2003-04-20           102         290 7.113333 1.048017 -0.7477016 -0.8820125\n6 2003-04-21           102         290 7.880000 1.048017 -0.7477016 -0.6017140\n  airTempLagged1 airTempLagged2      prcp prcpLagged1 prcpLagged2 prcpLagged3\n1     -1.6630011     -0.9826831 -0.431969   -0.431943  -0.4321001   1.5183177\n2     -0.9021355     -1.6637155 -0.431969   -0.431943  -0.4321001  -0.4320896\n3     -0.4416116     -0.9025616 -0.431969   -0.431943  -0.4321001  -0.4320896\n4     -1.9232972     -0.4418633 -0.431969   -0.431943  -0.4321001  -0.4320896\n5     -1.6429783     -1.9241102 -0.431969   -0.431943  -0.4321001  -0.4320896\n6     -0.8821128     -1.6436851 -0.431969   -0.431943  -0.4321001  -0.4320896\n        dOY     srad         dayl      swe    river riverOrdered       flow\n1 -1.415528 1.991316 -0.131945293 5.473538 WB JIMMY     WB JIMMY 0.08426817\n2 -1.384749 2.653903 -0.069753841 5.201804 WB JIMMY     WB JIMMY 0.07151272\n3 -1.369360 1.461245 -0.007563092 5.201804 WB JIMMY     WB JIMMY 0.06206147\n4 -1.353970 1.567260 -0.007563092 5.065937 WB JIMMY     WB JIMMY 0.05891408\n5 -1.338580 2.309357  0.054628359 5.065937 WB JIMMY     WB JIMMY 0.05542324\n6 -1.323191 2.362365  0.054628359 4.930070 WB JIMMY     WB JIMMY 0.05365359\n       dA     flowL     sweL     flowS    flowLS    sweLS     swe0 dOYInt\n1 0.02175 -2.473751 1.867723 1.1818051 1.4198486 3.597025 5.473538    105\n2 0.02175 -2.637880 1.824840 0.8600836 1.2196572 3.520450 5.201804    107\n3 0.02175 -2.779630 1.824840 0.6217015 1.0467618 3.520450 5.201804    108\n4 0.02175 -2.831675 1.802689 0.5423169 0.9832809 3.480896 5.065937    109\n5 0.02175 -2.892756 1.802689 0.4542700 0.9087791 3.480896 5.065937    110\n6 0.02175 -2.925207 1.780036 0.4096354 0.8691984 3.440445 4.930070    111\n  dOYYear river0 river1 river2 river3 site0 site1 site2 site3 site4 site5 site6\n1   -1070      0      1      0      0     0     0     0     1     0     0     0\n2   -1068      0      1      0      0     0     0     0     1     0     0     0\n3   -1067      0      1      0      0     0     0     0     1     0     0     0\n4   -1066      0      1      0      0     0     0     0     1     0     0     0\n5   -1065      0      1      0      0     0     0     0     1     0     0     0\n6   -1064      0      1      0      0     0     0     0     1     0     0     0\n  rowNum HUC8 sitef huc8f siteShift dateShift newSite newDate  isNA isNAShift\n1      1   NA     1    NA         1         1   FALSE    TRUE FALSE     FALSE\n2      2   NA     1    NA         1     12157   FALSE    TRUE FALSE     FALSE\n3      3   NA     1    NA         1     12159   FALSE   FALSE FALSE     FALSE\n4      4   NA     1    NA         1     12160   FALSE   FALSE FALSE     FALSE\n5      5   NA     1    NA         1     12161   FALSE   FALSE FALSE     FALSE\n6      6   NA     1    NA         1     12162   FALSE   FALSE FALSE     FALSE\n  newDeploy deployID month meanByMonthRiverYear nMonthRiverYear\n1         1        1     4             7.330028              15\n2         1        2     4             7.330028              15\n3         0        2     4             7.330028              15\n4         0        2     4             7.330028              15\n5         0        2     4             7.330028              15\n6         0        2     4             7.330028              15\n  meanByMonthRiver nMonthRiver meanByMonth nMonth riverMS    resid.wb  pred.wb\n1         7.174471         260    7.656617   1146      OL  0.00000000 5.890803\n2         7.174471         260    7.656617   1146      OL -1.16836024 6.775860\n3         7.174471         260    7.656617   1146      OL  1.01697121 3.741362\n4         7.174471         260    7.656617   1146      OL  1.36486877 5.022631\n5         7.174471         260    7.656617   1146      OL -0.05961997 7.172953\n6         7.174471         260    7.656617   1146      OL  0.27705812 7.602942\n\n\nCode\nunique(tempDataSyncS$river)\n\n\n[1] \"WB JIMMY\"    \"WB MITCHELL\" \"WB OBEAR\"    \"WEST BROOK\" \n\n\nCode\ntempDataSyncS &lt;- tempDataSyncS %&gt;% mutate(siteYear = paste(site, year, sep = \"_\"))\n\n\nAny missing data?\n\n\nCode\nany(is.na(tempDataSyncS$airTemp))\n\n\n[1] FALSE\n\n\nCode\nany(is.na(tempDataSyncS$airTempLagged1))\n\n\n[1] FALSE\n\n\nCode\nany(is.na(tempDataSyncS$airTempLagged2))\n\n\n[1] FALSE\n\n\nCode\nany(is.na(tempDataSyncS$flowLS))\n\n\n[1] FALSE\n\n\nVisualize data. Note that air temp is standardized. By site? Or among sites?\n\nAir tempWater tempFlow (log and std)Tw ~ Ta + FTa ~ F\n\n\n\n\nCode\nggplot(tempDataSyncS,aes(dOY,airTemp))+\n  geom_line(aes(color=factor(year))) +\n  facet_grid(year~riverOrdered)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(tempDataSyncS,aes(dOY,temp))+\n  geom_line(aes(color=factor(year)))+\n  facet_grid(year~riverOrdered)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(tempDataSyncS,aes(dOY,flowLS))+\n  geom_line(aes(color=factor(year)))+\n  facet_grid(year~riverOrdered)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntempDataSyncS %&gt;% ggplot(aes(x = airTemp, y = temp, color = flowLS)) + geom_point(size = 0.2) + facet_wrap(~riverOrdered) + theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntempDataSyncS %&gt;% ggplot(aes(x = airTemp, y = flowLS, colour = temp)) + geom_point(size = 0.2) + facet_wrap(~riverOrdered) + theme_bw() + ggpubr::stat_cor()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Specify model\nStraight from Letcher et al (2016)\n\n\nCode\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] &lt;- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] &lt;- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] &lt;- trend[evalRows[i]] + ar1[river[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]]  &lt;- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nRiver){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:K.0) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n      \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] &lt;- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year &lt;- L + 1\n    sigma.B.year[1:L, 1:L] &lt;- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] &lt;- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] &lt;- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] &lt;- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] &lt;- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"JAGS models/DailyTempModelJAGS_Letcher.txt\")\n\n\n\n\n5.1.3 Organize objects\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: must be TRUE!\n\n\nCode\n# row indices for first observation in each site-year\nfirstObsRows &lt;- unlist(tempDataSyncS %&gt;% \n  group_by(siteYear) %&gt;%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %&gt;%\n  ungroup() %&gt;% \n  select(index))\nnFirstObsRows &lt;- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n\n\n[1] TRUE\n\n\nGet row indices for all other observations\n\n\nCode\nevalRows &lt;- unlist(tempDataSyncS %&gt;% filter(!rowNum %in% firstObsRows) %&gt;% select(rowNum))\nnEvalRows &lt;- length(evalRows)\n\n\nFixed and random effect data\n\n\nCode\ndata.fixed &lt;- data.frame(intercept = 1\n                         ,airTemp = tempDataSyncS$airTemp \n                         ,airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         ,flow =  tempDataSyncS$flowLS\n                         \n                         ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         ,river1 = tempDataSyncS$river1\n                         ,river2 = tempDataSyncS$river2\n                         ,river3 = tempDataSyncS$river3\n                         \n                         #river interaction with air temp\n                         ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years &lt;- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n\n\nMisc. objects\n\n\nCode\nTi &lt;- length(unique(tempDataSyncS$year))\nL &lt;- dim(data.random.years)[2]\nW.year &lt;- diag(L)\n\n\nCombine data in list\n\n\nCode\n# combine data in a list\njags.data &lt;- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = data.fixed,\n                  \"X.year\" = data.random.years,\n                  \"K.0\" = dim(data.fixed)[2],\n                  \"nRiver\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"river\" = as.factor(tempDataSyncS$riverOrdered)\n                  )\n\n\nParameters to monitor\n\n\nCode\njags.params &lt;- c(\"residuals\",\n            \"deviance\",\n #           \"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.year\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\"\n            )\n\n\n\n\n5.1.4 Fit model\n\n\nCode\nfit0 &lt;- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = \"JAGS models/DailyTempModelJAGS_Letcher.txt\",\n            n.chains = 10, n.thin = 5, n.burnin = 500, n.iter = 1500, DIC = TRUE)\nbeep()\n\n\n\n5.1.4.1 Save model output\nSave to file\n\n\nCode\nsaveRDS(fit0, \"Model objects/LetcherTempModel_PeerJ2016.RDS\")\n\n\nRead in fitted model object\n\n\nCode\nfit0 &lt;- readRDS(\"Model objects/LetcherTempModel_PeerJ2016.RDS\")\n\n\nGet MCMC samples and summary\n\n\nCode\ntop_mod &lt;- fit0\n# generate MCMC samples and store as an array\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary &lt;- modelout$summary\nhead(param.summary)\n\n\n             mean         sd       2.5%        25%        50%        75%\nB.0[1] 15.0942825 0.17271642 14.7510778 14.9831293 15.0931367 15.2073322\nB.0[2]  1.5201578 0.02723257  1.4673158  1.5016734  1.5199031  1.5390533\nB.0[3]  0.1955279 0.01619090  0.1631752  0.1845110  0.1954986  0.2069212\nB.0[4]  0.1545523 0.01642121  0.1208057  0.1442824  0.1542702  0.1647775\nB.0[5]  0.3629916 0.01520228  0.3334788  0.3523900  0.3635001  0.3730769\nB.0[6] -0.1292206 0.01180889 -0.1523336 -0.1368216 -0.1290627 -0.1214532\n            97.5%      Rhat n.eff\nB.0[1] 15.4398786 1.0038273  1000\nB.0[2]  1.5732813 1.0034739  1100\nB.0[3]  0.2254210 0.9999951  2000\nB.0[4]  0.1871898 1.0028484  1300\nB.0[5]  0.3919732 1.0006563  2000\nB.0[6] -0.1065415 0.9998802  2000\n\n\n\n\n5.1.4.2 Check convergence\nAny problematic R-hat values (&gt;1.05)?\n\n\nCode\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] &gt; 1.05]\n\n\nnamed numeric(0)\n\n\nView traceplots\n\n\nCode\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"mu.year\", \n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConvert to ggs object\n\n\nCode\nggfit &lt;- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n\n\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      &lt;int&gt; &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n1         1     1 ar1[1]    0.773\n2         2     1 ar1[1]    0.799\n3         3     1 ar1[1]    0.817\n4         4     1 ar1[1]    0.796\n5         5     1 ar1[1]    0.811\n6         6     1 ar1[1]    0.801\n\n\n\n\n\n5.1.5 Goodness of fit\nFormat observed and predicted values\n\n\nCode\nMcmcdat &lt;- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n\n\nBayesian p-value\n\n\nCode\nsum(ppdat_exp &gt; ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n\n\n[1] 0.4975728\n\n\nPP-check, global\n\n\nCode\nppdat_obs_mean &lt;- apply(ppdat_obs, 2, mean)\nppdat_exp_mean &lt;- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %&gt;% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n\n\n\n\n\n\n\n\n\nPP-check by river and year\n\n\nCode\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean, river = tempDataSyncS$riverOrdered, year = tempDataSyncS$year) %&gt;% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\") +\n  facet_grid(year ~ river)\n\n\n\n\n\n\n\n\n\n\n\n5.1.6 Plot model output\nOutput is identical to Letcher et al. (2016), as expected\n\n5.1.6.1 Dot plots\n\nInterceptBetasAutoregressive termsWithin year trendsSite-specific interceptsSite specific slopes\n\n\n\n\nCode\nggs_caterpillar(ggfit %&gt;% filter(Parameter == \"B.0[1]\"), sort = FALSE) + scale_y_discrete(labels = \"Intercept\") + theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit %&gt;% filter(Parameter %in% grep(\"B.0\", unique(ggfit$Parameter), value = TRUE)[-1]) %&gt;%\n                  mutate(Parameter = factor(Parameter, levels = c(\"B.0[2]\", \"B.0[3]\", \"B.0[4]\", \"B.0[5]\", \"B.0[6]\", \n                                                                  \"B.0[7]\", \"B.0[8]\", \"B.0[9]\", \"B.0[10]\", \"B.0[11]\", \"B.0[12]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"T\", \"T(d-1)\", \"T(d-2)\", \"F\", \"T*F\", \"OL\", \"OS\", \"IS\", \"OL*T\", \"OS*T\", \"IS*T\")), limits = rev) + theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit %&gt;% filter(Parameter %in% grep(\"ar1\", unique(ggfit$Parameter), value = TRUE)) %&gt;%\n                  mutate(Parameter = factor(Parameter, levels = c(\"ar1Mean\", \"ar1SD\", \"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"ar1Mean\", \"ar1SD\", \"ar1[WB]\", \"ar1[OL]\", \"ar1[OS]\", \"ar1[IL]\")), limits = rev) + theme_bw() + xlim(0,1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit, family = \"mu.year\", sort = FALSE) + scale_y_discrete(labels = rev(c(\"Intercept\", \"Linear\", \"Quadratic\", \"Cubic\")), limits = rev) + theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;% \n  filter(Parameter %in% c(\"B.0[1]\", \"B.0[7]\", \"B.0[8]\", \"B.0[9]\")) %&gt;% \n  spread(key = Parameter, value = value) %&gt;%\n  rename(int_WB = 3, os_OL = 4, os_OS = 5, os_IS = 6) %&gt;%\n  mutate(int_OL = int_WB + os_OL,\n         int_OS = int_WB + os_OS,\n         int_IS = int_WB + os_IS) %&gt;%\n  select(-c(os_OL, os_OS, os_IS)) %&gt;%\n  gather(int_WB:int_IS, key = \"Parameter\", value = \"value\") %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"int_WB\", \"int_OL\", \"int_OS\", \"int_IS\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;% \n  filter(Parameter %in% c(\"B.0[2]\", \"B.0[10]\", \"B.0[11]\", \"B.0[12]\")) %&gt;% \n  spread(key = Parameter, value = value) %&gt;%\n  rename(slo_WB = 6, os_OL = 3, os_OS = 4, os_IS = 5) %&gt;%\n  mutate(slo_OL = slo_WB + os_OL,\n         slo_OS = slo_WB + os_OS,\n         slo_IS = slo_WB + os_IS) %&gt;%\n  select(-c(os_OL, os_OS, os_IS)) %&gt;%\n  gather(slo_WB:slo_IS, key = \"Parameter\", value = \"value\") %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1.6.2 Marginal efffects\nMarginal effects of air temperature x flow interaction, not accounting for lagged temperature effects, temporal autocorrelation,\n\nWest BrookJimmyMitchellObear\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WEST BROOK\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\") #+ \n  #geom_point(data = tempDataSyncS %&gt;% filter(riverOrdered == myriv), aes(x = airTemp, y = flowLS, color = temp)) +\n  #scale_color_distiller(palette = \"Spectral\", limits = c(0,23)) \n# combine\negg::ggarrange(p1, p2, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WB JIMMY\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[7]\",1] + param.summary[\"B.0[10]\",1]*pred_df$x_temp\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WB MITCHELL\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[8]\",1] + param.summary[\"B.0[11]\",1]*pred_df$x_temp\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WB OBEAR\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[9]\",1] + param.summary[\"B.0[12]\",1]*pred_df$x_temp\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ModelTemp - Letcher et al. (2016)</span>"
    ]
  },
  {
    "objectID": "ModelTemp-Letcher.html#hierarchical",
    "href": "ModelTemp-Letcher.html#hierarchical",
    "title": "5  ModelTemp - Letcher et al. (2016)",
    "section": "5.2 Hierarchical",
    "text": "5.2 Hierarchical\nFit the same model as above, but draw the intercepts and temperature effects hierarchically and check that the output matches\n\n5.2.1 Specify model\nModify Letcher model to estimate intercepts and slopes hierarchically\n\n\nCode\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] &lt;- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] &lt;- inprod(B.0[], X.0[firstObsRows[i], ]) + \n                                inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) + \n                                inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] &lt;- trend[evalRows[i]] + ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]] &lt;- inprod(B.0[], X.0[evalRows[i], ]) + \n                            inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) + \n                            inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nsites){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:Kfixed) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n    # random effect coefficients (by site)\n    for (k in 1:Krandom) {\n      sigma.B.site[k] ~ dunif(0, 100)\n      for (i in 1:nsites) {\n        B.site[i,k] ~ dnorm(0, pow(sigma.B.site[k], -2))\n      }\n    }\n    \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] &lt;- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year &lt;- L + 1\n    sigma.B.year[1:L, 1:L] &lt;- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] &lt;- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] &lt;- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] &lt;- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] &lt;- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical.txt\")\n\n\n\n\n5.2.2 Organize objects\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: must be TRUE!\n\n\nCode\n# row indices for first observation in each site-year\nfirstObsRows &lt;- unlist(tempDataSyncS %&gt;% \n  group_by(siteYear) %&gt;%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %&gt;%\n  ungroup() %&gt;% \n  select(index))\nnFirstObsRows &lt;- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n\n\n[1] TRUE\n\n\nGet row indices for all other observations\n\n\nCode\nevalRows &lt;- unlist(tempDataSyncS %&gt;% filter(!rowNum %in% firstObsRows) %&gt;% select(rowNum))\nnEvalRows &lt;- length(evalRows)\n\n\nFixed and random effect data\n\n\nCode\ndata.random &lt;- data.frame(intercept = 1,\n                          airTemp = tempDataSyncS$airTemp )\n\ndata.fixed &lt;- data.frame(#intercept = 1\n                         #,airTemp = tempDataSyncS$airTemp \n                         airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         ,flow =  tempDataSyncS$flowLS\n                         \n                         ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         # ,river1 = tempDataSyncS$river1\n                         # ,river2 = tempDataSyncS$river2\n                         # ,river3 = tempDataSyncS$river3\n                         # \n                         # #river interaction with air temp\n                         # ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         # ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         # ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years &lt;- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n\n\nMisc. objects\n\n\nCode\nTi &lt;- length(unique(tempDataSyncS$year))\nL &lt;- dim(data.random.years)[2]\nW.year &lt;- diag(L)\n\n\nCombine data in list\n\n\nCode\n# combine data in a list\njags.data &lt;- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = as.matrix(data.fixed),\n                  \"X.site\" = as.matrix(data.random),\n                  \"X.year\" = as.matrix(data.random.years),\n                  \"Kfixed\" = dim(data.fixed)[2],\n                  \"Krandom\" = dim(data.random)[2],\n                  \"nsites\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"site\" = as.numeric(tempDataSyncS$riverOrdered)\n                  )\n\n\nParameters to monitor\n\n\nCode\njags.params &lt;- c(\"residuals\",\n            \"deviance\",\n            #\"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.site\",\n            \"B.year\",\n            #\"mu.B.river\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\",\n            \"sigma.B.site\"\n            )\n\n\n\n\n5.2.3 Fit model\n\n\nCode\nfit0_h &lt;- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, \n                        model.file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical.txt\",\n                        n.chains = 10, n.thin = 10, n.burnin = 1000, n.iter = 3000, DIC = TRUE)\nbeep()\n\n\n\n5.2.3.1 Save model output\nSave to file\n\n\nCode\nsaveRDS(fit0_h, \"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n\n\nRead in fitted model object\n\n\nCode\nfit0_h &lt;- readRDS(\"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n\n\nGet MCMC samples and summary\n\n\nCode\ntop_mod &lt;- fit0_h\n# generate MCMC samples and store as an array\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary &lt;- modelout$summary\nhead(param.summary)\n\n\n                  mean         sd       2.5%        25%        50%        75%\nB.0[1]       0.1996561 0.01588663  0.1684552  0.1886198  0.1996409  0.2104592\nB.0[2]       0.1601317 0.01647412  0.1274510  0.1493978  0.1605079  0.1708984\nB.site[1,1] 15.0877438 0.17053466 14.7339107 14.9767446 15.0888867 15.2033860\nB.site[2,1] 14.5154004 0.17175886 14.1691837 14.4035158 14.5196452 14.6311073\nB.site[3,1] 15.6480333 0.17548672 15.3041803 15.5293132 15.6508855 15.7645190\nB.site[4,1] 14.5004781 0.16993161 14.1586293 14.3871769 14.5034804 14.6162630\n                 97.5%     Rhat n.eff\nB.0[1]       0.2306411 1.001439  1900\nB.0[2]       0.1926820 1.002371  1400\nB.site[1,1] 15.4179276 1.000438  2000\nB.site[2,1] 14.8386405 1.001710  1700\nB.site[3,1] 15.9918072 1.000590  2000\nB.site[4,1] 14.8276109 1.001154  2000\n\n\n\n\n5.2.3.2 Check convergence\nAny problematic R-hat values (&gt;1.05)?\n\n\nCode\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] &gt; 1.05]\n\n\nresiduals[7152] \n       1.056715 \n\n\nView traceplots\n\n\nCode\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"B.site\", \"mu.year\",\n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConvert to ggs object\n\n\nCode\nggfit &lt;- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n\n\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      &lt;int&gt; &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n1         1     1 ar1[1]    0.794\n2         2     1 ar1[1]    0.777\n3         3     1 ar1[1]    0.784\n4         4     1 ar1[1]    0.805\n5         5     1 ar1[1]    0.789\n6         6     1 ar1[1]    0.785\n\n\n\n\n\n5.2.4 Goodness of fit\nFormat observed and predicted values\n\n\nCode\nMcmcdat &lt;- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n\n\nBayesian p-value\n\n\nCode\nsum(ppdat_exp &gt; ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n\n\n[1] 0.4987867\n\n\nPP-check\n\n\nCode\nppdat_obs_mean &lt;- apply(ppdat_obs, 2, mean)\nppdat_exp_mean &lt;- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %&gt;% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n\n\n\n\n\n\n\n\n\n\n\n5.2.5 Plot model output\n\n5.2.5.1 Dot plots\nOutput is the same! Good!\nIntercepts\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"int_WB\", \"int_OL\", \"int_OS\", \"int_IS\")), limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nSlopes, temperature effect\n\n\nCode\nggfit %&gt;%\n  filter(Iteration &gt; 125) %&gt;% \n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ModelTemp - Letcher et al. (2016)</span>"
    ]
  },
  {
    "objectID": "ModelTemp-Letcher.html#hierarchical-flow-var.",
    "href": "ModelTemp-Letcher.html#hierarchical-flow-var.",
    "title": "5  ModelTemp - Letcher et al. (2016)",
    "section": "5.3 Hierarchical, flow var.",
    "text": "5.3 Hierarchical, flow var.\nUse the same hierarchical model as above, but allow effect of flow and flow-temp interaction to vary by site.\n\n5.3.1 Organize objects\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: must be TRUE!\n\n\nCode\n# row indices for first observation in each site-year\nfirstObsRows &lt;- unlist(tempDataSyncS %&gt;% \n  group_by(siteYear) %&gt;%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %&gt;%\n  ungroup() %&gt;% \n  select(index))\nnFirstObsRows &lt;- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n\n\n[1] TRUE\n\n\nGet row indices for all other observations\n\n\nCode\nevalRows &lt;- unlist(tempDataSyncS %&gt;% filter(!rowNum %in% firstObsRows) %&gt;% select(rowNum))\nnEvalRows &lt;- length(evalRows)\n\n\nFixed and random effect data\n\n\nCode\ndata.random &lt;- data.frame(intercept = 1,\n                          airTemp = tempDataSyncS$airTemp, \n                          flow =  tempDataSyncS$flowLS,\n                          airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS)\n\ndata.fixed &lt;- data.frame(#intercept = 1\n                         #,airTemp = tempDataSyncS$airTemp \n                         airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         # ,flow =  tempDataSyncS$flowLS\n                         # \n                         # ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         # ,river1 = tempDataSyncS$river1\n                         # ,river2 = tempDataSyncS$river2\n                         # ,river3 = tempDataSyncS$river3\n                         # \n                         # #river interaction with air temp\n                         # ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         # ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         # ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years &lt;- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n\n\nMisc. objects\n\n\nCode\nTi &lt;- length(unique(tempDataSyncS$year))\nL &lt;- dim(data.random.years)[2]\nW.year &lt;- diag(L)\n\n\nCombine data in list\n\n\nCode\n# combine data in a list\njags.data &lt;- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = as.matrix(data.fixed),\n                  \"X.site\" = as.matrix(data.random),\n                  \"X.year\" = as.matrix(data.random.years),\n                  \"Kfixed\" = dim(data.fixed)[2],\n                  \"Krandom\" = dim(data.random)[2],\n                  \"nsites\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"site\" = as.numeric(tempDataSyncS$riverOrdered)\n                  )\n\n\nParameters to monitor\n\n\nCode\njags.params &lt;- c(\"residuals\",\n            \"deviance\",\n            #\"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.site\",\n            \"B.year\",\n            #\"mu.B.river\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\",\n            \"sigma.B.site\"\n            )\n\n\n\n\n5.3.2 Fit model\n\n\nCode\nfit0_h2 &lt;- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, \n                         model.file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical.txt\",\n                         n.chains = 10, n.thin = 10, n.burnin = 1000, n.iter = 3000, DIC = TRUE)\nbeep()\n\n\n\n5.3.2.1 Save model ouput\nSave to file\n\n\nCode\nsaveRDS(fit0_h2, \"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n\n\nRead in fitted model object\n\n\nCode\nfit0_h2 &lt;- readRDS(\"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n\n\nGet MCMC samples and summary\n\n\nCode\ntop_mod &lt;- fit0_h2\n# generate MCMC samples and store as an array\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary &lt;- modelout$summary\nhead(param.summary)\n\n\n                  mean         sd       2.5%        25%        50%        75%\nB.0[1]       0.1996561 0.01588663  0.1684552  0.1886198  0.1996409  0.2104592\nB.0[2]       0.1601317 0.01647412  0.1274510  0.1493978  0.1605079  0.1708984\nB.site[1,1] 15.0877438 0.17053466 14.7339107 14.9767446 15.0888867 15.2033860\nB.site[2,1] 14.5154004 0.17175886 14.1691837 14.4035158 14.5196452 14.6311073\nB.site[3,1] 15.6480333 0.17548672 15.3041803 15.5293132 15.6508855 15.7645190\nB.site[4,1] 14.5004781 0.16993161 14.1586293 14.3871769 14.5034804 14.6162630\n                 97.5%     Rhat n.eff\nB.0[1]       0.2306411 1.001439  1900\nB.0[2]       0.1926820 1.002371  1400\nB.site[1,1] 15.4179276 1.000438  2000\nB.site[2,1] 14.8386405 1.001710  1700\nB.site[3,1] 15.9918072 1.000590  2000\nB.site[4,1] 14.8276109 1.001154  2000\n\n\n\n\n5.3.2.2 Check convergence\nAny problematic R-hat values (&gt;1.05)?\n\n\nCode\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] &gt; 1.05]\n\n\nresiduals[7152] \n       1.056715 \n\n\nView traceplots\n\n\nCode\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"B.site\", \"mu.year\", \n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConvert to ggs object\n\n\nCode\nggfit &lt;- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n\n\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      &lt;int&gt; &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n1         1     1 ar1[1]    0.794\n2         2     1 ar1[1]    0.777\n3         3     1 ar1[1]    0.784\n4         4     1 ar1[1]    0.805\n5         5     1 ar1[1]    0.789\n6         6     1 ar1[1]    0.785\n\n\n\n\n\n5.3.3 Goodness of fit\nFormat observed and predicted values\n\n\nCode\nMcmcdat &lt;- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n\n\nBayesian p-value\n\n\nCode\nsum(ppdat_exp &gt; ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n\n\n[1] 0.4987867\n\n\nPP-check\n\n\nCode\nppdat_obs_mean &lt;- apply(ppdat_obs, 2, mean)\nppdat_exp_mean &lt;- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %&gt;% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n\n\n\n\n\n\n\n\n\n\n\n5.3.4 Plot model output\n\n5.3.4.1 Dot plots\n\nSite interceptsSite slopes - tempSite slopes - flowSite slopes - temp x flowAutoregressive termsWithin year trends\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"int_WB\", \"int_OL\", \"int_OS\", \"int_IS\")), limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, flow effect\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, temp-flow interaction\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit %&gt;% filter(Parameter %in% grep(\"ar1\", unique(ggfit$Parameter), value = TRUE)) %&gt;%\n                  mutate(Parameter = factor(Parameter, levels = c(\"ar1Mean\", \"ar1SD\", \"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"ar1Mean\", \"ar1SD\", \"ar1[WB]\", \"ar1[OL]\", \"ar1[OS]\", \"ar1[IL]\")), limits = rev) + theme_bw() + xlim(0,1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit, family = \"mu.year\", sort = FALSE) + scale_y_discrete(labels = rev(c(\"Intercept\", \"Linear\", \"Quadratic\", \"Cubic\")), limits = rev) + theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3.4.2 Marginal efffects\nMarginal effects of air temperature x flow interaction, not accounting for lagged temperature effects, temporal autocorrelation,\n\nWest BrookJimmyMitchellObear\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WEST BROOK\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.site[1,1]\",1] + param.summary[\"B.site[1,2]\",1]*pred_df$x_temp + param.summary[\"B.site[1,3]\",1]*pred_df$x_flow + param.summary[\"B.site[1,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\") #+ \n  #geom_point(data = tempDataSyncS %&gt;% filter(riverOrdered == myriv), aes(x = airTemp, y = flowLS, color = temp)) +\n  #scale_color_distiller(palette = \"Spectral\", limits = c(0,23)) \n# combine\negg::ggarrange(p1, p2, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WB JIMMY\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.site[2,1]\",1] + param.summary[\"B.site[2,2]\",1]*pred_df$x_temp + param.summary[\"B.site[2,3]\",1]*pred_df$x_flow + param.summary[\"B.site[2,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WB MITCHELL\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.site[3,1]\",1] + param.summary[\"B.site[3,2]\",1]*pred_df$x_temp + param.summary[\"B.site[3,3]\",1]*pred_df$x_flow + param.summary[\"B.site[3,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# set up\nnp &lt;- 100\nmyriv &lt;- \"WB OBEAR\"\nx_temp &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow &lt;- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df &lt;- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred &lt;- param.summary[\"B.site[4,1]\",1] + param.summary[\"B.site[4,2]\",1]*pred_df$x_temp + param.summary[\"B.site[4,3]\",1]*pred_df$x_flow + param.summary[\"B.site[4,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>ModelTemp - Letcher et al. (2016)</span>"
    ]
  },
  {
    "objectID": "ModelTemp-EcoDrought.html",
    "href": "ModelTemp-EcoDrought.html",
    "title": "6  ModelTemp - EcoDrought",
    "section": "",
    "text": "6.1 Load data\nPurpose: fit hierarchical stream temp model to EcoDrought data.\nNotes:\nAlso set flow = NA to 0. Probably should change this to latent variable in model, especially when expanding to sites where flow data is more rare\nCode\ndat &lt;- read_csv(\"data/EcoDrought_FlowTempData_formatted.csv\") %&gt;% \n  filter(basin == \"Snake River\") %&gt;%\n  mutate(rowNum = 1:nrow(.),\n         site_code = as.numeric(as.factor(site_name)),\n         year_code = year - min(year) + 1) %&gt;%\n  filter(!is.na(tempc_mean)) %&gt;%\n  mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log))\ndat\n\n\n# A tibble: 12,184 × 38\n   site_name basin   lat  long elev_ft area_sqmi date        yday  year siteYear\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   \n 1 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-03   184  2018 Grizzly…\n 2 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-04   185  2018 Grizzly…\n 3 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-05   186  2018 Grizzly…\n 4 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-06   187  2018 Grizzly…\n 5 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-07   188  2018 Grizzly…\n 6 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-08   189  2018 Grizzly…\n 7 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-09   190  2018 Grizzly…\n 8 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-10   191  2018 Grizzly…\n 9 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-11   192  2018 Grizzly…\n10 Grizzly … Snak…  43.8 -110.   8340.      12.7 2018-07-12   193  2018 Grizzly…\n# ℹ 12,174 more rows\n# ℹ 28 more variables: tempc_mean &lt;dbl&gt;, tempc_min &lt;dbl&gt;, tempc_max &lt;dbl&gt;,\n#   flow_mean &lt;dbl&gt;, Yield_mm &lt;dbl&gt;, air_temp_mean &lt;dbl&gt;, precip_mmday &lt;dbl&gt;,\n#   swe_kgm2 &lt;dbl&gt;, daylength_sec &lt;dbl&gt;, shortrad_wm2 &lt;dbl&gt;,\n#   Yield_mm_log &lt;dbl&gt;, flow_mean_log &lt;dbl&gt;, z_Yield_mm_log &lt;dbl&gt;,\n#   z_air_temp_mean &lt;dbl&gt;, air_temp_mean_lag1 &lt;dbl&gt;, air_temp_mean_lag2 &lt;dbl&gt;,\n#   z_air_temp_mean_lag1 &lt;dbl&gt;, z_air_temp_mean_lag2 &lt;dbl&gt;, …\nDrop sites without any flow or water temp observations and re-do site and year codes\nCode\ndropsites &lt;- unlist(dat %&gt;% \n  group_by(site_name) %&gt;% \n  summarize(numt = sum(!is.na(tempc_mean)), \n            numf = sum(!is.na(z_Yield_mm_log))) %&gt;% \n  ungroup() %&gt;%\n  filter(numt == 0 | numf == 0) %&gt;%\n  select(site_name))\n\ndat &lt;- dat %&gt;% \n  filter(!site_name %in% dropsites) %&gt;%\n  mutate(rowNum = 1:nrow(.),\n         site_code = as.numeric(as.factor(site_name)),\n         year_code = year - min(year) + 1)\nView site codes\nCode\ndat %&gt;% group_by(site_name) %&gt;% summarize(site_code = unique(site_code)) %&gt;% ungroup()\n\n\n# A tibble: 11 × 2\n   site_name                   site_code\n   &lt;chr&gt;                           &lt;dbl&gt;\n 1 Grizzly Creek                       1\n 2 Grouse Creek                        2\n 3 Leidy Creek Mouth                   3\n 4 Leidy Creek Upper                   4\n 5 NF Spread Creek Lower               5\n 6 NF Spread Creek Upper               6\n 7 Pacific Creek at Moran NWIS         7\n 8 Rock Creek                          8\n 9 SF Spread Creek Lower               9\n10 SF Spread Creek Upper              10\n11 Spread Creek Dam                   11\nAny missing data? Need to put a prior on flow\nCode\nany(is.na(dat$z_air_temp_mean))\n\n\n[1] FALSE\n\n\nCode\nany(is.na(dat$z_air_temp_mean_lag1))\n\n\n[1] FALSE\n\n\nCode\nany(is.na(dat$z_air_temp_mean_lag2))\n\n\n[1] FALSE\n\n\nCode\nany(is.na(dat$z_Yield_mm_log))\n\n\n[1] FALSE\nView data",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ModelTemp - EcoDrought</span>"
    ]
  },
  {
    "objectID": "ModelTemp-EcoDrought.html#load-data",
    "href": "ModelTemp-EcoDrought.html#load-data",
    "title": "6  ModelTemp - EcoDrought",
    "section": "",
    "text": "DistributionsAir tempWater tempFlow (log and std)Tw ~ Ta + FTa ~ F\n\n\n\n\nCode\nggpubr::ggarrange(dat %&gt;% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw(),\n                  dat %&gt;% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw(),\n                  dat %&gt;% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw(),\n                  common.legend = TRUE, legend = \"right\", ncol = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(dat, aes(yday, z_air_temp_mean))+\n  geom_line(aes(color = factor(year))) +\n  facet_grid(year ~ site_name)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(dat, aes(yday, tempc_mean))+\n  geom_line(aes(color = factor(year)))+\n  facet_grid(year ~ site_name)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(dat, aes(yday, z_Yield_mm_log))+\n  geom_line(aes(color = factor(year)))+\n  facet_grid(year ~ site_name)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndat %&gt;% ggplot(aes(x = z_air_temp_mean, y = tempc_mean, color = z_Yield_mm_log)) + geom_point(size = 0.2) + facet_wrap(~site_name) + theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndat %&gt;% ggplot(aes(x = z_air_temp_mean, y = z_Yield_mm_log, colour = tempc_mean)) + geom_point(size = 0.2) + facet_wrap(~site_name) + theme_bw() + ggpubr::stat_cor()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ModelTemp - EcoDrought</span>"
    ]
  },
  {
    "objectID": "ModelTemp-EcoDrought.html#specify-jags-model",
    "href": "ModelTemp-EcoDrought.html#specify-jags-model",
    "title": "6  ModelTemp - EcoDrought",
    "section": "6.2 Specify JAGS model",
    "text": "6.2 Specify JAGS model\nSpecify hierarchical model following Letcher et al. (2016). MODIFIED:\n\nadd prior on covariates to deal with missing values\ncalculate Bayesian R^2 and RMSE\nremove the year trends (same as for Hocking et al 2018)\nadd catchment covariate effects on random effects parameters\n\n\n\nCode\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] &lt;- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] &lt;- inprod(B.0[], X.0[firstObsRows[i], ]) + \n                                inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) + \n                                inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n      #X.site[firstObsRows[i], ] ~ dnorm(0, pow(1, -2))\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] &lt;- trend[evalRows[i]] + ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]] &lt;- inprod(B.0[], X.0[evalRows[i], ]) + \n                            inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) + \n                            inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      #X.site[evalRows[i], ] ~ dnorm(0, pow(1, -2))\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nsites){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD, -2)) T(-1,1)       \n    }\n    ar1Mean ~ dunif(-1, 1) \n    ar1SD ~ dunif(0, 2)\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:Kfixed) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n    # random effect coefficients (by site)\n    for (k in 1:Krandom) {\n      sigma.B.site[k] ~ dunif(0, 100)\n      alpha.0[k] ~ dnorm(0, pow(10, -2))\n      alpha.1[k] ~ dnorm(0, pow(10, -2))\n      for (i in 1:nsites) {\n        B.site[i,k] ~ dnorm(mu.B.site[i,k], pow(sigma.B.site[k], -2))\n        mu.B.site[i,k] &lt;- alpha.0[k] + alpha.1[k] * area[i]\n      }\n    }\n    \n    # YEAR EFFECTS\n    for(l in 1:L) {\n      sigma.b.year[l] ~ dunif(0, 100)\n      for(t in 1:Ti){\n        B.year[t, l] ~ dnorm(0, pow(sigma.b.year[l], -2))\n        }\n      }\n    \n    # # YEAR EFFECTS\n    # # Priors for random effects of year\n    # for (t in 1:Ti) { # Ti years\n    #   B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n    #   }\n    #   \n    # mu.year[1] &lt;- 0\n    # \n    # for (l in 2:L) {\n    #   mu.year[l] ~ dnorm(0, 0.0001)\n    #   }\n    #   \n    # # Prior on multivariate normal std deviation\n    # tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    # df.year &lt;- L + 1\n    # sigma.B.year[1:L, 1:L] &lt;- inverse(tau.B.year[ , ])\n    # for (l in 1:L) {\n    #   for (l.prime in 1:L) {\n    #     rho.B.year[l, l.prime] &lt;- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n    #     }\n    #   sigma.b.year[l] &lt;- sqrt(sigma.B.year[l, l])\n    # }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    #residuals[1] &lt;- 0 # hold the place. Not sure if this is necessary...\n    for (i in 1:n) {\n      residuals[i] &lt;- temp[i] - stream.mu[i]\n    }\n    \n    # variance of model predictions (fixed + random effects)\n    var_fit &lt;- (sd(stream.mu))^2\n\n    # residual variance\n    var_res &lt;- (sd(residuals))^2\n\n    # calculate Bayesian R^2\n    R2 &lt;- var_fit / (var_fit + var_res)\n\n    # Root mean squared error\n    rmse &lt;- sqrt(mean(residuals[]^2))\n    \n    }\", file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical_modified.txt\")\n\n\nSpecify model following Letcher et al. (2016). MODIFIED\n\n\nCode\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:n){\n      temp[i] ~ dnorm(stream.mu[i], pow(sigma, -2)) \n      stream.mu[i] &lt;- trend[i]\n      trend[i] &lt;- inprod(B.site[site[i], ], X.site[i, ])\n      \n      #flow[firstObsRows[i]] ~ dnorm(0, pow(10, -2))\n      }\n    \n    # for (i in 1:nFirstObsRows){\n    #   temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n    #   stream.mu[firstObsRows[i]] &lt;- trend[firstObsRows[i]]\n    #   trend[firstObsRows[i]] &lt;- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) #+ inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n    #   \n    #   #flow[firstObsRows[i]] ~ dnorm(0, pow(10, -2))\n    #   }\n    # \n    # # Days with an observation on the previous dat (all days following the first day)\n    # # Includes autoregressive term (ar1)\n    # \n    # for (i in 1:nEvalRows){ \n    #   temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n    #   stream.mu[evalRows[i]] &lt;- trend[evalRows[i]] + ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n    #   trend[evalRows[i]]  &lt;- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) #+ inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n    #   \n    #   #flow[evalRows[i]] ~ dnorm(0, pow(10, -2))\n    #   }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # # ar1, hierarchical by site\n    # for (i in 1:nSite){\n    #   ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    # }\n    # ar1Mean ~ dunif( -1,1 ) \n    # ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:nFixedCovs) {\n      B.0[k] ~ dnorm(0, pow(100, -2))\n      }\n    \n    \n    # SITE EFFECTS\n    for (k in 1:nRandCovs) {\n      for (i in 1:nSite) {\n        B.site[i,k] ~ dnorm(0, pow(10, -2))   \n      }\n    }\n    \n      \n    # # YEAR EFFECTS\n    # # Priors for random effects of year\n    # for (t in 1:Ti) { # Ti years\n    #   B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n    #   }\n    # \n    # mu.year[1] &lt;- 0\n    # \n    # for (l in 2:L) {\n    #   mu.year[l] ~ dnorm(0, 0.0001)\n    #   }\n    # \n    # # Prior on multivariate normal std deviation\n    # tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    # df.year &lt;- L + 1\n    # sigma.B.year[1:L, 1:L] &lt;- inverse(tau.B.year[ , ])\n    # for (l in 1:L) {\n    #   for (l.prime in 1:L) {\n    #     rho.B.year[l, l.prime] &lt;- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n    #     }\n    #   sigma.b.year[l] &lt;- sqrt(sigma.B.year[l, l])\n    # }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    \n    # residuals\n    # residuals[1] &lt;- 0 # hold the place. Not sure if this is necessary...\n    for (i in 1:n) {\n      residuals[i] &lt;- temp[i] - stream.mu[i]\n    }\n    \n    # variance of model predictions (fixed + random effects)\n    var_fit &lt;- (sd(stream.mu))^2 \n\n    # residual variance\n    var_res &lt;- (sd(residuals))^2\n\n    # calculate Bayesian R^2\n    R2 &lt;- var_fit / (var_fit + var_res)\n    \n    # Root mean squared error\n    rmse &lt;- sqrt(mean(residuals[]^2))\n    \n    }\", file = \"DailyTempModelJAGS_mod.txt\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ModelTemp - EcoDrought</span>"
    ]
  },
  {
    "objectID": "ModelTemp-EcoDrought.html#organize-objects",
    "href": "ModelTemp-EcoDrought.html#organize-objects",
    "title": "6  ModelTemp - EcoDrought",
    "section": "6.3 Organize objects",
    "text": "6.3 Organize objects\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: must be TRUE!\n\n\nCode\n# row indices for first observation in each site-year\nfirstObsRows &lt;- unlist(dat %&gt;% \n  group_by(siteYear) %&gt;%\n  summarize(index = rowNum[min(which(!is.na(tempc_mean)))]) %&gt;%\n  ungroup() %&gt;% \n  select(index))\nnFirstObsRows &lt;- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(dat$siteYear))\n\n\n[1] TRUE\n\n\nGet row indices for all other observations\n\n\nCode\nevalRows &lt;- unlist(dat %&gt;% filter(!rowNum %in% firstObsRows) %&gt;% select(rowNum))\nnEvalRows &lt;- length(evalRows)\n\n\nFixed and random effect data\n\n\nCode\ndata.random &lt;- data.frame(intercept = 1,\n                          airTemp = dat$z_air_temp_mean, \n                          flow =  dat$z_Yield_mm_log,\n                          airFlow = dat$z_air_temp_mean * dat$z_Yield_mm_log)\n\ndata.fixed &lt;- data.frame(airTempLag1 = dat$z_air_temp_mean_lag1,\n                         airTempLag2 = dat$z_air_temp_mean_lag2) \n\ndata.random.years &lt;- data.frame(intercept.year = rep(1, length.out = dim(data.fixed)[1])#, \n                                #dOY  = dat$yday, \n                                #dOY2 = dat$yday^2,\n                                #dOY3 = dat$yday^3\n                                )\n\ndata.random.covs &lt;- log(dat %&gt;% group_by(site_code) %&gt;% summarize(area_sqmi = unique(area_sqmi)) %&gt;% ungroup() %&gt;% arrange(site_code) %&gt;% pull(area_sqmi))\n\n\nMisc. objects\n\n\nCode\nTi &lt;- length(unique(dat$year))\nL &lt;- dim(data.random.years)[2]\nW.year &lt;- diag(L)\n\n\nCombine data in list\n\n\nCode\n# combine data in a list\njags.data &lt;- list(\"temp\" = dat$tempc_mean,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = as.matrix(data.fixed),\n                  \"X.site\" = as.matrix(data.random),\n                  \"X.year\" = as.matrix(data.random.years),\n                  \"Kfixed\" = dim(data.fixed)[2],\n                  \"Krandom\" = dim(data.random)[2],\n                  \"nsites\" = length(unique(dat$site_name)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(dat)[1],\n                  \"year\" = dat$year_code,\n                  \"site\" = dat$site_code,\n                  \"area\" = data.random.covs\n                  )\n\n\nParameters to monitor\n\n\nCode\njags.params &lt;- c(\"residuals\",\n                 \"deviance\",\n                 \"sigma\",\n                 \"B.0\",\n                 \"B.site\",\n                 \"B.year\",\n                 \"rho.B.year\",\n                 \"mu.year\",\n                 \"sigma.b.year\",\n                 \"stream.mu\",\n                 \"ar1\" ,\n                 \"ar1Mean\",\n                 \"ar1SD\",\n                 \"temp\",\n                 \"sigma.B.site\",\n                 \"R2\",\n                 \"rmse\",\n                 \"alpha.0\",\n                 \"alpha.1\"\n                 )",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ModelTemp - EcoDrought</span>"
    ]
  },
  {
    "objectID": "ModelTemp-EcoDrought.html#fit-model",
    "href": "ModelTemp-EcoDrought.html#fit-model",
    "title": "6  ModelTemp - EcoDrought",
    "section": "6.4 Fit model",
    "text": "6.4 Fit model\n\n\nCode\nfit_ed &lt;- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, \n                        model.file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical_modified.txt\",\n                        n.chains = 10, n.thin = 10, n.burnin = 1000, n.iter = 3000, DIC = TRUE)\n\n\n\n6.4.0.1 Save model ouput\nSave to file\n\n\nCode\nsaveRDS(fit_ed, \"Model objects/LetcherTempModel_EcoDrought_hierarchical.RDS\")\n\n\nRead in fitted model object\n\n\nCode\nfit_ed &lt;- readRDS(\"Model objects/LetcherTempModel_EcoDrought_hierarchical.RDS\")\n\n\nGet MCMC samples and summary\n\n\nCode\ntop_mod &lt;- fit_ed\n# generate MCMC samples and store as an array\nmodelout &lt;- top_mod$BUGSoutput\nMcmcList &lt;- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat &lt;- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary &lt;- modelout$summary\nhead(param.summary)\n\n\n                  mean         sd       2.5%        25%        50%       75%\nB.0[1]      2.15300662 0.03019149 2.09367575 2.13210168 2.15254591 2.1735374\nB.0[2]      0.09596838 0.03088395 0.03609678 0.07543631 0.09507888 0.1169487\nB.site[1,1] 3.31907307 0.42373653 2.47278936 3.03330096 3.33164372 3.6125047\nB.site[2,1] 4.67201490 0.27201792 4.12197692 4.49187169 4.67167411 4.8533811\nB.site[3,1] 3.73162935 0.26306430 3.21714881 3.56051475 3.73538781 3.9036637\nB.site[4,1] 7.72579212 0.29002571 7.15906884 7.53508128 7.72881227 7.9176183\n                97.5%      Rhat n.eff\nB.0[1]      2.2120172 1.0000096  2000\nB.0[2]      0.1563257 1.0010937  2000\nB.site[1,1] 4.1330942 1.0009200  2000\nB.site[2,1] 5.2124136 0.9998663  2000\nB.site[3,1] 4.2497683 1.0017038  1700\nB.site[4,1] 8.2921851 0.9997870  2000\n\n\n\n\n6.4.0.2 Check convergence\nAny problematic R-hat values (&gt;1.05)?\n\n\nCode\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] &gt; 1.05]\n\n\nnamed numeric(0)\n\n\nView traceplots\n\n\nCode\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"B.site\", \"B.year\", \n                     \"ar1\", \"alpha.0\", \"alpha.1\",\n                     \"sigma\"), pdf = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConvert to ggs object\n\n\nCode\nggfit &lt;- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n\n\n# A tibble: 6 × 4\n  Iteration Chain Parameter  value\n      &lt;int&gt; &lt;int&gt; &lt;fct&gt;      &lt;dbl&gt;\n1         1     1 alpha.0[1]  4.77\n2         2     1 alpha.0[1]  4.89\n3         3     1 alpha.0[1]  5.72\n4         4     1 alpha.0[1]  5.16\n5         5     1 alpha.0[1]  4.43\n6         6     1 alpha.0[1]  1.15\n\n\n\n\n6.4.1 Goodness of fit\nFormat observed and predicted values\n\n\nCode\nMcmcdat &lt;- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs &lt;- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n\n\nBayesian p-value\n\n\nCode\nsum(ppdat_exp &gt; ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n\n\n[1] 0.5128413\n\n\nPP-check, global\n\n\nCode\nppdat_obs_mean &lt;- apply(ppdat_obs, 2, mean)\nppdat_exp_mean &lt;- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %&gt;% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n\n\n\n\n\n\n\n\n\nPP-check by river and year\n\n\nCode\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean, site = dat$site_name, year = dat$year) %&gt;% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\") +\n  facet_grid(year ~ site)\n\n\n\n\n\n\n\n\n\nRMSE\n\n\nCode\nmean(unlist(ggfit %&gt;% filter(Parameter == \"rmse\") %&gt;% select(value)))\n\n\n[1] 0.6298153\n\n\nCode\nggs_density(ggfit, \"rmse\") + theme_bw()\n\n\n\n\n\n\n\n\n\nR-squared\n\n\nCode\nmean(unlist(ggfit %&gt;% filter(Parameter == \"R2\") %&gt;% select(value)))\n\n\n[1] 0.9705148\n\n\nCode\nggs_density(ggfit, \"R2\") + theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ModelTemp - EcoDrought</span>"
    ]
  },
  {
    "objectID": "ModelTemp-EcoDrought.html#plot-model-output",
    "href": "ModelTemp-EcoDrought.html#plot-model-output",
    "title": "6  ModelTemp - EcoDrought",
    "section": "6.5 Plot model output",
    "text": "6.5 Plot model output\n\n\nCode\nmyparams &lt;- unique(ggfit$Parameter)\nmysites &lt;- c(dat %&gt;% group_by(site_name) %&gt;% summarize(site_code = unique(site_code)) %&gt;% ungroup() %&gt;% select(site_name))\n\n\n\n6.5.1 Dot plots\n\nFixed effectsSite interceptsSite slopes - tempSite slopes - flowSite slopes - temp x flowAutoregressive termsYear effects (offsets)Catchment area effects\n\n\n\n\nCode\nggs_caterpillar(ggfit, family = \"B.0\", sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"Air temp, lag 1\", \"Air temp, lag 2\")), limits = rev) + \n  ylab(\"Fixed effects\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\", \"B.site[5,1]\",\n                          \"B.site[6,1]\", \"B.site[7,1]\", \"B.site[8,1]\", \"B.site[9,1]\", \"B.site[10,1]\", \"B.site[11,1]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\", \"B.site[5,1]\",\n                                                  \"B.site[6,1]\", \"B.site[7,1]\", \"B.site[8,1]\", \"B.site[9,1]\", \"B.site[10,1]\", \"B.site[11,1]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(mysites$site_name), limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\",\n                          \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\",\n                          \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(mysites$site_name), limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\",\n                          \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\",\n                          \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(mysites$site_name), limits = rev) + \n  ylab(\"Slopes, flow effect\") +\n  theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\", \"B.site[5,4]\",\n                          \"B.site[6,4]\", \"B.site[7,4]\", \"B.site[8,4]\", \"B.site[9,4]\", \"B.site[10,4]\", \"B.site[11,4]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\", \"B.site[5,4]\",\n                          \"B.site[6,4]\", \"B.site[7,4]\", \"B.site[8,4]\", \"B.site[9,4]\", \"B.site[10,4]\", \"B.site[11,4]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(mysites$site_name), limits = rev) + \n  ylab(\"Slopes, temp-flow interaction\") +\n  theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit %&gt;% filter(Parameter %in% c(\"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\", \"ar1[5]\",\n                          \"ar1[6]\", \"ar1[7]\", \"ar1[8]\", \"ar1[9]\", \"ar1[10]\", \"ar1[11]\")) %&gt;%\n                  mutate(Parameter = factor(Parameter, levels = c(\"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\", \"ar1[5]\",\n                          \"ar1[6]\", \"ar1[7]\", \"ar1[8]\", \"ar1[9]\", \"ar1[10]\", \"ar1[11]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(mysites$site_name), limits = rev) + theme_bw() \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.year[1,1]\", \"B.year[2,1]\", \"B.year[3,1]\", \"B.year[4,1]\", \"B.year[5,1]\",\n                          \"B.year[6,1]\", \"B.year[7,1]\", \"B.year[8,1]\", \"B.year[9,1]\", \"B.year[10,1]\", \n                          \"B.year[11,1]\", \"B.year[12,1]\", \"B.year[13,1]\", \"B.year[14,1]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.year[1,1]\", \"B.year[2,1]\", \"B.year[3,1]\", \"B.year[4,1]\", \"B.year[5,1]\",\n                          \"B.year[6,1]\", \"B.year[7,1]\", \"B.year[8,1]\", \"B.year[9,1]\", \"B.year[10,1]\", \n                          \"B.year[11,1]\", \"B.year[12,1]\", \"B.year[13,1]\", \"B.year[14,1]\"))) %&gt;%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(sort(unique(dat$year))), limits = rev) + \n  ylab(\"Year effects, offsets to intercepts\") +\n  theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggs_caterpillar(ggfit, family = \"alpha.1\", sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"Intercepts\", \"Temp eff.\", \"Flow eff.\", \"Temp-Flow int.\")), limits = rev) + \n  ylab(\"Catchment size effects\") +\n  theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.5.2 Marginal efffects\n\n6.5.2.1 Temp-flow by site\nSite names and codes\n\n\nCode\nsitecodes &lt;- dat %&gt;% group_by(site_name) %&gt;% summarize(site_code = unique(site_code)) %&gt;% ungroup()\nsitecodes\n\n\n# A tibble: 11 × 2\n   site_name                   site_code\n   &lt;chr&gt;                           &lt;dbl&gt;\n 1 Grizzly Creek                       1\n 2 Grouse Creek                        2\n 3 Leidy Creek Mouth                   3\n 4 Leidy Creek Upper                   4\n 5 NF Spread Creek Lower               5\n 6 NF Spread Creek Upper               6\n 7 Pacific Creek at Moran NWIS         7\n 8 Rock Creek                          8\n 9 SF Spread Creek Lower               9\n10 SF Spread Creek Upper              10\n11 Spread Creek Dam                   11\n\n\nPlotting function\n\n\nCode\nmargplot &lt;- function(code) {\n  np &lt;- 100\n  myriv &lt;- sitecodes$site_name[code]\n  x_temp &lt;- seq(from = min(dat$z_air_temp_mean[dat$site_name == myriv]),\n                to = max(dat$z_air_temp_mean[dat$site_name == myriv]),\n                length.out = np)\n  x_flow &lt;- seq(from = min(dat$z_Yield_mm_log[dat$site_name == myriv]),\n                to = max(dat$z_Yield_mm_log[dat$site_name == myriv]),\n                length.out = np)\n  pred_df &lt;- expand_grid(x_temp, x_flow)\n\n  # predict from model\n  pred_df$pred &lt;- param.summary[paste(\"B.site[\", code, \",1]\", sep = \"\"),1] + param.summary[paste(\"B.site[\", code, \",2]\", sep = \"\"),1]*pred_df$x_temp + param.summary[paste(\"B.site[\", code, \",3]\", sep = \"\"),1]*pred_df$x_flow + param.summary[paste(\"B.site[\", code, \",4]\", sep = \"\"),1]*pred_df$x_temp*pred_df$x_flow\n\n  # lines \n  p1 &lt;- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n    geom_line() +\n    scale_color_distiller(palette = \"BrBG\", direction = +1) +\n    theme_bw() + theme(panel.grid = element_blank()) +\n    labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(0,20) #+\n    #geom_point(dat %&gt;% filter(site_name == myriv), mapping = aes(x = z_air_temp_mean, y = tempc_mean, group = NA), color = \"black\", size = 0.2, shape = 16) \n # heatmap\n  p2 &lt;- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n    geom_tile(aes(fill = pred)) +\n    scale_fill_distiller(palette = \"Spectral\", limits = c(0,20)) +\n    theme_bw() + theme(panel.grid = element_blank()) +\n    scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n    labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\") #+ \n    #geom_point(data = dat %&gt;% filter(site_name == myriv), aes(x = z_air_temp_mean, y = z_Yield_mm_log, color = tempc_mean)) +\n    #scale_color_distiller(palette = \"Spectral\", limits = c(0,20)) \n  # combine\n  egg::ggarrange(p1, p2, nrow = 1)\n}\n\n\nInterpretation of these plots (specifically, stream temperature outcome) is complicated by the ~large effects of lagged air temperature variables and temporal autocorrelation\n\nGrizzly CreekGrouse CreekLeidy Creek MouthNF Spread Creek LowerNF Spread Creek UpperPacific CreekRock CreekSF Spread Creek LowerSF Spread Creek UpperSpread Creek Dam\n\n\n\n\nCode\nmargplot(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(3)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(6)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(7)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(8)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(9)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(10)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nmargplot(11)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.5.2.2 Site-level effects by covs\nAre temp and flow effects correlated? Yes…do we need to model this correlation?\n\n\nCode\nggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\",\n                          \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\",\n                          \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\"))) %&gt;%\n  group_by(Parameter) %&gt;% \n  summarize(tempeff = mean(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(site_name = mysites$site_name) %&gt;%\n  select(-Parameter) %&gt;%\n  left_join(ggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\",\n                          \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\",\n                          \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\"))) %&gt;%\n  group_by(Parameter) %&gt;% \n  summarize(floweff = mean(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(site_name = mysites$site_name) %&gt;%\n    select(-Parameter)) %&gt;%\n  ggplot(aes(x = tempeff, y = floweff)) + geom_point() +\n  geom_smooth(method = \"lm\") +\n  xlab(\"Temperature effect\") + ylab(\"Flow effect\") +\n  theme_bw() + ggpubr::stat_cor(label.y.npc = \"bottom\")\n\n\n\n\n\n\n\n\n\nNote that for these 11 sites, catchment area and elevation are correlated\n\n\nCode\ndat %&gt;% group_by(site_name) %&gt;% summarize(area_sqmi = unique(area_sqmi), elev_ft = unique(elev_ft)) %&gt;% ggplot(aes(x = elev_ft, y = log(area_sqmi))) + geom_point() + geom_smooth(method = \"lm\") + theme_bw() + ggpubr::stat_cor(label.x.npc = \"center\")\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp.pars &lt;- c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\", \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\")\nflow.pars &lt;- c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\", \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\")\nint.pars &lt;- c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\", \"B.site[5,4]\", \"B.site[6,4]\", \"B.site[7,4]\", \"B.site[8,4]\", \"B.site[9,4]\", \"B.site[10,4]\", \"B.site[11,4]\")\n\n# get mean and 95% credible intervals for random effect parameters\nmytib &lt;- sitecodes %&gt;%\n  mutate(temp.mean = param.summary[temp.pars,1],\n         temp.low = param.summary[temp.pars,3],\n         temp.high = param.summary[temp.pars,7],\n         flow.mean = param.summary[flow.pars,1],\n         flow.low = param.summary[flow.pars,3],\n         flow.high = param.summary[flow.pars,7],\n         int.mean = param.summary[int.pars,1],\n         int.low = param.summary[int.pars,3],\n         int.high = param.summary[int.pars,7],\n         area_log = jags.data$area\n         )\nmytib\n\n\n# A tibble: 11 × 12\n   site_name site_code temp.mean temp.low temp.high flow.mean flow.low flow.high\n   &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Grizzly …         1      1.63     1.41      1.84    0.283  -0.00646    0.601 \n 2 Grouse C…         2      1.63     1.47      1.78    0.182   0.00721    0.353 \n 3 Leidy Cr…         3      1.47     1.33      1.62   -0.0494 -0.174      0.0755\n 4 Leidy Cr…         4      1.19     1.04      1.33    0.394  -0.188      1.03  \n 5 NF Sprea…         5      1.69     1.53      1.84   -0.0936 -0.202      0.0192\n 6 NF Sprea…         6      1.66     1.43      1.92    0.373   0.169      0.596 \n 7 Pacific …         7      2.19     1.89      2.47   -0.510  -0.773     -0.257 \n 8 Rock Cre…         8      1.35     1.19      1.51    0.271   0.110      0.426 \n 9 SF Sprea…         9      1.88     1.71      2.03   -0.0220 -0.149      0.118 \n10 SF Sprea…        10      1.96     1.74      2.20    0.0991 -0.117      0.341 \n11 Spread C…        11      2.27     2.08      2.46   -0.454  -0.650     -0.267 \n# ℹ 4 more variables: int.mean &lt;dbl&gt;, int.low &lt;dbl&gt;, int.high &lt;dbl&gt;,\n#   area_log &lt;dbl&gt;\n\n\nCode\nnsims &lt;- 100\n\n\nTemperature effect: stream temperature sensitivity to air temperature is greater in larger catchments (presumably b/c hillslope/groundwater controls on temp are proportionally much weaker). Also, in larger catchments, water has been exposed to air for longer and thus has had more time to equilibrate with local environmental conditions. But interestingly, no effect of mean summer yield, a proxy for relative groundwater contributions to stream flow.\n\n\nCode\nxseq &lt;- seq(from = min(jags.data$area), to = max(jags.data$area), length.out = nsims)\npreds &lt;- matrix(data = NA, nrow = dim(Mcmcdat)[1], ncol = nsims)\n\nfor (j in 1:dim(Mcmcdat)[1]) {\n  preds[j,] &lt;- unlist(Mcmcdat[j,\"alpha.0[2]\"]) + unlist(Mcmcdat[j,\"alpha.1[2]\"])*xseq\n}\nymean &lt;- apply(preds, 2, mean)\nylow &lt;- apply(preds, 2, quantile, probs = 0.025)\nyhigh &lt;- apply(preds, 2, quantile, probs = 0.975)\n\nggplot() +\n  geom_ribbon(aes(x = xseq, ymin = ylow, ymax = yhigh), fill = \"grey\") +\n  geom_line(aes(x = xseq, y = ymean), color = \"black\", linewidth = 1, lineend = \"round\") +\n  geom_errorbar(aes(x = mytib$area_log, ymin = mytib$temp.low, ymax = mytib$temp.high), width = 0.1) +\n  geom_point(aes(x = mytib$area_log, y = mytib$temp.mean), size = 2, shape = 21, fill = \"white\") +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Catchment area (log scale)\") + ylab(\"Temperature effect (posterior mean)\")\n\n\n\n\n\n\n\n\n\nFlow effect: in small catchments, increased flow has a warming effect on stream temperature, whereas in large catchments, increased flow has a cooling effect on stream temperature. In small catchments, where proportional contributions from groundwater to streamflow are relatively high, increased flows during snowmelt/runoff warm stream temperatures as snowmelt temperature is warmer than groundwater temperature (???). But in larger catchments where volumetric groundwater contributions are ~low relative to discharge, increased flows during snowmelt cool stream temps as snowmelt temps are colder than ambient air temperatures (which more strongly influence stream temps relative to smaller streams).\n\n\nCode\nxseq &lt;- seq(from = min(jags.data$area), to = max(jags.data$area), length.out = nsims)\npreds &lt;- matrix(data = NA, nrow = dim(Mcmcdat)[1], ncol = nsims)\n\nfor (j in 1:dim(Mcmcdat)[1]) {\n  preds[j,] &lt;- unlist(Mcmcdat[j,\"alpha.0[3]\"]) + unlist(Mcmcdat[j,\"alpha.1[3]\"])*xseq\n}\nymean &lt;- apply(preds, 2, mean)\nylow &lt;- apply(preds, 2, quantile, probs = 0.025)\nyhigh &lt;- apply(preds, 2, quantile, probs = 0.975)\n\nggplot() +\n  geom_ribbon(aes(x = xseq, ymin = ylow, ymax = yhigh), fill = \"grey\") +\n  geom_line(aes(x = xseq, y = ymean), color = \"black\", linewidth = 1, lineend = \"round\") +\n  geom_errorbar(aes(x = mytib$area_log, ymin = mytib$flow.low, ymax = mytib$flow.high), width = 0.1) +\n  geom_point(aes(x = mytib$area_log, y = mytib$flow.mean), size = 2, shape = 21, fill = \"white\") +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Catchment area (log scale)\") + ylab(\"Flow effect (posterior mean)\")\n\n\n\n\n\n\n\n\n\nTemp-flow interaction: not sure what this means…\n\n\nCode\nxseq &lt;- seq(from = min(jags.data$area), to = max(jags.data$area), length.out = nsims)\npreds &lt;- matrix(data = NA, nrow = dim(Mcmcdat)[1], ncol = nsims)\n\nfor (j in 1:dim(Mcmcdat)[1]) {\n  preds[j,] &lt;- unlist(Mcmcdat[j,\"alpha.0[4]\"]) + unlist(Mcmcdat[j,\"alpha.1[4]\"])*xseq\n}\nymean &lt;- apply(preds, 2, mean)\nylow &lt;- apply(preds, 2, quantile, probs = 0.025)\nyhigh &lt;- apply(preds, 2, quantile, probs = 0.975)\n\nggplot() +\n  geom_ribbon(aes(x = xseq, ymin = ylow, ymax = yhigh), fill = \"grey\") +\n  geom_line(aes(x = xseq, y = ymean), color = \"black\", linewidth = 1, lineend = \"round\") +\n  geom_errorbar(aes(x = mytib$area_log, ymin = mytib$int.low, ymax = mytib$int.high), width = 0.1) +\n  geom_point(aes(x = mytib$area_log, y = mytib$int.mean), size = 2, shape = 21, fill = \"white\") +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Catchment area (log scale)\") + ylab(\"Temp-Flow interaction (posterior mean)\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nx_temp &lt;- seq(from = min(dat$z_air_temp_mean), to = max(dat$z_air_temp_mean), length.out = nsims)\nx_flow &lt;- seq(from = min(dat$z_Yield_mm_log), to = max(dat$z_Yield_mm_log), length.out = nsims)\npred_df_sm &lt;- expand_grid(x_temp, x_flow)\npred_df_lg &lt;- expand_grid(x_temp, x_flow)\n\n# small basins\nte &lt;- param.summary[\"alpha.0[2]\",1] + param.summary[\"alpha.1[2]\",1]*min(jags.data$area)\nfe &lt;- param.summary[\"alpha.0[3]\",1] + param.summary[\"alpha.1[3]\",1]*min(jags.data$area)\ntfe &lt;- param.summary[\"alpha.0[4]\",1] + param.summary[\"alpha.1[4]\",1]*min(jags.data$area)\npred_df_sm$pred &lt;- te*pred_df_sm$x_temp + fe*pred_df_sm$x_flow + tfe*pred_df_sm$x_temp*pred_df_sm$x_flow\n# large basins\nte &lt;- param.summary[\"alpha.0[2]\",1] + param.summary[\"alpha.1[2]\",1]*max(jags.data$area)\nfe &lt;- param.summary[\"alpha.0[3]\",1] + param.summary[\"alpha.1[3]\",1]*max(jags.data$area)\ntfe &lt;- param.summary[\"alpha.0[4]\",1] + param.summary[\"alpha.1[4]\",1]*max(jags.data$area)\npred_df_lg$pred &lt;- te*pred_df_lg$x_temp + fe*pred_df_lg$x_flow + tfe*pred_df_lg$x_temp*pred_df_lg$x_flow\n\n# plot\np1sm &lt;- ggplot(pred_df_sm, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n    geom_line() +\n    scale_color_distiller(palette = \"BrBG\", direction = +1) +\n    theme_bw() + theme(panel.grid = element_blank()) +\n    labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature (deviation)\") + ylim(-7,7)\np2sm &lt;- ggplot(pred_df_sm, aes(x = x_temp, y = x_flow)) +\n    geom_tile(aes(fill = pred)) +\n    scale_fill_distiller(palette = \"Spectral\", limits = c(-7,7)) +\n    theme_bw() + theme(panel.grid = element_blank()) +\n    scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n    labs(fill = \"Water\\ntemp.\\ndev.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# plot\np1lg &lt;- ggplot(pred_df_lg, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n    geom_line() +\n    scale_color_distiller(palette = \"BrBG\", direction = +1) +\n    theme_bw() + theme(panel.grid = element_blank()) +\n    labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature (deviation)\") + ylim(-7,7)\np2lg &lt;- ggplot(pred_df_lg, aes(x = x_temp, y = x_flow)) +\n    geom_tile(aes(fill = pred)) +\n    scale_fill_distiller(palette = \"Spectral\", limits = c(-7,7)) +\n    theme_bw() + theme(panel.grid = element_blank()) +\n    scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n    labs(fill = \"Water\\ntemp.\\ndev.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n\negg::ggarrange(p1sm, p2sm, p1lg, p2lg, ncol = 2, nrow = 2, labels = c(\"small\", \"small\", \"large\", \"large\"))\n\n\n\n\n\n\n\n\n\nTemp effect - old\n\n\nCode\nmydf &lt;- ggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\",\n                          \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\", \"B.site[5,2]\",\n                          \"B.site[6,2]\", \"B.site[7,2]\", \"B.site[8,2]\", \"B.site[9,2]\", \"B.site[10,2]\", \"B.site[11,2]\"))) %&gt;%\n  group_by(Parameter) %&gt;% \n  summarize(mean = mean(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(site_name = mysites$site_name) %&gt;%\n  left_join(dat %&gt;% group_by(site_name) %&gt;% summarize(area_sqmi = unique(area_sqmi))) %&gt;% \n  left_join(dat %&gt;% mutate(month = month(date)) %&gt;% filter(month %in% c(7:9)) %&gt;% group_by(site_name) %&gt;% summarize(meanSummYield = mean(Yield_mm, na.rm = TRUE))) %&gt;%\n  mutate(z_area = scale(area_sqmi), z_yield = scale(meanSummYield))\n\nsummary(lm(mean ~ z_area + z_yield, data = mydf))\n\np1 &lt;- mydf %&gt;%\n  ggplot(aes(x = log(area_sqmi), y = mean)) +\n  geom_point() + geom_smooth(method = \"lm\") + theme_bw() +\n  xlab(\"Catchment area (log scale)\") + ylab(\"Temperature effect (posterior mean)\") + ggpubr::stat_cor()\n\np2 &lt;- mydf %&gt;%\n  ggplot(aes(x = log(meanSummYield), y = mean)) +\n  geom_point() + geom_smooth(method = \"lm\") + theme_bw() +\n  xlab(\"Mean summer yield (log scale)\") + ylab(\"Temperature effect (posterior mean)\") + ggpubr::stat_cor()\n\nggpubr::ggarrange(p1, p2, nrow = 1)\n\n\nFlow effect - old\n\n\nCode\nmydf &lt;- ggfit %&gt;%\n  filter(Parameter %in% c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\",\n                          \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\")) %&gt;%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\", \"B.site[5,3]\",\n                          \"B.site[6,3]\", \"B.site[7,3]\", \"B.site[8,3]\", \"B.site[9,3]\", \"B.site[10,3]\", \"B.site[11,3]\"))) %&gt;%\n  group_by(Parameter) %&gt;% \n  summarize(mean = mean(value)) %&gt;%\n  ungroup() %&gt;%\n  mutate(site_name = mysites$site_name) %&gt;%\n  left_join(dat %&gt;% group_by(site_name) %&gt;% summarize(area_sqmi = unique(area_sqmi))) %&gt;% \n  left_join(dat %&gt;% mutate(month = month(date)) %&gt;% filter(month %in% c(7:9)) %&gt;% group_by(site_name) %&gt;% summarize(meanSummYield = mean(Yield_mm, na.rm = TRUE))) %&gt;%\n  mutate(z_area = scale(area_sqmi), z_yield = scale(meanSummYield))\n\nsummary(lm(mean ~ z_area + z_yield, data = mydf))\n\np1 &lt;- mydf %&gt;%\n  ggplot(aes(x = log(area_sqmi), y = mean)) +\n  geom_point() + geom_smooth(method = \"lm\") + theme_bw() +\n  xlab(\"Catchment area (log scale)\") + ylab(\"Flow effect (posterior mean)\") + ggpubr::stat_cor(label.y.npc = \"bottom\")\n\np2 &lt;- mydf %&gt;%\n  ggplot(aes(x = log(meanSummYield), y = mean)) +\n  geom_point() + geom_smooth(method = \"lm\") + theme_bw() +\n  xlab(\"Mean summer yield (log scale)\") + ylab(\"Flow effect (posterior mean)\") + ggpubr::stat_cor(label.y.npc = \"bottom\")\n\nggpubr::ggarrange(p1, p2, nrow = 1)\n\n\nWhat does this mean with respect to the effects of (streamflow) drought on spatial variation in stream temperature across river networks?\n\nSuperficially, during dry years, stream temperatures will warm in larger, lower-elevation rivers (as water temp becomes more responsive to air temp?), while stream temperatures cool in smaller, headwater streams as (cold) groundwater contributions account for an increasingly larger proportion of volumetric discharge.\nThus, drought amplifies spatial variability in stream temperature along gradients of stream size (and elevation?)\n\nBut what about variation in groundwater availability among headwater streams? And what about spatial variation in the strength of the interaction between flow and temperature? Perhaps dry years amplify spatial variation in water temperature in multiple dimensions: (1) increased divergence in temperature between small and large streams (as discussed above), but also (2) increased divergence in temperature among headwater systems that differ in groundwater availability.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>ModelTemp - EcoDrought</span>"
    ]
  }
]