{
  "hash": "a8f88163c4a8abd92064ced4d3654a5c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ModelTemp\"\n---\n\n\n**Purpose:**\n\n\n\n\n\n## Repeat Letcher et al.\n\n### Load data\n\nLoad fully formatted data used in Letcher et al. (2016) PeerJ\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/tempDataSyncSUsed.RData\")\nhead(tempDataSyncS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  agency       date AgencyID year fyear            site           fsite\n1 MAUSGS 2003-04-15 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n2 MAUSGS 2003-04-17 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n3 MAUSGS 2003-04-18 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n4 MAUSGS 2003-04-19 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n5 MAUSGS 2003-04-20 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n6 MAUSGS 2003-04-21 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n      date.1 finalSpringBP finalFallBP     temp Latitude  Longitude    airTemp\n1 2003-04-15           102         290 7.807917 1.048017 -0.7477016 -0.9020338\n2 2003-04-17           102         290 5.607500 1.048017 -0.7477016 -0.4415435\n3 2003-04-18           102         290 4.758333 1.048017 -0.7477016 -1.9231208\n4 2003-04-19           102         290 6.387500 1.048017 -0.7477016 -1.6428224\n5 2003-04-20           102         290 7.113333 1.048017 -0.7477016 -0.8820125\n6 2003-04-21           102         290 7.880000 1.048017 -0.7477016 -0.6017140\n  airTempLagged1 airTempLagged2      prcp prcpLagged1 prcpLagged2 prcpLagged3\n1     -1.6630011     -0.9826831 -0.431969   -0.431943  -0.4321001   1.5183177\n2     -0.9021355     -1.6637155 -0.431969   -0.431943  -0.4321001  -0.4320896\n3     -0.4416116     -0.9025616 -0.431969   -0.431943  -0.4321001  -0.4320896\n4     -1.9232972     -0.4418633 -0.431969   -0.431943  -0.4321001  -0.4320896\n5     -1.6429783     -1.9241102 -0.431969   -0.431943  -0.4321001  -0.4320896\n6     -0.8821128     -1.6436851 -0.431969   -0.431943  -0.4321001  -0.4320896\n        dOY     srad         dayl      swe    river riverOrdered       flow\n1 -1.415528 1.991316 -0.131945293 5.473538 WB JIMMY     WB JIMMY 0.08426817\n2 -1.384749 2.653903 -0.069753841 5.201804 WB JIMMY     WB JIMMY 0.07151272\n3 -1.369360 1.461245 -0.007563092 5.201804 WB JIMMY     WB JIMMY 0.06206147\n4 -1.353970 1.567260 -0.007563092 5.065937 WB JIMMY     WB JIMMY 0.05891408\n5 -1.338580 2.309357  0.054628359 5.065937 WB JIMMY     WB JIMMY 0.05542324\n6 -1.323191 2.362365  0.054628359 4.930070 WB JIMMY     WB JIMMY 0.05365359\n       dA     flowL     sweL     flowS    flowLS    sweLS     swe0 dOYInt\n1 0.02175 -2.473751 1.867723 1.1818051 1.4198486 3.597025 5.473538    105\n2 0.02175 -2.637880 1.824840 0.8600836 1.2196572 3.520450 5.201804    107\n3 0.02175 -2.779630 1.824840 0.6217015 1.0467618 3.520450 5.201804    108\n4 0.02175 -2.831675 1.802689 0.5423169 0.9832809 3.480896 5.065937    109\n5 0.02175 -2.892756 1.802689 0.4542700 0.9087791 3.480896 5.065937    110\n6 0.02175 -2.925207 1.780036 0.4096354 0.8691984 3.440445 4.930070    111\n  dOYYear river0 river1 river2 river3 site0 site1 site2 site3 site4 site5 site6\n1   -1070      0      1      0      0     0     0     0     1     0     0     0\n2   -1068      0      1      0      0     0     0     0     1     0     0     0\n3   -1067      0      1      0      0     0     0     0     1     0     0     0\n4   -1066      0      1      0      0     0     0     0     1     0     0     0\n5   -1065      0      1      0      0     0     0     0     1     0     0     0\n6   -1064      0      1      0      0     0     0     0     1     0     0     0\n  rowNum HUC8 sitef huc8f siteShift dateShift newSite newDate  isNA isNAShift\n1      1   NA     1    NA         1         1   FALSE    TRUE FALSE     FALSE\n2      2   NA     1    NA         1     12157   FALSE    TRUE FALSE     FALSE\n3      3   NA     1    NA         1     12159   FALSE   FALSE FALSE     FALSE\n4      4   NA     1    NA         1     12160   FALSE   FALSE FALSE     FALSE\n5      5   NA     1    NA         1     12161   FALSE   FALSE FALSE     FALSE\n6      6   NA     1    NA         1     12162   FALSE   FALSE FALSE     FALSE\n  newDeploy deployID month meanByMonthRiverYear nMonthRiverYear\n1         1        1     4             7.330028              15\n2         1        2     4             7.330028              15\n3         0        2     4             7.330028              15\n4         0        2     4             7.330028              15\n5         0        2     4             7.330028              15\n6         0        2     4             7.330028              15\n  meanByMonthRiver nMonthRiver meanByMonth nMonth riverMS    resid.wb  pred.wb\n1         7.174471         260    7.656617   1146      OL  0.00000000 5.890803\n2         7.174471         260    7.656617   1146      OL -1.16836024 6.775860\n3         7.174471         260    7.656617   1146      OL  1.01697121 3.741362\n4         7.174471         260    7.656617   1146      OL  1.36486877 5.022631\n5         7.174471         260    7.656617   1146      OL -0.05961997 7.172953\n6         7.174471         260    7.656617   1146      OL  0.27705812 7.602942\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(tempDataSyncS$river)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"WB JIMMY\"    \"WB MITCHELL\" \"WB OBEAR\"    \"WEST BROOK\" \n```\n\n\n:::\n\n```{.r .cell-code}\ntempDataSyncS <- tempDataSyncS %>% mutate(siteYear = paste(site, year, sep = \"_\"))\n```\n:::\n\n\nAny missing data?\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$airTemp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$airTempLagged1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$airTempLagged2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$flowLS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nVisualize data. Note that air temp is standardized. By site? Or among sites?\n\n::: panel-tabset\n\n#### Air temp\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tempDataSyncS,aes(dOY,airTemp))+\n  geom_line(aes(color=factor(year))) +\n  facet_grid(year~riverOrdered)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n#### Water temp\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tempDataSyncS,aes(dOY,temp))+\n  geom_line(aes(color=factor(year)))+\n  facet_grid(year~riverOrdered)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n#### Flow (log and std)\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tempDataSyncS,aes(dOY,flowLS))+\n  geom_line(aes(color=factor(year)))+\n  facet_grid(year~riverOrdered)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n#### Tw ~ Ta + F\n\n::: {.cell}\n\n```{.r .cell-code}\ntempDataSyncS %>% ggplot(aes(x = airTemp, y = temp, color = flowLS)) + geom_point(size = 0.2) + facet_wrap(~riverOrdered) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n#### Ta ~ F\n\n::: {.cell}\n\n```{.r .cell-code}\ntempDataSyncS %>% ggplot(aes(x = airTemp, y = flowLS, colour = temp)) + geom_point(size = 0.2) + facet_wrap(~riverOrdered) + theme_bw() + ggpubr::stat_cor()\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n### Specify model\n\nStraight from Letcher et al (2016)\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[river[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]]  <- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nRiver){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:K.0) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n      \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] <- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year <- L + 1\n    sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"DailyTempModelJAGS_Letcher.txt\")\n```\n:::\n\n\n\n### Organize objects\n\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: **must be TRUE!**\n\n::: {.cell}\n\n```{.r .cell-code}\n# row indices for first observation in each site-year\nfirstObsRows <- unlist(tempDataSyncS %>% \n  group_by(siteYear) %>%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %>%\n  ungroup() %>% \n  select(index))\nnFirstObsRows <- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nGet row indices for all other observations\n\n::: {.cell}\n\n```{.r .cell-code}\nevalRows <- unlist(tempDataSyncS %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))\nnEvalRows <- length(evalRows)\n```\n:::\n\n\nFixed and random effect data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.fixed <- data.frame(intercept = 1\n                         ,airTemp = tempDataSyncS$airTemp \n                         ,airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         ,flow =  tempDataSyncS$flowLS\n                         \n                         ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         ,river1 = tempDataSyncS$river1\n                         ,river2 = tempDataSyncS$river2\n                         ,river3 = tempDataSyncS$river3\n                         \n                         #river interaction with air temp\n                         ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years <- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n```\n:::\n\n\nMisc. objects\n\n::: {.cell}\n\n```{.r .cell-code}\nTi <- length(unique(tempDataSyncS$year))\nL <- dim(data.random.years)[2]\nW.year <- diag(L)\n```\n:::\n\n\nCombine data in list\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine data in a list\njags.data <- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = data.fixed,\n                  \"X.year\" = data.random.years,\n                  \"K.0\" = dim(data.fixed)[2],\n                  \"nRiver\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"river\" = as.factor(tempDataSyncS$riverOrdered)\n                  )\n```\n:::\n\n\nParameters to monitor\n\n::: {.cell}\n\n```{.r .cell-code}\njags.params <- c(\"residuals\",\n            \"deviance\",\n #           \"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.year\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\"\n            )\n```\n:::\n\n\n\n### Fit model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = \"DailyTempModelJAGS_Letcher.txt\",\n            n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)\n```\n:::\n\n\nSave to file\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(fit0, \"Model objects/LetcherTempModel_PeerJ2016.RDS\")\n```\n:::\n\n\nRead in fitted model object\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0 <- readRDS(\"Model objects/LetcherTempModel_PeerJ2016.RDS\")\n```\n:::\n\n\nGet MCMC samples and summary\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod <- fit0\n# generate MCMC samples and store as an array\nmodelout <- top_mod$BUGSoutput\nMcmcList <- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])\nparam.summary <- modelout$summary\nhead(param.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             mean         sd       2.5%        25%        50%        75%\nB.0[1] 15.1015857 0.17241501 14.7670816 14.9904635 15.1043750 15.2200522\nB.0[2]  1.5194799 0.02692884  1.4673038  1.5021960  1.5201291  1.5376639\nB.0[3]  0.1946248 0.01671187  0.1626348  0.1835560  0.1949910  0.2060013\nB.0[4]  0.1537465 0.01607942  0.1240864  0.1427723  0.1536634  0.1645636\nB.0[5]  0.3623952 0.01572258  0.3313166  0.3519445  0.3621225  0.3733188\nB.0[6] -0.1296498 0.01190213 -0.1548071 -0.1370349 -0.1295139 -0.1217763\n            97.5%      Rhat n.eff\nB.0[1] 15.4292523 1.0003110  1200\nB.0[2]  1.5716203 1.0003976  1200\nB.0[3]  0.2264602 1.0026970   680\nB.0[4]  0.1853648 0.9998238  1200\nB.0[5]  0.3921435 1.0011524  1200\nB.0[6] -0.1066037 1.0005399  1200\n```\n\n\n:::\n:::\n\n\nAny problematic R-hat values (>1.05)?\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.05]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n ar1Mean \n1.151081 \n```\n\n\n:::\n:::\n\n\nView traceplots\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"mu.year\", \n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-7.png){width=672}\n:::\n:::\n\n\nConvert to ggs object\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      <int> <int> <fct>     <dbl>\n1         1     1 ar1[1]    0.780\n2         2     1 ar1[1]    0.789\n3         3     1 ar1[1]    0.778\n4         4     1 ar1[1]    0.780\n5         5     1 ar1[1]    0.790\n6         6     1 ar1[1]    0.798\n```\n\n\n:::\n:::\n\n\n### Goodness of fit\n\nFormat observed and predicted values\n\n::: {.cell}\n\n```{.r .cell-code}\nMcmcdat <- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n```\n:::\n\n\nBayesian p-value\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4977846\n```\n\n\n:::\n:::\n\n\nPP-check\n\n::: {.cell}\n\n```{.r .cell-code}\nppdat_obs_mean <- apply(ppdat_obs, 2, mean)\nppdat_exp_mean <- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n### Plot model output\n\n*Output is identical to Letcher et al. (2016), as expected*\n\n#### Dot plots\n\n::: panel-tabset\n\n##### Intercept\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter == \"B.0[1]\"), sort = FALSE) + scale_y_discrete(labels = \"Intercept\") + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n##### Betas\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(\"B.0\", unique(ggfit$Parameter), value = TRUE)[-1]) %>%\n                  mutate(Parameter = factor(Parameter, levels = c(\"B.0[2]\", \"B.0[3]\", \"B.0[4]\", \"B.0[5]\", \"B.0[6]\", \n                                                                  \"B.0[7]\", \"B.0[8]\", \"B.0[9]\", \"B.0[10]\", \"B.0[11]\", \"B.0[12]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"T\", \"T(d-1)\", \"T(d-2)\", \"F\", \"T*F\", \"OL\", \"OS\", \"IS\", \"OL*T\", \"OS*T\", \"IS*T\")), limits = rev) + theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n##### Autoregressive terms\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(\"ar1\", unique(ggfit$Parameter), value = TRUE)) %>%\n                  mutate(Parameter = factor(Parameter, levels = c(\"ar1Mean\", \"ar1SD\", \"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"ar1Mean\", \"ar1SD\", \"ar1[WB]\", \"ar1[OL]\", \"ar1[OS]\", \"ar1[IL]\")), limits = rev) + theme_bw() + xlim(0,1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n##### Within year trends\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit, family = \"mu.year\", sort = FALSE) + scale_y_discrete(labels = rev(c(\"Intercept\", \"Linear\", \"Quadratic\", \"Cubic\")), limits = rev) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n#### Marginal efffects\n\nMarginal effects of air temperature x flow interaction, not accounting for lagged temperature effects, temporal autocorrelation, \n\n::: panel-tabset\n\n##### West Brook\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WEST BROOK\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\") #+ \n  #geom_point(data = tempDataSyncS %>% filter(riverOrdered == myriv), aes(x = airTemp, y = flowLS, color = temp)) +\n  #scale_color_distiller(palette = \"Spectral\", limits = c(0,23)) \n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-30-1.png){width=864}\n:::\n:::\n\n\n##### Jimmy\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB JIMMY\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[7]\",1] + param.summary[\"B.0[10]\",1]*pred_df$x_temp\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-31-1.png){width=864}\n:::\n:::\n\n\n##### Mitchell\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB MITCHELL\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[8]\",1] + param.summary[\"B.0[11]\",1]*pred_df$x_temp\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-32-1.png){width=864}\n:::\n:::\n\n\n##### Obear\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB OBEAR\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[9]\",1] + param.summary[\"B.0[12]\",1]*pred_df$x_temp\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-33-1.png){width=864}\n:::\n:::\n\n\n:::\n\n\n## Load data\n\nRestrict to West Brook, and standardize flow by site (not sure we actually want to do this, but for just for now, to repeat Ben's work). Also set flow = NA to 0. Probably should change this to latent variable in model, especially when expanding to sites where flow data is more rare\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"data/EcoDrought_FlowTempData_formatted.csv\") %>% \n  filter(basin == \"Snake River\",\n         year == 2020) %>%\n  mutate(Yield_mm_log = log(Yield_mm + 0.00001),\n         flow_mean_log = log(flow_mean + 0.00001),\n         rowNum = 1:nrow(.)) %>%\n  #group_by(site_name) %>%\n  mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),\n         z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%\n  #ungroup() %>%\n  mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),\n         site_code = as.numeric(as.factor(site_name)),\n         year_code = year - min(year) + 1) \ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,570 × 36\n   site_name basin   lat  long elev_ft area_sqkm date        yday  year siteYear\n   <chr>     <chr> <dbl> <dbl>   <dbl>     <dbl> <date>     <dbl> <dbl> <chr>   \n 1 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-05   126  2020 Grizzly…\n 2 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-06   127  2020 Grizzly…\n 3 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-07   128  2020 Grizzly…\n 4 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-08   129  2020 Grizzly…\n 5 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-09   130  2020 Grizzly…\n 6 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-10   131  2020 Grizzly…\n 7 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-11   132  2020 Grizzly…\n 8 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-12   133  2020 Grizzly…\n 9 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-13   134  2020 Grizzly…\n10 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-14   135  2020 Grizzly…\n# ℹ 1,560 more rows\n# ℹ 26 more variables: tempc_mean <dbl>, tempc_min <dbl>, tempc_max <dbl>,\n#   flow_mean <dbl>, Yield_mm <dbl>, air_temp_mean <dbl>, precip_mmday <dbl>,\n#   swe_kgm2 <dbl>, daylength_sec <dbl>, shortrad_wm2 <dbl>,\n#   air_temp_mean_lag1 <dbl>, air_temp_mean_lag2 <dbl>, finalSpringBP <dbl>,\n#   sourceSpringBP <chr>, finalFallBP <dbl>, sourceFallBP <chr>,\n#   quantileLo <dbl>, quantileHi <dbl>, site_code <dbl>, basin_code <dbl>, …\n```\n\n\n:::\n:::\n\n\nView data\n\n::: panel-tabset\n\n#### Distributions\n\n::: {.cell}\n\n```{.r .cell-code}\nggpubr::ggarrange(dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw(),\n                  dat %>% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw(),\n                  dat %>% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw(),\n                  common.legend = TRUE, legend = \"right\", ncol = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n#### Time series\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% ggplot() +\n  geom_line(aes(date, air_temp_mean), color = \"red\") + \n  geom_line(aes(date, tempc_mean)) +\n  geom_line(aes(date, z_Yield_mm_log*10), color = 'blue') +\n  facet_wrap(~site_name)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n#### Air temp x Flow\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  filter(z_Yield_mm_log != 0) %>%\n  ggplot(aes(x = z_air_temp_mean, y = z_Yield_mm_log)) + \n  geom_point() + \n  ggpubr::stat_cor(method = \"pearson\", label.x.npc = 0, label.y.npc = 0.1) +\n  facet_wrap(~site_name)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## Specify JAGS model\n\nSpecify model following Letcher et al. (2016). MODIFIED\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:n){\n      temp[i] ~ dnorm(stream.mu[i], pow(sigma, -2)) \n      stream.mu[i] <- trend[i]\n      trend[i] <- inprod(B.site[site[i], ], X.site[i, ])\n      \n      #flow[firstObsRows[i]] ~ dnorm(0, pow(10, -2))\n      }\n    \n    # for (i in 1:nFirstObsRows){\n    #   temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n    #   stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n    #   trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) #+ inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n    #   \n    #   #flow[firstObsRows[i]] ~ dnorm(0, pow(10, -2))\n    #   }\n    # \n    # # Days with an observation on the previous dat (all days following the first day)\n    # # Includes autoregressive term (ar1)\n    # \n    # for (i in 1:nEvalRows){ \n    #   temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n    #   stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n    #   trend[evalRows[i]]  <- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) #+ inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n    #   \n    #   #flow[evalRows[i]] ~ dnorm(0, pow(10, -2))\n    #   }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # # ar1, hierarchical by site\n    # for (i in 1:nSite){\n    #   ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    # }\n    # ar1Mean ~ dunif( -1,1 ) \n    # ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:nFixedCovs) {\n      B.0[k] ~ dnorm(0, pow(100, -2))\n      }\n    \n    \n    # SITE EFFECTS\n    for (k in 1:nRandCovs) {\n      for (i in 1:nSite) {\n        B.site[i,k] ~ dnorm(0, pow(10, -2))   \n      }\n    }\n    \n      \n    # # YEAR EFFECTS\n    # # Priors for random effects of year\n    # for (t in 1:Ti) { # Ti years\n    #   B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n    #   }\n    # \n    # mu.year[1] <- 0\n    # \n    # for (l in 2:L) {\n    #   mu.year[l] ~ dnorm(0, 0.0001)\n    #   }\n    # \n    # # Prior on multivariate normal std deviation\n    # tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    # df.year <- L + 1\n    # sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    # for (l in 1:L) {\n    #   for (l.prime in 1:L) {\n    #     rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n    #     }\n    #   sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    # }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    \n    # residuals\n    # residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 1:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    # variance of model predictions (fixed + random effects)\n    var_fit <- (sd(stream.mu))^2 \n\n    # residual variance\n    var_res <- (sd(residuals))^2\n\n    # calculate Bayesian R^2\n    R2 <- var_fit / (var_fit + var_res)\n    \n    # Root mean squared error\n    rmse <- sqrt(mean(residuals[]^2))\n    \n    }\", file = \"DailyTempModelJAGS_mod.txt\")\n```\n:::\n\n\n\nStraight from Letcher et al (2016)\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[river[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]]  <- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nRiver){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:K.0) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n      \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] <- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year <- L + 1\n    sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"DailyTempModelJAGS_Letcher.txt\")\n```\n:::\n\n\n\n## Organize objects\n\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: **must be TRUE!**\n\n::: {.cell}\n\n```{.r .cell-code}\n# row indices for first observation in each site-year\nfirstObsRows <- unlist(dat %>% \n  group_by(siteYear) %>%\n  summarize(index = rowNum[min(which(!is.na(tempc_mean)))]) %>%\n  ungroup() %>% \n  select(index))\nnFirstObsRows <- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(dat$siteYear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nGet row indices for all other observations\n\n::: {.cell}\n\n```{.r .cell-code}\nevalRows <- unlist(dat %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))\nnEvalRows <- length(evalRows)\n```\n:::\n\n\nCollate JAGS data in a list\n\n::: {.cell}\n\n```{.r .cell-code}\n# fixed effects\ndata.fixed <- data.frame(intercept = 1,\n                         # air temperature\n                         airTemp = dat$air_temp_mean,\n                         airTempLag1 = dat$air_temp_mean_lag1,\n                         airTempLag2 = dat$air_temp_mean_lag2,\n                         # flow\n                         flow = dat$z_Yield_mm_log,\n                         # air temp x flow interaction\n                         airFlow = dat$air_temp_mean * dat$z_Yield_mm_log\n                         )\n\n# random site effects\n# data.random.sites <- data.frame(intercept.site = 1,\n#                                 airTemp = dat$air_temp_mean)\ndata.random.sites <- data.frame(intercept.site = 1,\n                                air = dat$z_air_temp_mean,\n                                flow = dat$z_Yield_mm_log,\n                                airflow = dat$z_air_temp_mean * dat$z_Yield_mm_log)\n\n# random year effects\ndata.random.years <- data.frame(intercept.year = 1,\n                                doy = dat$yday,\n                                doy2 = dat$yday^2,\n                                doy3 = dat$yday^3)\nTi <- length(unique(dat$year))\nL <- dim(data.random.years)[2]\nW.year <- diag(L)\n\n# combine data in a list\njags.data <- list(\"temp\" = dat$tempc_mean,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = data.fixed,\n                  \"X.site\" = data.random.sites,\n                  \"X.year\" = data.random.years,\n                  \"nFixedCovs\" = dim(data.fixed)[2],\n                  \"nRandCovs\" = dim(data.random.sites)[2],\n                  \"site\" = dat$site_code,\n                  \"year\" = dat$year_code,\n                  \"nSite\" = length(unique(dat$site_code)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(dat)[1])\n```\n:::\n\n\nParameters to monitor\n\n::: {.cell}\n\n```{.r .cell-code}\n# parameters to monitor\njags.params <- c(\"B.0\", \"B.site\", \"B.year\",\n                 \"ar1\", \"ar1Mean\", \"ar1SD\", \n                 \"mu.year\", \"sigma.b.year\",\n                 \"sigma\", \"residuals\", \"R2\", \n                 \"temp\", \"stream.mu\", \"rmse\")\n```\n:::\n\n\n\n## Fit model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit2 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = \"DailyTempModelJAGS_mod.txt\",\n            n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 1066\n   Unobserved stochastic nodes: 547\n   Total graph size: 14190\n\nInitializing model\n```\n\n\n:::\n:::\n\n\nGet MCMC samples and summary\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod <- fit2\n# generate MCMC samples and store as an array\nmodelout <- top_mod$BUGSoutput\nMcmcList <- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])\nparam.summary <- modelout$summary\nhead(param.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mean        sd      2.5%       25%        50%      75%    97.5%\nB.0[1] -2.53186450  97.80194 -181.6234 -71.50981 -6.3570846 65.44861 195.6665\nB.0[2]  0.81363645  97.93522 -193.7036 -66.88179  0.6793615 69.17123 192.9113\nB.0[3] -2.04099049 101.26468 -200.7208 -68.70565 -0.2895786 67.51610 193.8802\nB.0[4] -2.13699872  97.20127 -198.7552 -70.25320  0.6108893 67.07642 180.8568\nB.0[5] -3.18708240 102.48235 -205.1407 -71.84408 -5.6014977 66.63500 196.1464\nB.0[6]  0.04098833 103.02647 -197.8795 -68.49828  3.0619377 70.06566 198.2699\n            Rhat n.eff\nB.0[1] 0.9999483  1200\nB.0[2] 1.0002220  1200\nB.0[3] 1.0000447  1200\nB.0[4] 1.0014913  1100\nB.0[5] 1.0000388  1200\nB.0[6] 1.0034282   550\n```\n\n\n:::\n:::\n\n\nConvert to ggs object\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\n```\n:::\n\n\n\n## Model diagnostics\n\n### Convergence\n\nAny problematic R-hat values (>1.01)?\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.01]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n residuals[225]  residuals[226]  residuals[227]  residuals[231]  residuals[232] \n       1.010067        1.011900        1.013203        1.014402        1.016809 \n residuals[233]  residuals[234]  residuals[235]  residuals[236]  residuals[237] \n       1.018053        1.014694        1.017265        1.019384        1.019457 \n residuals[238]  residuals[239]  residuals[240]  residuals[241]  residuals[242] \n       1.019907        1.017900        1.016265        1.017742        1.020242 \n residuals[244]  residuals[245]  residuals[246]  residuals[247]  residuals[248] \n       1.017830        1.018821        1.020505        1.020248        1.020188 \n residuals[249]  residuals[250]  residuals[251]  residuals[252]  residuals[253] \n       1.019966        1.019435        1.019834        1.019845        1.015010 \n residuals[254]  residuals[255]  residuals[256]  residuals[257]  residuals[262] \n       1.012276        1.011120        1.011667        1.010957        1.012109 \n residuals[263]  residuals[264]  residuals[265]  residuals[268]  residuals[269] \n       1.013312        1.012671        1.012380        1.010300        1.010102 \n residuals[270]  residuals[365]  residuals[368]  residuals[370]  residuals[467] \n       1.010199        1.018001        1.010312        1.022845        1.013810 \n residuals[755] residuals[1176] residuals[1195]   stream.mu[36]  stream.mu[184] \n       1.011188        1.011853        1.010213        1.020921        1.010757 \n stream.mu[190]  stream.mu[225]  stream.mu[226]  stream.mu[227]  stream.mu[231] \n       1.010284        1.010068        1.011870        1.013144        1.014340 \n stream.mu[232]  stream.mu[233]  stream.mu[234]  stream.mu[235]  stream.mu[236] \n       1.016715        1.016517        1.014252        1.016137        1.019174 \n stream.mu[237]  stream.mu[238]  stream.mu[239]  stream.mu[240]  stream.mu[241] \n       1.019257        1.018223        1.017217        1.015652        1.017689 \n stream.mu[242]  stream.mu[244]  stream.mu[245]  stream.mu[246]  stream.mu[247] \n       1.020063        1.017761        1.017618        1.020341        1.020102 \n stream.mu[248]  stream.mu[249]  stream.mu[250]  stream.mu[251]  stream.mu[252] \n       1.020050        1.019854        1.018993        1.019079        1.019066 \n stream.mu[253]  stream.mu[254]  stream.mu[255]  stream.mu[256]  stream.mu[257] \n       1.015321        1.012729        1.011624        1.012608        1.011641 \n stream.mu[258]  stream.mu[259]  stream.mu[262]  stream.mu[263]  stream.mu[264] \n       1.010528        1.010547        1.012189        1.013381        1.012746 \n stream.mu[265]  stream.mu[266]  stream.mu[268]  stream.mu[269]  stream.mu[270] \n       1.012459        1.010944        1.010396        1.010198        1.010295 \n      temp[202]       temp[732]       temp[737]      temp[1020]      temp[1399] \n       1.014691        1.012660        1.023582        1.014504        1.010867 \n     temp[1400] \n       1.013898 \n```\n\n\n:::\n:::\n\n\nView traceplots\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.site\", \"B.year\", \n                     #\"ar1\", \"ar1Mean\", \"ar1SD\", \"mu.year\", \"sigma.b.year\", \"B.0\", \n                     \"sigma\", \"R2\", \"rmse\"), pdf = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-48-13.png){width=672}\n:::\n:::\n\n\n\n### Goodness of fit\n\nFormat observed and predicted values\n\n::: {.cell}\n\n```{.r .cell-code}\nMcmcdat <- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n```\n:::\n\n\nBayesian p-value\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4766338\n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n\n#### PP-check\n\n::: {.cell}\n\n```{.r .cell-code}\nppdat_obs_mean <- apply(ppdat_obs, 2, mean)\nppdat_exp_mean <- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n#### RMSE\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(unlist(ggfit %>% filter(Parameter == \"rmse\") %>% select(value)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.532946\n```\n\n\n:::\n\n```{.r .cell-code}\nggs_density(ggfit, \"rmse\") \n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n#### R-squared\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(unlist(ggfit %>% filter(Parameter == \"R2\") %>% select(value)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7864627\n```\n\n\n:::\n\n```{.r .cell-code}\nggs_density(ggfit, \"R2\") + xlim(0,1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## Plot model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyparams <- unique(ggfit$Parameter)\n```\n:::\n\n\n\n### Dot plots\n\n::: panel-tabset\n\n#### Intercepts\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*1]\"), myparams, value = TRUE)), sort = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n#### Slopes: air temp.\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*2]\"), myparams, value = TRUE)), sort = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n#### Slopes: flow\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*3]\",), myparams, value = TRUE)), sort = FALSE) + xlim(-5,5)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n#### Slopes: air x flow\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*4]\"), myparams, value = TRUE)), sort = FALSE) + xlim(-2.5,2.5)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\nInteraction heat maps\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}