{
  "hash": "7b9413321c065d2adb226c4598e2355a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ModelTemp\"\n---\n\n\n**Purpose:**\n\n\n\n\n\n## Load data\n\nRestrict to West Brook, and standardize flow by site (not sure we actually want to do this, but for just for now, to repeat Ben's work). Also set flow = NA to 0. Probably should change this to latent variable in model, especially when expanding to sites where flow data is more rare\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(\"data/EcoDrought_FlowTempData_formatted.csv\") %>% \n  filter(basin == \"Snake River\",\n         year == 2020) %>%\n  mutate(Yield_mm_log = log(Yield_mm + 0.00001),\n         flow_mean_log = log(flow_mean + 0.00001),\n         rowNum = 1:nrow(.)) %>%\n  #group_by(site_name) %>%\n  mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),\n         z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%\n  #ungroup() %>%\n  mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),\n         site_code = as.numeric(as.factor(site_name)),\n         year_code = year - min(year) + 1) \ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,570 × 36\n   site_name basin   lat  long elev_ft area_sqkm date        yday  year siteYear\n   <chr>     <chr> <dbl> <dbl>   <dbl>     <dbl> <date>     <dbl> <dbl> <chr>   \n 1 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-05   126  2020 Grizzly…\n 2 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-06   127  2020 Grizzly…\n 3 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-07   128  2020 Grizzly…\n 4 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-08   129  2020 Grizzly…\n 5 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-09   130  2020 Grizzly…\n 6 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-10   131  2020 Grizzly…\n 7 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-11   132  2020 Grizzly…\n 8 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-12   133  2020 Grizzly…\n 9 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-13   134  2020 Grizzly…\n10 Grizzly … Snak…  43.8 -110.   8340.      32.8 2020-05-14   135  2020 Grizzly…\n# ℹ 1,560 more rows\n# ℹ 26 more variables: tempc_mean <dbl>, tempc_min <dbl>, tempc_max <dbl>,\n#   flow_mean <dbl>, Yield_mm <dbl>, air_temp_mean <dbl>, precip_mmday <dbl>,\n#   swe_kgm2 <dbl>, daylength_sec <dbl>, shortrad_wm2 <dbl>,\n#   air_temp_mean_lag1 <dbl>, air_temp_mean_lag2 <dbl>, finalSpringBP <dbl>,\n#   sourceSpringBP <chr>, finalFallBP <dbl>, sourceFallBP <chr>,\n#   quantileLo <dbl>, quantileHi <dbl>, site_code <dbl>, basin_code <dbl>, …\n```\n\n\n:::\n:::\n\n\nView data\n\n::: panel-tabset\n\n#### Distributions\n\n::: {.cell}\n\n```{.r .cell-code}\nggpubr::ggarrange(dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw(),\n                  dat %>% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw(),\n                  dat %>% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw(),\n                  common.legend = TRUE, legend = \"right\", ncol = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n#### Time series\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% ggplot() +\n  geom_line(aes(date, air_temp_mean), color = \"red\") + \n  geom_line(aes(date, tempc_mean)) +\n  geom_line(aes(date, z_Yield_mm_log*10), color = 'blue') +\n  facet_wrap(~site_name)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n#### Air temp x Flow\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  filter(z_Yield_mm_log != 0) %>%\n  ggplot(aes(x = z_air_temp_mean, y = z_Yield_mm_log)) + \n  geom_point() + \n  ggpubr::stat_cor(method = \"pearson\", label.x.npc = 0, label.y.npc = 0.1) +\n  facet_wrap(~site_name)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## Specify JAGS model\n\nSpecify model following Letcher et al. (2016). MODIFIED\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:n){\n      temp[i] ~ dnorm(stream.mu[i], pow(sigma, -2)) \n      stream.mu[i] <- trend[i]\n      trend[i] <- inprod(B.site[site[i], ], X.site[i, ])\n      \n      #flow[firstObsRows[i]] ~ dnorm(0, pow(10, -2))\n      }\n    \n    # for (i in 1:nFirstObsRows){\n    #   temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n    #   stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n    #   trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) #+ inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n    #   \n    #   #flow[firstObsRows[i]] ~ dnorm(0, pow(10, -2))\n    #   }\n    # \n    # # Days with an observation on the previous dat (all days following the first day)\n    # # Includes autoregressive term (ar1)\n    # \n    # for (i in 1:nEvalRows){ \n    #   temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n    #   stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n    #   trend[evalRows[i]]  <- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) #+ inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n    #   \n    #   #flow[evalRows[i]] ~ dnorm(0, pow(10, -2))\n    #   }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # # ar1, hierarchical by site\n    # for (i in 1:nSite){\n    #   ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    # }\n    # ar1Mean ~ dunif( -1,1 ) \n    # ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:nFixedCovs) {\n      B.0[k] ~ dnorm(0, pow(100, -2))\n      }\n    \n    \n    # SITE EFFECTS\n    for (k in 1:nRandCovs) {\n      for (i in 1:nSite) {\n        B.site[i,k] ~ dnorm(0, pow(10, -2))   \n      }\n    }\n    \n      \n    # # YEAR EFFECTS\n    # # Priors for random effects of year\n    # for (t in 1:Ti) { # Ti years\n    #   B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n    #   }\n    # \n    # mu.year[1] <- 0\n    # \n    # for (l in 2:L) {\n    #   mu.year[l] ~ dnorm(0, 0.0001)\n    #   }\n    # \n    # # Prior on multivariate normal std deviation\n    # tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    # df.year <- L + 1\n    # sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    # for (l in 1:L) {\n    #   for (l.prime in 1:L) {\n    #     rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n    #     }\n    #   sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    # }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    \n    # residuals\n    # residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 1:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    # variance of model predictions (fixed + random effects)\n    var_fit <- (sd(stream.mu))^2 \n\n    # residual variance\n    var_res <- (sd(residuals))^2\n\n    # calculate Bayesian R^2\n    R2 <- var_fit / (var_fit + var_res)\n    \n    # Root mean squared error\n    rmse <- sqrt(mean(residuals[]^2))\n    \n    }\", file = \"DailyTempModelJAGS_mod.txt\")\n```\n:::\n\n\n\nStraight from Letcher et al (2016)\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[river[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]]  <- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nRiver){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:K.0) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n      \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] <- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year <- L + 1\n    sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"DailyTempModelJAGS_Letcher.txt\")\n```\n:::\n\n\n\n## Organize objects\n\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: **must be TRUE!**\n\n::: {.cell}\n\n```{.r .cell-code}\n# row indices for first observation in each site-year\nfirstObsRows <- unlist(dat %>% \n  group_by(siteYear) %>%\n  summarize(index = rowNum[min(which(!is.na(tempc_mean)))]) %>%\n  ungroup() %>% \n  select(index))\nnFirstObsRows <- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(dat$siteYear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nGet row indices for all other observations\n\n::: {.cell}\n\n```{.r .cell-code}\nevalRows <- unlist(dat %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))\nnEvalRows <- length(evalRows)\n```\n:::\n\n\nCollate JAGS data in a list\n\n::: {.cell}\n\n```{.r .cell-code}\n# fixed effects\ndata.fixed <- data.frame(intercept = 1,\n                         # air temperature\n                         airTemp = dat$air_temp_mean,\n                         airTempLag1 = dat$air_temp_mean_lag1,\n                         airTempLag2 = dat$air_temp_mean_lag2,\n                         # flow\n                         flow = dat$z_Yield_mm_log,\n                         # air temp x flow interaction\n                         airFlow = dat$air_temp_mean * dat$z_Yield_mm_log\n                         )\n\n# random site effects\n# data.random.sites <- data.frame(intercept.site = 1,\n#                                 airTemp = dat$air_temp_mean)\ndata.random.sites <- data.frame(intercept.site = 1,\n                                air = dat$z_air_temp_mean,\n                                flow = dat$z_Yield_mm_log,\n                                airflow = dat$z_air_temp_mean * dat$z_Yield_mm_log)\n\n# random year effects\ndata.random.years <- data.frame(intercept.year = 1,\n                                doy = dat$yday,\n                                doy2 = dat$yday^2,\n                                doy3 = dat$yday^3)\nTi <- length(unique(dat$year))\nL <- dim(data.random.years)[2]\nW.year <- diag(L)\n\n# combine data in a list\njags.data <- list(\"temp\" = dat$tempc_mean,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = data.fixed,\n                  \"X.site\" = data.random.sites,\n                  \"X.year\" = data.random.years,\n                  \"nFixedCovs\" = dim(data.fixed)[2],\n                  \"nRandCovs\" = dim(data.random.sites)[2],\n                  \"site\" = dat$site_code,\n                  \"year\" = dat$year_code,\n                  \"nSite\" = length(unique(dat$site_code)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(dat)[1])\n```\n:::\n\n\nParameters to monitor\n\n::: {.cell}\n\n```{.r .cell-code}\n# parameters to monitor\njags.params <- c(\"B.0\", \"B.site\", \"B.year\",\n                 \"ar1\", \"ar1Mean\", \"ar1SD\", \n                 \"mu.year\", \"sigma.b.year\",\n                 \"sigma\", \"residuals\", \"R2\", \n                 \"temp\", \"stream.mu\", \"rmse\")\n```\n:::\n\n\n\n## Fit model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit2 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = \"DailyTempModelJAGS_mod.txt\",\n            n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 1066\n   Unobserved stochastic nodes: 547\n   Total graph size: 14190\n\nInitializing model\n```\n\n\n:::\n:::\n\n\nGet MCMC samples and summary\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod <- fit2\n# generate MCMC samples and store as an array\nmodelout <- top_mod$BUGSoutput\nMcmcList <- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])\nparam.summary <- modelout$summary\nhead(param.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             mean        sd      2.5%       25%       50%      75%    97.5%\nB.0[1] -1.9175189  99.42027 -201.0615 -62.99248  2.553325 61.95781 185.5070\nB.0[2]  0.1982315 101.52811 -191.9918 -69.74105  2.680515 67.33220 198.9505\nB.0[3]  1.9210055  99.67558 -195.1760 -64.98358  2.285073 68.46909 202.1766\nB.0[4]  0.5549154 101.83930 -191.0458 -69.31937 -1.121739 66.11728 203.5661\nB.0[5] -0.1924557  99.78069 -185.2194 -71.17171 -1.218507 66.75643 203.9491\nB.0[6]  1.0493200  96.72869 -182.6250 -65.27186 -3.479752 65.71293 199.0732\n            Rhat n.eff\nB.0[1] 0.9998981  1200\nB.0[2] 1.0002323  1200\nB.0[3] 1.0010438  1200\nB.0[4] 1.0006115  1200\nB.0[5] 1.0009274  1200\nB.0[6] 1.0049042   480\n```\n\n\n:::\n:::\n\n\nConvert to ggs object\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\n```\n:::\n\n\n\n## Model diagnostics\n\n### Convergence\n\nAny problematic R-hat values (>1.01)?\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.01]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    B.site[3,2]    residuals[3]  residuals[312]  residuals[313]  residuals[342] \n       1.011105        1.010671        1.010310        1.010328        1.010352 \n residuals[450]  residuals[655] residuals[1025] residuals[1142]  stream.mu[342] \n       1.010176        1.012328        1.010501        1.013023        1.010352 \n stream.mu[358]  stream.mu[450]  stream.mu[483] stream.mu[1261]       temp[506] \n       1.013363        1.010305        1.010782        1.012365        1.059390 \n      temp[532]       temp[655]       temp[733]      temp[1043]      temp[1067] \n       1.010589        1.023328        1.018785        1.033900        1.011473 \n     temp[1413]      temp[1414]      temp[1415]      temp[1567]      temp[1568] \n       1.012579        1.016556        1.013009        1.015436        1.013152 \n```\n\n\n:::\n:::\n\n\nView traceplots\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.site\", \"B.year\", \n                     #\"ar1\", \"ar1Mean\", \"ar1SD\", \"mu.year\", \"sigma.b.year\", \"B.0\", \n                     \"sigma\", \"R2\", \"rmse\"), pdf = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-16-13.png){width=672}\n:::\n:::\n\n\n\n### Goodness of fit\n\nFormat observed and predicted values\n\n::: {.cell}\n\n```{.r .cell-code}\nMcmcdat <- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n```\n:::\n\n\nBayesian p-value\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4768519\n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n\n#### PP-check\n\n::: {.cell}\n\n```{.r .cell-code}\nppdat_obs_mean <- apply(ppdat_obs, 2, mean)\nppdat_exp_mean <- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### RMSE\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(unlist(ggfit %>% filter(Parameter == \"rmse\") %>% select(value)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.534933\n```\n\n\n:::\n\n```{.r .cell-code}\nggs_density(ggfit, \"rmse\") \n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### R-squared\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(unlist(ggfit %>% filter(Parameter == \"R2\") %>% select(value)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7865546\n```\n\n\n:::\n\n```{.r .cell-code}\nggs_density(ggfit, \"R2\") + xlim(0,1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## Plot model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyparams <- unique(ggfit$Parameter)\n```\n:::\n\n\n\n### Dot plots\n\n::: panel-tabset\n\n#### Intercepts\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*1]\"), myparams, value = TRUE)), sort = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n#### Slopes: air temp.\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*2]\"), myparams, value = TRUE)), sort = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n#### Slopes: flow\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*3]\",), myparams, value = TRUE)), sort = FALSE) + xlim(-5,5)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Slopes: air x flow\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx(\"B.site*4]\"), myparams, value = TRUE)), sort = FALSE) + xlim(-2.5,2.5)\n```\n\n::: {.cell-output-display}\n![](ModelTemp_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\nInteraction heat maps\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}