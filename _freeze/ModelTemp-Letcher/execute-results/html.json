{
  "hash": "99615d96fbcd590919b7aff2fd9807c8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ModelTemp - Letcher et al. (2016)\"\n---\n\n\n\n\n\n\n**Purpose:** fit stream temp model as in Letcher et al. (2016); modify JAGS model to estimate parameters hierarchically and check to make sure output matches. \n\n\n\n\n\n\n\n\n\n\n\n\n\n## Repeat Letcher et al.\n\n### Load data\n\nLoad fully formatted data used in Letcher et al. (2016) PeerJ\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/tempDataSyncSUsed.RData\")\nhead(tempDataSyncS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  agency       date AgencyID year fyear            site           fsite\n1 MAUSGS 2003-04-15 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n2 MAUSGS 2003-04-17 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n3 MAUSGS 2003-04-18 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n4 MAUSGS 2003-04-19 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n5 MAUSGS 2003-04-20 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n6 MAUSGS 2003-04-21 WB JIMMY 2003  2003 MAUSGS_WB_JIMMY MAUSGS_WB_JIMMY\n      date.1 finalSpringBP finalFallBP     temp Latitude  Longitude    airTemp\n1 2003-04-15           102         290 7.807917 1.048017 -0.7477016 -0.9020338\n2 2003-04-17           102         290 5.607500 1.048017 -0.7477016 -0.4415435\n3 2003-04-18           102         290 4.758333 1.048017 -0.7477016 -1.9231208\n4 2003-04-19           102         290 6.387500 1.048017 -0.7477016 -1.6428224\n5 2003-04-20           102         290 7.113333 1.048017 -0.7477016 -0.8820125\n6 2003-04-21           102         290 7.880000 1.048017 -0.7477016 -0.6017140\n  airTempLagged1 airTempLagged2      prcp prcpLagged1 prcpLagged2 prcpLagged3\n1     -1.6630011     -0.9826831 -0.431969   -0.431943  -0.4321001   1.5183177\n2     -0.9021355     -1.6637155 -0.431969   -0.431943  -0.4321001  -0.4320896\n3     -0.4416116     -0.9025616 -0.431969   -0.431943  -0.4321001  -0.4320896\n4     -1.9232972     -0.4418633 -0.431969   -0.431943  -0.4321001  -0.4320896\n5     -1.6429783     -1.9241102 -0.431969   -0.431943  -0.4321001  -0.4320896\n6     -0.8821128     -1.6436851 -0.431969   -0.431943  -0.4321001  -0.4320896\n        dOY     srad         dayl      swe    river riverOrdered       flow\n1 -1.415528 1.991316 -0.131945293 5.473538 WB JIMMY     WB JIMMY 0.08426817\n2 -1.384749 2.653903 -0.069753841 5.201804 WB JIMMY     WB JIMMY 0.07151272\n3 -1.369360 1.461245 -0.007563092 5.201804 WB JIMMY     WB JIMMY 0.06206147\n4 -1.353970 1.567260 -0.007563092 5.065937 WB JIMMY     WB JIMMY 0.05891408\n5 -1.338580 2.309357  0.054628359 5.065937 WB JIMMY     WB JIMMY 0.05542324\n6 -1.323191 2.362365  0.054628359 4.930070 WB JIMMY     WB JIMMY 0.05365359\n       dA     flowL     sweL     flowS    flowLS    sweLS     swe0 dOYInt\n1 0.02175 -2.473751 1.867723 1.1818051 1.4198486 3.597025 5.473538    105\n2 0.02175 -2.637880 1.824840 0.8600836 1.2196572 3.520450 5.201804    107\n3 0.02175 -2.779630 1.824840 0.6217015 1.0467618 3.520450 5.201804    108\n4 0.02175 -2.831675 1.802689 0.5423169 0.9832809 3.480896 5.065937    109\n5 0.02175 -2.892756 1.802689 0.4542700 0.9087791 3.480896 5.065937    110\n6 0.02175 -2.925207 1.780036 0.4096354 0.8691984 3.440445 4.930070    111\n  dOYYear river0 river1 river2 river3 site0 site1 site2 site3 site4 site5 site6\n1   -1070      0      1      0      0     0     0     0     1     0     0     0\n2   -1068      0      1      0      0     0     0     0     1     0     0     0\n3   -1067      0      1      0      0     0     0     0     1     0     0     0\n4   -1066      0      1      0      0     0     0     0     1     0     0     0\n5   -1065      0      1      0      0     0     0     0     1     0     0     0\n6   -1064      0      1      0      0     0     0     0     1     0     0     0\n  rowNum HUC8 sitef huc8f siteShift dateShift newSite newDate  isNA isNAShift\n1      1   NA     1    NA         1         1   FALSE    TRUE FALSE     FALSE\n2      2   NA     1    NA         1     12157   FALSE    TRUE FALSE     FALSE\n3      3   NA     1    NA         1     12159   FALSE   FALSE FALSE     FALSE\n4      4   NA     1    NA         1     12160   FALSE   FALSE FALSE     FALSE\n5      5   NA     1    NA         1     12161   FALSE   FALSE FALSE     FALSE\n6      6   NA     1    NA         1     12162   FALSE   FALSE FALSE     FALSE\n  newDeploy deployID month meanByMonthRiverYear nMonthRiverYear\n1         1        1     4             7.330028              15\n2         1        2     4             7.330028              15\n3         0        2     4             7.330028              15\n4         0        2     4             7.330028              15\n5         0        2     4             7.330028              15\n6         0        2     4             7.330028              15\n  meanByMonthRiver nMonthRiver meanByMonth nMonth riverMS    resid.wb  pred.wb\n1         7.174471         260    7.656617   1146      OL  0.00000000 5.890803\n2         7.174471         260    7.656617   1146      OL -1.16836024 6.775860\n3         7.174471         260    7.656617   1146      OL  1.01697121 3.741362\n4         7.174471         260    7.656617   1146      OL  1.36486877 5.022631\n5         7.174471         260    7.656617   1146      OL -0.05961997 7.172953\n6         7.174471         260    7.656617   1146      OL  0.27705812 7.602942\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(tempDataSyncS$river)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"WB JIMMY\"    \"WB MITCHELL\" \"WB OBEAR\"    \"WEST BROOK\" \n```\n\n\n:::\n\n```{.r .cell-code}\ntempDataSyncS <- tempDataSyncS %>% mutate(siteYear = paste(site, year, sep = \"_\"))\n```\n:::\n\n\n\n\n\n\nAny missing data?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$airTemp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$airTempLagged1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$airTempLagged2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(is.na(tempDataSyncS$flowLS))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nVisualize data. Note that air temp is standardized. By site? Or among sites?\n\n::: panel-tabset\n\n#### Air temp\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tempDataSyncS,aes(dOY,airTemp))+\n  geom_line(aes(color=factor(year))) +\n  facet_grid(year~riverOrdered)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Water temp\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tempDataSyncS,aes(dOY,temp))+\n  geom_line(aes(color=factor(year)))+\n  facet_grid(year~riverOrdered)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Flow (log and std)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tempDataSyncS,aes(dOY,flowLS))+\n  geom_line(aes(color=factor(year)))+\n  facet_grid(year~riverOrdered)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Tw ~ Ta + F\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntempDataSyncS %>% ggplot(aes(x = airTemp, y = temp, color = flowLS)) + geom_point(size = 0.2) + facet_wrap(~riverOrdered) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Ta ~ F\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntempDataSyncS %>% ggplot(aes(x = airTemp, y = flowLS, colour = temp)) + geom_point(size = 0.2) + facet_wrap(~riverOrdered) + theme_bw() + ggpubr::stat_cor()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n:::\n\n\n### Specify model\n\nStraight from Letcher et al (2016)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[river[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]]  <- inprod(B.0[], X.0[evalRows[i], ]) + inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nRiver){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:K.0) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n      \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] <- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year <- L + 1\n    sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"JAGS models/DailyTempModelJAGS_Letcher.txt\")\n```\n:::\n\n\n\n\n\n\n\n### Organize objects\n\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: **must be TRUE!**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# row indices for first observation in each site-year\nfirstObsRows <- unlist(tempDataSyncS %>% \n  group_by(siteYear) %>%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %>%\n  ungroup() %>% \n  select(index))\nnFirstObsRows <- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nGet row indices for all other observations\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevalRows <- unlist(tempDataSyncS %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))\nnEvalRows <- length(evalRows)\n```\n:::\n\n\n\n\n\n\nFixed and random effect data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.fixed <- data.frame(intercept = 1\n                         ,airTemp = tempDataSyncS$airTemp \n                         ,airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         ,flow =  tempDataSyncS$flowLS\n                         \n                         ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         ,river1 = tempDataSyncS$river1\n                         ,river2 = tempDataSyncS$river2\n                         ,river3 = tempDataSyncS$river3\n                         \n                         #river interaction with air temp\n                         ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years <- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n```\n:::\n\n\n\n\n\n\nMisc. objects\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTi <- length(unique(tempDataSyncS$year))\nL <- dim(data.random.years)[2]\nW.year <- diag(L)\n```\n:::\n\n\n\n\n\n\nCombine data in list\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine data in a list\njags.data <- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = data.fixed,\n                  \"X.year\" = data.random.years,\n                  \"K.0\" = dim(data.fixed)[2],\n                  \"nRiver\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"river\" = as.factor(tempDataSyncS$riverOrdered)\n                  )\n```\n:::\n\n\n\n\n\n\nParameters to monitor\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njags.params <- c(\"residuals\",\n            \"deviance\",\n #           \"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.year\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\"\n            )\n```\n:::\n\n\n\n\n\n\n\n### Fit model\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0 <- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = \"JAGS models/DailyTempModelJAGS_Letcher.txt\",\n            n.chains = 10, n.thin = 5, n.burnin = 500, n.iter = 1500, DIC = TRUE)\nbeep()\n```\n:::\n\n\n\n\n\n\n\n#### Save model output\n\nSave to file\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(fit0, \"Model objects/LetcherTempModel_PeerJ2016.RDS\")\n```\n:::\n\n\n\n\n\n\nRead in fitted model object\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0 <- readRDS(\"Model objects/LetcherTempModel_PeerJ2016.RDS\")\n```\n:::\n\n\n\n\n\n\nGet MCMC samples and summary\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod <- fit0\n# generate MCMC samples and store as an array\nmodelout <- top_mod$BUGSoutput\nMcmcList <- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary <- modelout$summary\nhead(param.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             mean         sd       2.5%        25%        50%        75%\nB.0[1] 15.0942825 0.17271642 14.7510778 14.9831293 15.0931367 15.2073322\nB.0[2]  1.5201578 0.02723257  1.4673158  1.5016734  1.5199031  1.5390533\nB.0[3]  0.1955279 0.01619090  0.1631752  0.1845110  0.1954986  0.2069212\nB.0[4]  0.1545523 0.01642121  0.1208057  0.1442824  0.1542702  0.1647775\nB.0[5]  0.3629916 0.01520228  0.3334788  0.3523900  0.3635001  0.3730769\nB.0[6] -0.1292206 0.01180889 -0.1523336 -0.1368216 -0.1290627 -0.1214532\n            97.5%      Rhat n.eff\nB.0[1] 15.4398786 1.0038273  1000\nB.0[2]  1.5732813 1.0034739  1100\nB.0[3]  0.2254210 0.9999951  2000\nB.0[4]  0.1871898 1.0028484  1300\nB.0[5]  0.3919732 1.0006563  2000\nB.0[6] -0.1065415 0.9998802  2000\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### Check convergence\n\nAny problematic R-hat values (>1.05)?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.05]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnamed numeric(0)\n```\n\n\n:::\n:::\n\n\n\n\n\n\nView traceplots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"mu.year\", \n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-21-7.png){width=672}\n:::\n:::\n\n\n\n\n\n\nConvert to ggs object\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      <int> <int> <fct>     <dbl>\n1         1     1 ar1[1]    0.773\n2         2     1 ar1[1]    0.799\n3         3     1 ar1[1]    0.817\n4         4     1 ar1[1]    0.796\n5         5     1 ar1[1]    0.811\n6         6     1 ar1[1]    0.801\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Goodness of fit\n\nFormat observed and predicted values\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMcmcdat <- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n```\n:::\n\n\n\n\n\n\nBayesian p-value\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4975728\n```\n\n\n:::\n:::\n\n\n\n\n\n\nPP-check, global\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppdat_obs_mean <- apply(ppdat_obs, 2, mean)\nppdat_exp_mean <- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nPP-check by river and year\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean, river = tempDataSyncS$riverOrdered, year = tempDataSyncS$year) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\") +\n  facet_grid(year ~ river)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Plot model output\n\n*Output is identical to Letcher et al. (2016), as expected*\n\n#### Dot plots\n\n::: panel-tabset\n\n##### Intercept\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter == \"B.0[1]\"), sort = FALSE) + scale_y_discrete(labels = \"Intercept\") + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Betas\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(\"B.0\", unique(ggfit$Parameter), value = TRUE)[-1]) %>%\n                  mutate(Parameter = factor(Parameter, levels = c(\"B.0[2]\", \"B.0[3]\", \"B.0[4]\", \"B.0[5]\", \"B.0[6]\", \n                                                                  \"B.0[7]\", \"B.0[8]\", \"B.0[9]\", \"B.0[10]\", \"B.0[11]\", \"B.0[12]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"T\", \"T(d-1)\", \"T(d-2)\", \"F\", \"T*F\", \"OL\", \"OS\", \"IS\", \"OL*T\", \"OS*T\", \"IS*T\")), limits = rev) + theme_bw() + geom_vline(xintercept = 0, linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Autoregressive terms\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(\"ar1\", unique(ggfit$Parameter), value = TRUE)) %>%\n                  mutate(Parameter = factor(Parameter, levels = c(\"ar1Mean\", \"ar1SD\", \"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"ar1Mean\", \"ar1SD\", \"ar1[WB]\", \"ar1[OL]\", \"ar1[OS]\", \"ar1[IL]\")), limits = rev) + theme_bw() + xlim(0,1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Within year trends\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit, family = \"mu.year\", sort = FALSE) + scale_y_discrete(labels = rev(c(\"Intercept\", \"Linear\", \"Quadratic\", \"Cubic\")), limits = rev) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Site-specific intercepts\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>% \n  filter(Parameter %in% c(\"B.0[1]\", \"B.0[7]\", \"B.0[8]\", \"B.0[9]\")) %>% \n  spread(key = Parameter, value = value) %>%\n  rename(int_WB = 3, os_OL = 4, os_OS = 5, os_IS = 6) %>%\n  mutate(int_OL = int_WB + os_OL,\n         int_OS = int_WB + os_OS,\n         int_IS = int_WB + os_IS) %>%\n  select(-c(os_OL, os_OS, os_IS)) %>%\n  gather(int_WB:int_IS, key = \"Parameter\", value = \"value\") %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"int_WB\", \"int_OL\", \"int_OS\", \"int_IS\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Site specific slopes\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>% \n  filter(Parameter %in% c(\"B.0[2]\", \"B.0[10]\", \"B.0[11]\", \"B.0[12]\")) %>% \n  spread(key = Parameter, value = value) %>%\n  rename(slo_WB = 6, os_OL = 3, os_OS = 4, os_IS = 5) %>%\n  mutate(slo_OL = slo_WB + os_OL,\n         slo_OS = slo_WB + os_OS,\n         slo_IS = slo_WB + os_IS) %>%\n  select(-c(os_OL, os_OS, os_IS)) %>%\n  gather(slo_WB:slo_IS, key = \"Parameter\", value = \"value\") %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n:::\n\n\n\n#### Marginal efffects\n\nMarginal effects of air temperature x flow interaction, not accounting for lagged temperature effects, temporal autocorrelation, \n\n::: panel-tabset\n\n##### West Brook\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WEST BROOK\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\") #+ \n  #geom_point(data = tempDataSyncS %>% filter(riverOrdered == myriv), aes(x = airTemp, y = flowLS, color = temp)) +\n  #scale_color_distiller(palette = \"Spectral\", limits = c(0,23)) \n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-33-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n##### Jimmy\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB JIMMY\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[7]\",1] + param.summary[\"B.0[10]\",1]*pred_df$x_temp\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-34-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n##### Mitchell\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB MITCHELL\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[8]\",1] + param.summary[\"B.0[11]\",1]*pred_df$x_temp\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-35-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n##### Obear\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB OBEAR\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.0[1]\",1] + param.summary[\"B.0[2]\",1]*pred_df$x_temp + param.summary[\"B.0[5]\",1]*pred_df$x_flow + param.summary[\"B.0[6]\",1]*pred_df$x_temp*pred_df$x_flow + param.summary[\"B.0[9]\",1] + param.summary[\"B.0[12]\",1]*pred_df$x_temp\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-36-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n:::\n\n\n## Hierarchical\n\nFit the same model as above, but draw the intercepts and temperature effects hierarchically and check that the output matches\n\n\n### Specify model\n\nModify Letcher model to estimate intercepts and slopes hierarchically\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"model {\n\n    ###----------------- LIKELIHOOD -----------------###\n    \n    # Days without an observation on the previous day (first observation in a series)\n    # No autoregressive term\n    \n    for (i in 1:nFirstObsRows){\n      temp[firstObsRows[i]] ~ dnorm(stream.mu[firstObsRows[i]], pow(sigma, -2)) \n      stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]\n      trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + \n                                inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) + \n                                inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])\n\n      }\n    \n    # Days with an observation on the previous dat (all days following the first day)\n    # Includes autoregressive term (ar1)\n    \n    for (i in 1:nEvalRows){ \n      temp[evalRows[i]] ~ dnorm(stream.mu[evalRows[i]], pow(sigma, -2))\n      stream.mu[evalRows[i]] <- trend[evalRows[i]] + ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[ evalRows[i]-1 ])\n      trend[evalRows[i]] <- inprod(B.0[], X.0[evalRows[i], ]) + \n                            inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) + \n                            inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])\n      }\n    \n    \n    ###----------------- PRIORS ---------------------###\n    \n    # ar1, hierarchical by site\n    for (i in 1:nsites){\n      ar1[i] ~ dnorm(ar1Mean, pow(ar1SD,-2) ) T(-1,1)       \n    }\n    ar1Mean ~ dunif( -1,1 ) \n    ar1SD ~ dunif( 0, 2 )\n\n    # model variance\n    sigma ~ dunif(0, 100)\n    \n    \n    # fixed effect coefficients\n    for (k in 1:Kfixed) {\n      B.0[k] ~ dnorm(0, 0.001)\n      }\n      \n    # random effect coefficients (by site)\n    for (k in 1:Krandom) {\n      sigma.B.site[k] ~ dunif(0, 100)\n      for (i in 1:nsites) {\n        B.site[i,k] ~ dnorm(0, pow(sigma.B.site[k], -2))\n      }\n    }\n    \n    # YEAR EFFECTS\n    # Priors for random effects of year\n    for (t in 1:Ti) { # Ti years\n      B.year[t, 1:L] ~ dmnorm(mu.year[ ], tau.B.year[ , ])\n      }\n      \n    mu.year[1] <- 0\n    \n    for (l in 2:L) {\n      mu.year[l] ~ dnorm(0, 0.0001)\n      }\n      \n    # Prior on multivariate normal std deviation\n    tau.B.year[1:L, 1:L] ~ dwish(W.year[ , ], df.year)\n    df.year <- L + 1\n    sigma.B.year[1:L, 1:L] <- inverse(tau.B.year[ , ])\n    for (l in 1:L) {\n      for (l.prime in 1:L) {\n        rho.B.year[l, l.prime] <- sigma.B.year[l, l.prime]/sqrt(sigma.B.year[l, l]*sigma.B.year[l.prime, l.prime])\n        }\n      sigma.b.year[l] <- sqrt(sigma.B.year[l, l])\n    }\n    \n    \n    ###----------------- DERIVED VALUES -------------###\n    residuals[1] <- 0 # hold the place. Not sure if this is necessary...\n    for (i in 2:n) {\n      residuals[i] <- temp[i] - stream.mu[i]\n    }\n    \n    }\", file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical.txt\")\n```\n:::\n\n\n\n\n\n\n\n### Organize objects\n\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: **must be TRUE!**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# row indices for first observation in each site-year\nfirstObsRows <- unlist(tempDataSyncS %>% \n  group_by(siteYear) %>%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %>%\n  ungroup() %>% \n  select(index))\nnFirstObsRows <- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nGet row indices for all other observations\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevalRows <- unlist(tempDataSyncS %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))\nnEvalRows <- length(evalRows)\n```\n:::\n\n\n\n\n\n\nFixed and random effect data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.random <- data.frame(intercept = 1,\n                          airTemp = tempDataSyncS$airTemp )\n\ndata.fixed <- data.frame(#intercept = 1\n                         #,airTemp = tempDataSyncS$airTemp \n                         airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         ,flow =  tempDataSyncS$flowLS\n                         \n                         ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         # ,river1 = tempDataSyncS$river1\n                         # ,river2 = tempDataSyncS$river2\n                         # ,river3 = tempDataSyncS$river3\n                         # \n                         # #river interaction with air temp\n                         # ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         # ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         # ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years <- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n```\n:::\n\n\n\n\n\n\nMisc. objects\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTi <- length(unique(tempDataSyncS$year))\nL <- dim(data.random.years)[2]\nW.year <- diag(L)\n```\n:::\n\n\n\n\n\n\nCombine data in list\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine data in a list\njags.data <- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = as.matrix(data.fixed),\n                  \"X.site\" = as.matrix(data.random),\n                  \"X.year\" = as.matrix(data.random.years),\n                  \"Kfixed\" = dim(data.fixed)[2],\n                  \"Krandom\" = dim(data.random)[2],\n                  \"nsites\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"site\" = as.numeric(tempDataSyncS$riverOrdered)\n                  )\n```\n:::\n\n\n\n\n\n\nParameters to monitor\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njags.params <- c(\"residuals\",\n            \"deviance\",\n            #\"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.site\",\n            \"B.year\",\n            #\"mu.B.river\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\",\n            \"sigma.B.site\"\n            )\n```\n:::\n\n\n\n\n\n\n\n### Fit model\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0_h <- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, \n                        model.file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical.txt\",\n                        n.chains = 10, n.thin = 10, n.burnin = 1000, n.iter = 3000, DIC = TRUE)\nbeep()\n```\n:::\n\n\n\n\n\n\n\n\n#### Save model output\n\nSave to file\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(fit0_h, \"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n```\n:::\n\n\n\n\n\n\nRead in fitted model object\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0_h <- readRDS(\"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n```\n:::\n\n\n\n\n\n\nGet MCMC samples and summary\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod <- fit0_h\n# generate MCMC samples and store as an array\nmodelout <- top_mod$BUGSoutput\nMcmcList <- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary <- modelout$summary\nhead(param.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  mean         sd       2.5%        25%        50%        75%\nB.0[1]       0.1996561 0.01588663  0.1684552  0.1886198  0.1996409  0.2104592\nB.0[2]       0.1601317 0.01647412  0.1274510  0.1493978  0.1605079  0.1708984\nB.site[1,1] 15.0877438 0.17053466 14.7339107 14.9767446 15.0888867 15.2033860\nB.site[2,1] 14.5154004 0.17175886 14.1691837 14.4035158 14.5196452 14.6311073\nB.site[3,1] 15.6480333 0.17548672 15.3041803 15.5293132 15.6508855 15.7645190\nB.site[4,1] 14.5004781 0.16993161 14.1586293 14.3871769 14.5034804 14.6162630\n                 97.5%     Rhat n.eff\nB.0[1]       0.2306411 1.001439  1900\nB.0[2]       0.1926820 1.002371  1400\nB.site[1,1] 15.4179276 1.000438  2000\nB.site[2,1] 14.8386405 1.001710  1700\nB.site[3,1] 15.9918072 1.000590  2000\nB.site[4,1] 14.8276109 1.001154  2000\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### Check convergence\n\nAny problematic R-hat values (>1.05)?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.05]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nresiduals[7152] \n       1.056715 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nView traceplots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"B.site\", \"mu.year\",\n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-49-9.png){width=672}\n:::\n:::\n\n\n\n\n\n\nConvert to ggs object\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      <int> <int> <fct>     <dbl>\n1         1     1 ar1[1]    0.794\n2         2     1 ar1[1]    0.777\n3         3     1 ar1[1]    0.784\n4         4     1 ar1[1]    0.805\n5         5     1 ar1[1]    0.789\n6         6     1 ar1[1]    0.785\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Goodness of fit\n\nFormat observed and predicted values\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMcmcdat <- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n```\n:::\n\n\n\n\n\n\nBayesian p-value\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4987867\n```\n\n\n:::\n:::\n\n\n\n\n\n\nPP-check\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppdat_obs_mean <- apply(ppdat_obs, 2, mean)\nppdat_exp_mean <- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Plot model output\n\n#### Dot plots\n\n*Output is the same! Good!*\n\nIntercepts\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>%\n  filter(Parameter %in% c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\")) %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"int_WB\", \"int_OL\", \"int_OS\", \"int_IS\")), limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSlopes, temperature effect\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>%\n  filter(Iteration > 125) %>% \n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\")) %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n## Hierarchical, flow var.\n\nUse the same hierarchical model as above, but allow effect of flow and flow-temp interaction to vary by site. \n\n\n### Organize objects\n\nGet first observation indices and check that nFirstRowObs equals the number of unique site-years: **must be TRUE!**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# row indices for first observation in each site-year\nfirstObsRows <- unlist(tempDataSyncS %>% \n  group_by(siteYear) %>%\n  summarize(index = rowNum[min(which(!is.na(temp)))]) %>%\n  ungroup() %>% \n  select(index))\nnFirstObsRows <- length(firstObsRows)\n\n# does the number of first observations match the number of site years?\nnFirstObsRows == length(unique(tempDataSyncS$siteYear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nGet row indices for all other observations\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevalRows <- unlist(tempDataSyncS %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))\nnEvalRows <- length(evalRows)\n```\n:::\n\n\n\n\n\n\nFixed and random effect data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.random <- data.frame(intercept = 1,\n                          airTemp = tempDataSyncS$airTemp, \n                          flow =  tempDataSyncS$flowLS,\n                          airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS)\n\ndata.fixed <- data.frame(#intercept = 1\n                         #,airTemp = tempDataSyncS$airTemp \n                         airTempLag1 = tempDataSyncS$airTempLagged1\n                         ,airTempLag2 = tempDataSyncS$airTempLagged2\n                         \n                         # ,flow =  tempDataSyncS$flowLS\n                         # \n                         # ,airFlow = tempDataSyncS$airTemp * tempDataSyncS$flowLS\n#                         ,air1Flow = tempDataSyncS$airTempLagged1 * tempDataSyncS$flowLS\n#                         ,air2Flow = tempDataSyncS$airTempLagged2 * tempDataSyncS$flowLS\n                         \n                         #main river effects\n                         # ,river1 = tempDataSyncS$river1\n                         # ,river2 = tempDataSyncS$river2\n                         # ,river3 = tempDataSyncS$river3\n                         # \n                         # #river interaction with air temp\n                         # ,river1Air = tempDataSyncS$river1 * tempDataSyncS$airTemp\n                         # ,river2Air = tempDataSyncS$river2 * tempDataSyncS$airTemp\n                         # ,river3Air = tempDataSyncS$river3 * tempDataSyncS$airTemp\n                         \n                          ) \n\ndata.random.years <- data.frame(intercept.year = 1, \n                     dOY  = tempDataSyncS$dOY, \n                     dOY2 = tempDataSyncS$dOY^2,\n                     dOY3 = tempDataSyncS$dOY^3\n                     )\n```\n:::\n\n\n\n\n\n\nMisc. objects\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTi <- length(unique(tempDataSyncS$year))\nL <- dim(data.random.years)[2]\nW.year <- diag(L)\n```\n:::\n\n\n\n\n\n\nCombine data in list\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine data in a list\njags.data <- list(\"temp\" = tempDataSyncS$temp,\n                  \"nFirstObsRows\" = nFirstObsRows,\n                  \"firstObsRows\" = firstObsRows,\n                  \"nEvalRows\" = nEvalRows,\n                  \"evalRows\" = evalRows,\n                  \"X.0\" = as.matrix(data.fixed),\n                  \"X.site\" = as.matrix(data.random),\n                  \"X.year\" = as.matrix(data.random.years),\n                  \"Kfixed\" = dim(data.fixed)[2],\n                  \"Krandom\" = dim(data.random)[2],\n                  \"nsites\" = length(unique(tempDataSyncS$site)),\n                  \"Ti\" = Ti,\n                  \"L\" = L,\n                  \"W.year\" = W.year,\n                  \"n\" = dim(tempDataSyncS)[1],\n                  \"year\" = as.factor(tempDataSyncS$year),\n                  \"site\" = as.numeric(tempDataSyncS$riverOrdered)\n                  )\n```\n:::\n\n\n\n\n\n\nParameters to monitor\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njags.params <- c(\"residuals\",\n            \"deviance\",\n            #\"pD\",\n            \"sigma\",\n            \"B.0\",\n            \"B.site\",\n            \"B.year\",\n            #\"mu.B.river\",\n            \"rho.B.year\",\n            \"mu.year\",\n            \"sigma.b.year\",\n            \"stream.mu\",\n            \"ar1\" ,\n            \"ar1Mean\",\n            \"ar1SD\",\n            \"temp\",\n            \"sigma.B.site\"\n            )\n```\n:::\n\n\n\n\n\n\n\n### Fit model\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0_h2 <- jags.parallel(data = jags.data, inits = NULL, parameters.to.save = jags.params, \n                         model.file = \"JAGS models/DailyTempModelJAGS_Letcher_hierarchical.txt\",\n                         n.chains = 10, n.thin = 10, n.burnin = 1000, n.iter = 3000, DIC = TRUE)\nbeep()\n```\n:::\n\n\n\n\n\n\n\n#### Save model ouput\n\nSave to file\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(fit0_h2, \"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n```\n:::\n\n\n\n\n\n\nRead in fitted model object\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit0_h2 <- readRDS(\"Model objects/LetcherTempModel_PeerJ2016_hierarchical.RDS\")\n```\n:::\n\n\n\n\n\n\nGet MCMC samples and summary\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod <- fit0_h2\n# generate MCMC samples and store as an array\nmodelout <- top_mod$BUGSoutput\nMcmcList <- vector(\"list\", length = dim(modelout$sims.array)[2])\nfor(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }\n# rbind MCMC samples from 10 chains \nMcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]], McmcList[[4]], McmcList[[5]], McmcList[[6]], McmcList[[7]], McmcList[[8]], McmcList[[9]], McmcList[[10]])\nparam.summary <- modelout$summary\nhead(param.summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  mean         sd       2.5%        25%        50%        75%\nB.0[1]       0.1996561 0.01588663  0.1684552  0.1886198  0.1996409  0.2104592\nB.0[2]       0.1601317 0.01647412  0.1274510  0.1493978  0.1605079  0.1708984\nB.site[1,1] 15.0877438 0.17053466 14.7339107 14.9767446 15.0888867 15.2033860\nB.site[2,1] 14.5154004 0.17175886 14.1691837 14.4035158 14.5196452 14.6311073\nB.site[3,1] 15.6480333 0.17548672 15.3041803 15.5293132 15.6508855 15.7645190\nB.site[4,1] 14.5004781 0.16993161 14.1586293 14.3871769 14.5034804 14.6162630\n                 97.5%     Rhat n.eff\nB.0[1]       0.2306411 1.001439  1900\nB.0[2]       0.1926820 1.002371  1400\nB.site[1,1] 15.4179276 1.000438  2000\nB.site[2,1] 14.8386405 1.001710  1700\nB.site[3,1] 15.9918072 1.000590  2000\nB.site[4,1] 14.8276109 1.001154  2000\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### Check convergence\n\nAny problematic R-hat values (>1.05)?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.05]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nresiduals[7152] \n       1.056715 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nView traceplots\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMCMCtrace(top_mod, ind = TRUE, \n          params = c(\"B.0\", \"B.site\", \"mu.year\", \n                     \"ar1\", \n                     \"sigma\"), pdf = FALSE)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-67-9.png){width=672}\n:::\n:::\n\n\n\n\n\n\nConvert to ggs object\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)\nhead(ggfit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Iteration Chain Parameter value\n      <int> <int> <fct>     <dbl>\n1         1     1 ar1[1]    0.794\n2         2     1 ar1[1]    0.777\n3         3     1 ar1[1]    0.784\n4         4     1 ar1[1]    0.805\n5         5     1 ar1[1]    0.789\n6         6     1 ar1[1]    0.785\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Goodness of fit\n\nFormat observed and predicted values\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMcmcdat <- as_tibble(Mcmcdat)\n\n# subset expected and observed MCMC samples\nppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"stream.mu[\")])\nppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), \"temp[\")])\n```\n:::\n\n\n\n\n\n\nBayesian p-value\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4987867\n```\n\n\n:::\n:::\n\n\n\n\n\n\nPP-check\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppdat_obs_mean <- apply(ppdat_obs, 2, mean)\nppdat_exp_mean <- apply(ppdat_exp, 2, mean)\ntibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>% \n  ggplot(aes(x = obs, y = exp)) + \n  geom_point(alpha = 0.1) + \n  # geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Observed\") + ylab(\"Predicted (mean)\")\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Plot model output\n\n\n#### Dot plots\n\n::: panel-tabset\n\n##### Site intercepts\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>%\n  filter(Parameter %in% c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\")) %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,1]\", \"B.site[2,1]\", \"B.site[3,1]\", \"B.site[4,1]\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"int_WB\", \"int_OL\", \"int_OS\", \"int_IS\")), limits = rev) + \n  ylab(\"Intercepts\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Site slopes - temp\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>%\n  filter(Parameter %in% c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\")) %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,2]\", \"B.site[2,2]\", \"B.site[3,2]\", \"B.site[4,2]\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, temperature effect\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Site slopes - flow\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>%\n  filter(Parameter %in% c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\")) %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,3]\", \"B.site[2,3]\", \"B.site[3,3]\", \"B.site[4,3]\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, flow effect\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Site slopes - temp x flow\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggfit %>%\n  filter(Parameter %in% c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\")) %>%\n  mutate(Parameter = factor(Parameter, levels = c(\"B.site[1,4]\", \"B.site[2,4]\", \"B.site[3,4]\", \"B.site[4,4]\"))) %>%\n  ggs_caterpillar(sort = FALSE) +\n  scale_y_discrete(labels = rev(c(\"slo_WB\", \"slo_OL\", \"slo_OS\", \"slo_IS\")), limits = rev) + \n  ylab(\"Slopes, temp-flow interaction\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Autoregressive terms\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit %>% filter(Parameter %in% grep(\"ar1\", unique(ggfit$Parameter), value = TRUE)) %>%\n                  mutate(Parameter = factor(Parameter, levels = c(\"ar1Mean\", \"ar1SD\", \"ar1[1]\", \"ar1[2]\", \"ar1[3]\", \"ar1[4]\"))),\n                sort = FALSE) + scale_y_discrete(labels = rev(c(\"ar1Mean\", \"ar1SD\", \"ar1[WB]\", \"ar1[OL]\", \"ar1[OS]\", \"ar1[IL]\")), limits = rev) + theme_bw() + xlim(0,1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Within year trends\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggs_caterpillar(ggfit, family = \"mu.year\", sort = FALSE) + scale_y_discrete(labels = rev(c(\"Intercept\", \"Linear\", \"Quadratic\", \"Cubic\")), limits = rev) + theme_bw()\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n:::\n\n\n\n#### Marginal efffects\n\nMarginal effects of air temperature x flow interaction, not accounting for lagged temperature effects, temporal autocorrelation, \n\n::: panel-tabset\n\n##### West Brook\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WEST BROOK\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$flowLS[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.site[1,1]\",1] + param.summary[\"B.site[1,2]\",1]*pred_df$x_temp + param.summary[\"B.site[1,3]\",1]*pred_df$x_flow + param.summary[\"B.site[1,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\") #+ \n  #geom_point(data = tempDataSyncS %>% filter(riverOrdered == myriv), aes(x = airTemp, y = flowLS, color = temp)) +\n  #scale_color_distiller(palette = \"Spectral\", limits = c(0,23)) \n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-78-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n##### Jimmy\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB JIMMY\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.site[2,1]\",1] + param.summary[\"B.site[2,2]\",1]*pred_df$x_temp + param.summary[\"B.site[2,3]\",1]*pred_df$x_flow + param.summary[\"B.site[2,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-79-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n##### Mitchell\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB MITCHELL\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.site[3,1]\",1] + param.summary[\"B.site[3,2]\",1]*pred_df$x_temp + param.summary[\"B.site[3,3]\",1]*pred_df$x_flow + param.summary[\"B.site[3,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-80-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n##### Obear\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up\nnp <- 100\nmyriv <- \"WB OBEAR\"\nx_temp <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\nx_flow <- seq(from = min(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              to = max(tempDataSyncS$airTemp[tempDataSyncS$riverOrdered == myriv]),\n              length.out = np)\npred_df <- expand_grid(x_temp, x_flow)\n\n# predict from model\npred_df$pred <- param.summary[\"B.site[4,1]\",1] + param.summary[\"B.site[4,2]\",1]*pred_df$x_temp + param.summary[\"B.site[4,3]\",1]*pred_df$x_flow + param.summary[\"B.site[4,4]\",1]*pred_df$x_temp*pred_df$x_flow\n\n# lines \np1 <- ggplot(pred_df, aes(x = x_temp, y = pred, color = x_flow, group = x_flow)) +\n  geom_line() +\n  scale_color_distiller(palette = \"BrBG\", direction = +1) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  labs(color = \"Flow\") + xlab(\"Air temperature\") + ylab(\"Water temperature\") + ylim(6.5,20)\n# heatmap\np2 <- ggplot(pred_df, aes(x = x_temp, y = x_flow)) +\n  geom_tile(aes(fill = pred)) +\n  scale_fill_distiller(palette = \"Spectral\", limits = c(6.5,20)) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +\n  labs(fill = \"Water\\ntemp.\") + xlab(\"Air temperature\") + ylab(\"Flow\")\n# combine\negg::ggarrange(p1, p2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ModelTemp-Letcher_files/figure-html/unnamed-chunk-81-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}