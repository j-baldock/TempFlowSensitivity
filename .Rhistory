<<<<<<< HEAD
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
#ylim(-5,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "Leidy Creek Mouth NWIS") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
#ylim(-5,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "McGeeCreekLower") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub <- dat %>%
filter(site_name == "McGeeCreekLower") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
#ylim(-5,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "McGeeCreekTrib") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
#ylim(-5,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(20,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "McGeeCreekUpper") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "McGeeCreekTrib") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
dat %>% filter(site_name == "McGeeCreekTrib") %>% #select(date, tempc_mean, air_temp_mean) %>%
ggplot() +
geom_line(aes(x = date, y = air_temp_mean), color = "darkorange") +
geom_line(aes(x = date, y = tempc_mean), color = "blue") +
theme_bw() + ylab("temperature (deg C)")
sub <- dat %>%
filter(site_name == "McGeeCreekTrib") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "red") +
facet_wrap(~year)
sub
sub
sub %>% filter(yday >= 125, yday <= 175)
sub
sub %>% filter(yday >= 125, yday <= 175)
sub %>% filter(yday >= 125, yday <= 275)
?quantile()
sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = quantile(index, probs = 0.001),
index_high = quantile(index, probs = 0.999))
sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
ungroup()
sub_indexci <- sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
ungroup()
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(y = index_low), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue")
geom_hline()
?geom_hline()
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "McGeeCreekTrib") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub_indexci <- sub %>%
filter(yday >= 125, yday <= 275) %>%
=======
# random site effects
# data.random.sites <- data.frame(intercept.site = 1,
#                                 airTemp = dat$air_temp_mean)
data.random.sites <- data.frame(intercept.site = 1,
air = dat$z_air_temp_mean,
flow = dat$z_Yield_mm_log,
airflow = dat$z_air_temp_mean * dat$z_Yield_mm_log)
# random year effects
data.random.years <- data.frame(intercept.year = 1,
doy = dat$yday,
doy2 = dat$yday^2,
doy3 = dat$yday^3)
Ti <- length(unique(dat$year))
L <- dim(data.random.years)[2]
W.year <- diag(L)
# combine data in a list
jags.data <- list("temp" = dat$tempc_mean,
"nFirstObsRows" = nFirstRowObs,
"firstObsRows" = firstRowObs,
"nEvalRows" = nEvalRows,
"evalRows" = evalRows,
"X.0" = data.fixed,
"X.site" = data.random.sites,
"X.year" = data.random.years,
"nFixedCovs" = dim(data.fixed)[2],
"nRandCovs" = dim(data.random.sites)[2],
"site" = dat$site_code,
"year" = dat$year_code,
"nSite" = length(unique(dat$site_code)),
"Ti" = Ti,
"L" = L,
"W.year" = W.year,
"n" = dim(dat)[1])
# parameters to monitor
jags.params <- c("B.0", "B.site", "B.year",
"ar1", "ar1Mean", "ar1SD",
"mu.year", "sigma.b.year",
"sigma", "residuals", "R2",
"temp", "stream.mu", "rmse")
fit2 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = "DailyTempModelJAGS_mod.txt",
n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)
unique(dat$site_code)
unique(dat$site_name)
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River") %>%
mutate(Yield_mm_log = log(Yield_mm + 0.00001),
flow_mean_log = log(flow_mean + 0.00001),
rowNum = 1:nrow(.)) %>%
>>>>>>> 49513d6d7cbae1182d867ee620b05e25f35c44be
group_by(site_name) %>%
mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),
z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%
ungroup() %>%
mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),
site_code = as.numeric(as.factor(site_name)),
year_code = year - min(year) + 1) %>%
filter(year == 2020)
dat
unique(dat$site_code)
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv")
dat
as.factor(unique(dat$site_name))
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River")
as.factor(unique(dat$site_name))
# density distributions
dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw()
# temperature time series - break by site and year
dat %>% ggplot(aes(yday, tempc_mean))+
geom_line(aes(color = factor(year)))+
facet_grid(year~site_name)
# flow time series - break by site and year
dat %>% ggplot(aes(yday, Yield_mm_log))+
geom_line(aes(color = factor(year)))+
facet_grid(year~site_name)
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River") %>%
mutate(Yield_mm_log = log(Yield_mm + 0.00001),
flow_mean_log = log(flow_mean + 0.00001),
rowNum = 1:nrow(.)) %>%
group_by(site_name) %>%
mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),
z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%
ungroup() %>%
mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),
site_code = as.numeric(as.factor(site_name)),
year_code = year - min(year) + 1) %>%
filter(year == 2020)
dat
# flow time series - break by site and year
dat %>% ggplot(aes(yday, Yield_mm_log))+
geom_line(aes(color = factor(year)))+
facet_grid(year~site_name)
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River",
year == 2020) %>%
mutate(Yield_mm_log = log(Yield_mm + 0.00001),
flow_mean_log = log(flow_mean + 0.00001),
rowNum = 1:nrow(.)) %>%
group_by(site_name) %>%
mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),
z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%
ungroup() %>%
mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),
site_code = as.numeric(as.factor(site_name)),
year_code = year - min(year) + 1)
dat
# row indices for first observation in each site-year
firstObsRows <- unlist(dat %>%
group_by(siteYear) %>%
summarize(index = rowNum[min(which(!is.na(tempc_mean)))]) %>%
ungroup() %>%
select(index))
nFirstObsRows <- length(firstObsRows)
# does the number of first observations match the number of site years?
nFirstObsRows == length(unique(dat$siteYear))
evalRows <- unlist(dat %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))
nEvalRows <- length(evalRows)
# fixed effects
data.fixed <- data.frame(intercept = 1,
# air temperature
airTemp = dat$air_temp_mean,
airTempLag1 = dat$air_temp_mean_lag1,
airTempLag2 = dat$air_temp_mean_lag2,
# flow
flow = dat$z_Yield_mm_log,
# air temp x flow interaction
airFlow = dat$air_temp_mean * dat$z_Yield_mm_log
)
# random site effects
# data.random.sites <- data.frame(intercept.site = 1,
#                                 airTemp = dat$air_temp_mean)
data.random.sites <- data.frame(intercept.site = 1,
air = dat$z_air_temp_mean,
flow = dat$z_Yield_mm_log,
airflow = dat$z_air_temp_mean * dat$z_Yield_mm_log)
# random year effects
data.random.years <- data.frame(intercept.year = 1,
doy = dat$yday,
doy2 = dat$yday^2,
doy3 = dat$yday^3)
Ti <- length(unique(dat$year))
L <- dim(data.random.years)[2]
W.year <- diag(L)
# combine data in a list
jags.data <- list("temp" = dat$tempc_mean,
"nFirstObsRows" = nFirstRowObs,
"firstObsRows" = firstRowObs,
"nEvalRows" = nEvalRows,
"evalRows" = evalRows,
"X.0" = data.fixed,
"X.site" = data.random.sites,
"X.year" = data.random.years,
"nFixedCovs" = dim(data.fixed)[2],
"nRandCovs" = dim(data.random.sites)[2],
"site" = dat$site_code,
"year" = dat$year_code,
"nSite" = length(unique(dat$site_code)),
"Ti" = Ti,
"L" = L,
"W.year" = W.year,
"n" = dim(dat)[1])
# parameters to monitor
jags.params <- c("B.0", "B.site", "B.year",
"ar1", "ar1Mean", "ar1SD",
"mu.year", "sigma.b.year",
"sigma", "residuals", "R2",
"temp", "stream.mu", "rmse")
fit2 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = "DailyTempModelJAGS_mod.txt",
n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)
top_mod <- fit2
# generate MCMC samples and store as an array
modelout <- top_mod$BUGSoutput
McmcList <- vector("list", length = dim(modelout$sims.array)[2])
for(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }
# rbind MCMC samples from 10 chains
Mcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])
param.summary <- modelout$summary
head(param.summary)
ggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)
top_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.01]
MCMCtrace(top_mod, ind = TRUE, params = c("B.0", "B.site", "B.year", "ar1", "ar1Mean", "ar1SD", "mu.year", "sigma.b.year", "sigma", "R2", "rmse"), pdf = FALSE)
Mcmcdat <- as_tibble(Mcmcdat)
# subset expected and observed MCMC samples
ppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), "stream.mu[")])
ppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), "temp[")])
sum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])
ppdat_obs_mean <- apply(ppdat_obs, 2, mean)
ppdat_exp_mean <- apply(ppdat_exp, 2, mean)
tibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>%
ggplot(aes(x = obs, y = exp)) +
geom_point(alpha = 0.1) +
# geom_smooth(method = "lm") +
geom_abline(intercept = 0, slope = 1, color = "red") +
theme_bw() + theme(panel.grid = element_blank()) +
xlab("Observed") + ylab("Predicted")
mean(unlist(ggfit %>% filter(Parameter == "rmse") %>% select(value)))
ggs_density(ggfit, "rmse")
mean(unlist(ggfit %>% filter(Parameter == "R2") %>% select(value)))
ggs_density(ggfit, "R2")
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*1]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*2]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]",), myparams, value = TRUE),
Parameter != "Beta.site[4,3]"), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]",), myparams, value = TRUE),
Parameter != "B.site[4,3]"), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]",), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*4]"), myparams, value = TRUE)), sort = FALSE)
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River",
year == 2020) %>%
mutate(Yield_mm_log = log(Yield_mm + 0.00001),
flow_mean_log = log(flow_mean + 0.00001),
rowNum = 1:nrow(.),
z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE)) %>%
group_by(site_name) %>%
<<<<<<< HEAD
summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
ungroup()
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "NF Spread Creek Upper") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub_indexci <- sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
ungroup()
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "NF Spread Creek Upper") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub_indexci <- sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
ungroup()
sub %>%
ggplot() +
geom_point(aes(x = date, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20)
# geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub <- dat %>%
filter(site_name == "NF Spread Creek Upper") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
sub_indexci <- sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name) %>%
summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
ungroup()
#
# sub %>%
#   ggplot() +
#   geom_point(aes(x = date, y = index)) +
#   theme_bw() + ylab("temperature index") +
#   ylim(-20,20)
#   # geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub_indexci
sub
t.test(sub$index)
t.test(sub$index)$conf.int
t.test(sub$index, conf.level = 0.999)$conf.int
t.test(sub$index, conf.level = 0.999)$conf.int[1]
t.test(sub$index, conf.level = 0.999)$conf.int[2]
t.test(sub$index, conf.level = 0.999)$conf.int
sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name) %>%
summarize(index_low = t.test(index, conf.level = 0.999)$conf.int[1],
index_high = t.test(index, conf.level = 0.999)$conf.int[2]) %>%
ungroup()
sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = t.test(index, conf.level = 0.999)$conf.int[1],
index_high = t.test(index, conf.level = 0.999)$conf.int[2]) %>%
ungroup()
sub <- dat %>%
filter(site_name == "NF Spread Creek Upper") %>%
mutate(index = ifelse(tempc_mean > 0, (tempc_mean - air_temp_mean) / tempc_mean, NA),
year = year(date))
# sub_indexci <- sub %>%
#   filter(yday >= 125, yday <= 275) %>%
#   group_by(site_name) %>%
#   summarize(index_low = quantile(index, probs = 0.001, na.rm = TRUE),
#             index_high = quantile(index, probs = 0.999, na.rm = TRUE)) %>%
#   ungroup()
sub_indexci <- sub %>%
filter(yday >= 125, yday <= 275) %>%
group_by(site_name, year) %>%
summarize(index_low = t.test(index, conf.level = 0.999)$conf.int[1],
index_high = t.test(index, conf.level = 0.999)$conf.int[2]) %>%
ungroup()
#
# sub %>%
#   ggplot() +
#   geom_point(aes(x = date, y = index)) +
#   theme_bw() + ylab("temperature index") +
#   ylim(-20,20)
#   # geom_hline(yintercept = c(-1,1), color = "red")
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-20,20) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-5,5) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
sub %>%
ggplot() +
geom_point(aes(x = yday, y = index)) +
theme_bw() + ylab("temperature index") +
ylim(-2,2) +
# geom_hline(yintercept = c(-1,1), color = "red") +
geom_vline(xintercept = c(125,275), color = "blue") +
geom_hline(data = sub_indexci, aes(yintercept = index_low), color = "red") +
geom_hline(data = sub_indexci, aes(yintercept = index_high), color = "red") +
facet_wrap(~year)
quarto::quarto_render(output_format = "html")
=======
mutate(#z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),
z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%
ungroup() %>%
mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),
site_code = as.numeric(as.factor(site_name)),
year_code = year - min(year) + 1)
dat
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River",
year == 2020) %>%
mutate(Yield_mm_log = log(Yield_mm + 0.00001),
flow_mean_log = log(flow_mean + 0.00001),
rowNum = 1:nrow(.)) %>%
#group_by(site_name) %>%
mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),
z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%
#ungroup() %>%
mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),
site_code = as.numeric(as.factor(site_name)),
year_code = year - min(year) + 1)
dat
dat %>%
filter(z_Yield_mm_log != 0) %>%
ggplot(aes(x = z_air_temp_mean, y = z_Yield_mm_log)) +
geom_point() +
ggpubr::stat_cor(method = "pearson", label.x.npc = 0, label.y.npc = 0.1) +
facet_wrap(~site_name)
# row indices for first observation in each site-year
firstObsRows <- unlist(dat %>%
group_by(siteYear) %>%
summarize(index = rowNum[min(which(!is.na(tempc_mean)))]) %>%
ungroup() %>%
select(index))
nFirstObsRows <- length(firstObsRows)
# does the number of first observations match the number of site years?
nFirstObsRows == length(unique(dat$siteYear))
evalRows <- unlist(dat %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))
nEvalRows <- length(evalRows)
# fixed effects
data.fixed <- data.frame(intercept = 1,
# air temperature
airTemp = dat$air_temp_mean,
airTempLag1 = dat$air_temp_mean_lag1,
airTempLag2 = dat$air_temp_mean_lag2,
# flow
flow = dat$z_Yield_mm_log,
# air temp x flow interaction
airFlow = dat$air_temp_mean * dat$z_Yield_mm_log
)
# random site effects
# data.random.sites <- data.frame(intercept.site = 1,
#                                 airTemp = dat$air_temp_mean)
data.random.sites <- data.frame(intercept.site = 1,
air = dat$z_air_temp_mean,
flow = dat$z_Yield_mm_log,
airflow = dat$z_air_temp_mean * dat$z_Yield_mm_log)
# random year effects
data.random.years <- data.frame(intercept.year = 1,
doy = dat$yday,
doy2 = dat$yday^2,
doy3 = dat$yday^3)
Ti <- length(unique(dat$year))
L <- dim(data.random.years)[2]
W.year <- diag(L)
# combine data in a list
jags.data <- list("temp" = dat$tempc_mean,
"nFirstObsRows" = nFirstRowObs,
"firstObsRows" = firstRowObs,
"nEvalRows" = nEvalRows,
"evalRows" = evalRows,
"X.0" = data.fixed,
"X.site" = data.random.sites,
"X.year" = data.random.years,
"nFixedCovs" = dim(data.fixed)[2],
"nRandCovs" = dim(data.random.sites)[2],
"site" = dat$site_code,
"year" = dat$year_code,
"nSite" = length(unique(dat$site_code)),
"Ti" = Ti,
"L" = L,
"W.year" = W.year,
"n" = dim(dat)[1])
# parameters to monitor
jags.params <- c("B.0", "B.site", "B.year",
"ar1", "ar1Mean", "ar1SD",
"mu.year", "sigma.b.year",
"sigma", "residuals", "R2",
"temp", "stream.mu", "rmse")
fit2 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = "DailyTempModelJAGS_mod.txt",
n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)
top_mod <- fit2
# generate MCMC samples and store as an array
modelout <- top_mod$BUGSoutput
McmcList <- vector("list", length = dim(modelout$sims.array)[2])
for(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }
# rbind MCMC samples from 10 chains
Mcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])
param.summary <- modelout$summary
head(param.summary)
ggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)
top_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.01]
MCMCtrace(top_mod, ind = TRUE, params = c("B.0", "B.site", "B.year", "ar1", "ar1Mean", "ar1SD", "mu.year", "sigma.b.year", "sigma", "R2", "rmse"), pdf = FALSE)
Mcmcdat <- as_tibble(Mcmcdat)
# subset expected and observed MCMC samples
ppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), "stream.mu[")])
ppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), "temp[")])
sum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])
ppdat_obs_mean <- apply(ppdat_obs, 2, mean)
ppdat_exp_mean <- apply(ppdat_exp, 2, mean)
tibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>%
ggplot(aes(x = obs, y = exp)) +
geom_point(alpha = 0.1) +
# geom_smooth(method = "lm") +
geom_abline(intercept = 0, slope = 1, color = "red") +
theme_bw() + theme(panel.grid = element_blank()) +
xlab("Observed") + ylab("Predicted")
mean(unlist(ggfit %>% filter(Parameter == "rmse") %>% select(value)))
ggs_density(ggfit, "rmse")
mean(unlist(ggfit %>% filter(Parameter == "R2") %>% select(value)))
ggs_density(ggfit, "R2")
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*1]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*2]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]",), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*4]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]",), myparams, value = TRUE)), sort = FALSE) + xlim(-5,5)
mean(unlist(ggfit %>% filter(Parameter == "R2") %>% select(value))) + xlim(0,1)
ggs_density(ggfit, "R2")
mean(unlist(ggfit %>% filter(Parameter == "R2") %>% select(value)))
ggs_density(ggfit, "R2") + xlim(0,1)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*4]"), myparams, value = TRUE)), sort = FALSE) + xlim(-5,5)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*4]"), myparams, value = TRUE)), sort = FALSE) + xlim(-2.5,2.5)
mean(unlist(ggfit %>% filter(Parameter == "rmse") %>% select(value)))
ggs_density(ggfit, "rmse") + xlim(0,2)
ggs_density(ggfit, "rmse")
dat <- read_csv("data/EcoDrought_FlowTempData_formatted.csv") %>%
filter(basin == "Snake River",
year == 2020) %>%
mutate(Yield_mm_log = log(Yield_mm + 0.00001),
flow_mean_log = log(flow_mean + 0.00001),
rowNum = 1:nrow(.)) %>%
#group_by(site_name) %>%
mutate(z_Yield_mm_log = scale(Yield_mm_log, center = TRUE, scale = TRUE),
z_air_temp_mean = scale(air_temp_mean, center = TRUE, scale = TRUE)) %>%
#ungroup() %>%
mutate(z_Yield_mm_log = ifelse(is.na(z_Yield_mm_log), 0, z_Yield_mm_log),
site_code = as.numeric(as.factor(site_name)),
year_code = year - min(year) + 1)
dat
# density distributions
dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw()
dat %>% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw()
dat %>% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw()
# time series plots
dat %>% ggplot() +
geom_line(aes(date, air_temp_mean), color = "red") +
geom_line(aes(date, tempc_mean)) +
geom_line(aes(date, z_Yield_mm_log), color = 'blue') +
facet_wrap(~site_name)
# temperature time series - break by site and year
dat %>% ggplot(aes(yday, tempc_mean))+
geom_line(aes(color = factor(year)))+
facet_grid(year~site_name)
# flow time series - break by site and year
dat %>% ggplot(aes(yday, Yield_mm_log))+
geom_line(aes(color = factor(year)))+
facet_grid(year~site_name)
dat %>%
filter(z_Yield_mm_log != 0) %>%
ggplot(aes(x = z_air_temp_mean, y = z_Yield_mm_log)) +
geom_point() +
ggpubr::stat_cor(method = "pearson", label.x.npc = 0, label.y.npc = 0.1) +
facet_wrap(~site_name)
ggpubr::ggarrange(dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw(),
dat %>% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw(),
dat %>% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw(),
common.legend = "right", ncol = 1)
ggpubr::ggarrange(dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw(),
dat %>% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw(),
dat %>% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw(),
common.legend = TRUE, ncol = 1)
?ggpubr::ggarrange()
ggpubr::ggarrange(dat %>% ggplot(aes(x = air_temp_mean, color = site_name)) + geom_density() + theme_bw(),
dat %>% ggplot(aes(x = flow_mean_log, color = site_name)) + geom_density() + theme_bw(),
dat %>% ggplot(aes(x = Yield_mm_log, color = site_name)) + geom_density() + theme_bw(),
common.legend = TRUE, legend = "right", ncol = 1)
dat %>% ggplot() +
geom_line(aes(date, air_temp_mean), color = "red") +
geom_line(aes(date, tempc_mean)) +
geom_line(aes(date, z_Yield_mm_log*10), color = 'blue') +
facet_wrap(~site_name)
# row indices for first observation in each site-year
firstObsRows <- unlist(dat %>%
group_by(siteYear) %>%
summarize(index = rowNum[min(which(!is.na(tempc_mean)))]) %>%
ungroup() %>%
select(index))
nFirstObsRows <- length(firstObsRows)
# does the number of first observations match the number of site years?
nFirstObsRows == length(unique(dat$siteYear))
evalRows <- unlist(dat %>% filter(!rowNum %in% firstObsRows) %>% select(rowNum))
nEvalRows <- length(evalRows)
# fixed effects
data.fixed <- data.frame(intercept = 1,
# air temperature
airTemp = dat$air_temp_mean,
airTempLag1 = dat$air_temp_mean_lag1,
airTempLag2 = dat$air_temp_mean_lag2,
# flow
flow = dat$z_Yield_mm_log,
# air temp x flow interaction
airFlow = dat$air_temp_mean * dat$z_Yield_mm_log
)
# random site effects
# data.random.sites <- data.frame(intercept.site = 1,
#                                 airTemp = dat$air_temp_mean)
data.random.sites <- data.frame(intercept.site = 1,
air = dat$z_air_temp_mean,
flow = dat$z_Yield_mm_log,
airflow = dat$z_air_temp_mean * dat$z_Yield_mm_log)
# random year effects
data.random.years <- data.frame(intercept.year = 1,
doy = dat$yday,
doy2 = dat$yday^2,
doy3 = dat$yday^3)
Ti <- length(unique(dat$year))
L <- dim(data.random.years)[2]
W.year <- diag(L)
# combine data in a list
jags.data <- list("temp" = dat$tempc_mean,
"nFirstObsRows" = nFirstRowObs,
"firstObsRows" = firstRowObs,
"nEvalRows" = nEvalRows,
"evalRows" = evalRows,
"X.0" = data.fixed,
"X.site" = data.random.sites,
"X.year" = data.random.years,
"nFixedCovs" = dim(data.fixed)[2],
"nRandCovs" = dim(data.random.sites)[2],
"site" = dat$site_code,
"year" = dat$year_code,
"nSite" = length(unique(dat$site_code)),
"Ti" = Ti,
"L" = L,
"W.year" = W.year,
"n" = dim(dat)[1])
# parameters to monitor
jags.params <- c("B.0", "B.site", "B.year",
"ar1", "ar1Mean", "ar1SD",
"mu.year", "sigma.b.year",
"sigma", "residuals", "R2",
"temp", "stream.mu", "rmse")
fit2 <- jags(data = jags.data, inits = NULL, parameters.to.save = jags.params, model.file = "DailyTempModelJAGS_mod.txt",
n.chains = 3, n.thin = 5, n.burnin = 500, n.iter = 2500, DIC = TRUE)
top_mod <- fit2
# generate MCMC samples and store as an array
modelout <- top_mod$BUGSoutput
McmcList <- vector("list", length = dim(modelout$sims.array)[2])
for(i in 1:length(McmcList)) { McmcList[[i]] = as.mcmc(modelout$sims.array[,i,]) }
# rbind MCMC samples from 10 chains
Mcmcdat <- rbind(McmcList[[1]], McmcList[[2]], McmcList[[3]])
param.summary <- modelout$summary
head(param.summary)
ggfit <- ggs(as.mcmc(top_mod), keep_original_order = TRUE)
top_mod$BUGSoutput$summary[,8][top_mod$BUGSoutput$summary[,8] > 1.01]
MCMCtrace(top_mod, ind = TRUE,
params = c("B.site", "B.year",
#"ar1", "ar1Mean", "ar1SD", "mu.year", "sigma.b.year", "B.0",
"sigma", "R2", "rmse"), pdf = FALSE)
Mcmcdat <- as_tibble(Mcmcdat)
# subset expected and observed MCMC samples
ppdat_exp <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), "stream.mu[")])
ppdat_obs <- as.matrix(Mcmcdat[,startsWith(names(Mcmcdat), "temp[")])
sum(ppdat_exp > ppdat_obs) / (dim(ppdat_obs)[1]*dim(ppdat_obs)[2])
ppdat_obs_mean <- apply(ppdat_obs, 2, mean)
ppdat_exp_mean <- apply(ppdat_exp, 2, mean)
tibble(obs = ppdat_obs_mean, exp = ppdat_exp_mean) %>%
ggplot(aes(x = obs, y = exp)) +
geom_point(alpha = 0.1) +
# geom_smooth(method = "lm") +
geom_abline(intercept = 0, slope = 1, color = "red") +
theme_bw() + theme(panel.grid = element_blank()) +
xlab("Observed") + ylab("Predicted")
mean(unlist(ggfit %>% filter(Parameter == "rmse") %>% select(value)))
ggs_density(ggfit, "rmse")
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*1]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*2]"), myparams, value = TRUE)), sort = FALSE)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*3]",), myparams, value = TRUE)), sort = FALSE) + xlim(-5,5)
ggs_caterpillar(ggfit %>% filter(Parameter %in% grep(glob2rx("B.site*4]"), myparams, value = TRUE)), sort = FALSE) + xlim(-2.5,2.5)
# render whole book
quarto::quarto_render(output_format = "html")
# render whole book
quarto::quarto_render(output_format = "html")
# render whole book
quarto::quarto_render(output_format = "html")
# render whole book
>>>>>>> 49513d6d7cbae1182d867ee620b05e25f35c44be
quarto::quarto_render(output_format = "html")
